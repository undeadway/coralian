/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/base/Array.js":
/*!***************************!*\
  !*** ./src/base/Array.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { isArray, arrayClone } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\r\nconst { unsupportedType, indexOutOfBounds, errorCast } = Error;\r\n\r\n/* ==================== Array 的扩展 ==================== */\r\nvar array_slice = Array.prototype.slice;\r\nif (!Array.removeEach) {\r\n\tArray.removeEach = function (array, callback) {\r\n\t\tif (!typeIs(array, Array.TYPE_NAME)) unsupportedType(array);\r\n\r\n\t\twhile ((node = array.shift()) !== undefined) {\r\n\t\t\tcallback(node);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nArray.forEach = function (array, start, end, callback) {\r\n\tif (!typeIs(array, Array.TYPE_NAME)) unsupportedType(array);\r\n\r\n\tswitch (arguments.length) {\r\n\t\tcase 2:\r\n\t\t\tcallback = start;\r\n\t\t\tstart = 0;\r\n\t\t\tend = array.length;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tcallback = end;\r\n\t\t\tend = array.length;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (start < 0) indexOutOfBounds(start, 0);\r\n\tif (end > array.length) indexOutOfBounds(end, array.length);\r\n\r\n\tfor (let i = start; i < end; i++) {\r\n\t\tlet result = callback(i, array[i]);\r\n\t\tif (undefined !== result) break;\r\n\t}\r\n};\r\n\r\nif (!Array.equals) {\r\n\tfunction equals(arr1, arr2) {\r\n\r\n\t\tif (!(isArray(arr2))) errorCast(arr2, Array);\r\n\t\tif (arr1.equals) return arr1.equals(arr2);\r\n\t\tif (!(isArray(arr1))) errorCast(arr1, Array);\r\n\r\n\t\tvar len = arg1.length;\r\n\t\tif (len === arr2.length) {\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t// 因为数组元素是可以任意对象类型，所以这里调用 Object.equals 来判断两者是否一致\r\n\t\t\t\tif (!Object.equals(arr1[i], arr2[i])) return false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n\tArray.equals = equals;\r\n}\r\nif (!Array.isEmpty) {\r\n\tArray.isEmpty = function (obj) {\r\n\t\tif (obj === null || obj === undefined) return true;\r\n\t\treturn obj.length === 0;\r\n\t};\r\n}\r\nif (!Array.asObject) {\r\n\tArray.asObject = function (input) {\r\n\t\tvar obj = {};\r\n\t\tfor (var i = 0, len = input.length; i < len; i++) {\r\n\t\t\tobj[i] = input[i];\r\n\t\t}\r\n\t\treturn obj;\r\n\t};\r\n}\r\nif (!Array.has) {\r\n\tArray.has = function (input, element) {\r\n\t\tfor (let i = 0, len = input.length; i < len; i++) {\r\n\t\t\tif (Object.equals(element, input[i])) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n}\r\nif (!Array.find) {\r\n\tArray.find = function (input, element) {\r\n\t\tfor (let i = 0, len = this.length; i < len; i++) {\r\n\t\t\tif (Object.equals(element, input[i])) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n}\r\nif (!Array.last) {\r\n\tArray.last = function (array, cnt) {\r\n\t\tlet len = array.length;\r\n\t\tif (!cnt) { // 真的最后一个位置\r\n\t\t\treturn array[len - 1];\r\n\t\t} else {\r\n\t\t\tif (!typeIs(cnt, Number.TYPE_NAME)) unsupportedType(cnt);\r\n\t\t\tif (cnt > len) indexOutOfBounds(cnt, len);\r\n\t\t\tif (cnt > 0) {\r\n\t\t\t\treturn array[len - cnt];\r\n\t\t\t} else {\r\n\t\t\t\treturn array[0 - cnt];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nif (!Array.of) {\r\n\tArray.of = function () {\r\n\t\treturn array_slice.call(arguments);\r\n\t};\r\n}\r\nif (!Array.clone) {\r\n\tArray.clone = arrayClone;\r\n}\r\n\r\nif (!Array.from) {\r\n\tArray.from = (function () {\r\n\t\tvar toStr = Object.prototype.toString;\r\n\t\tvar isCallable = function (fn) {\r\n\t\t\treturn typeof fn === Function.TYPE_NAME || toStr.call(fn) === '[object Function]';\r\n\t\t};\r\n\t\tvar toInteger = function (value) {\r\n\t\t\tvar number = Number(value);\r\n\t\t\tif (isNaN(number)) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tif (number === 0 || !isFinite(number)) {\r\n\t\t\t\treturn number;\r\n\t\t\t}\r\n\t\t\treturn (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\r\n\t\t};\r\n\t\tvar maxSafeInteger = Math.pow(2, 53) - 1;\r\n\t\tvar toLength = function (value) {\r\n\t\t\tvar len = toInteger(value);\r\n\t\t\treturn Math.min(Math.max(len, 0), maxSafeInteger);\r\n\t\t};\r\n\r\n\t\t// The length property of the from method is 1.\r\n\t\treturn function from(arrayLike /*, mapFn, thisArg */) {\r\n\t\t\t// 1. Let C be the this value.\r\n\t\t\tvar C = this;\r\n\r\n\t\t\t// 2. Let items be ToObject(arrayLike).\r\n\t\t\tvar items = Object(arrayLike);\r\n\r\n\t\t\t// 3. ReturnIfAbrupt(items).\r\n\t\t\tif (arrayLike == null) {\r\n\t\t\t\tthrow new TypeError(\"Array.from requires an array-like object - not null or undefined\");\r\n\t\t\t}\r\n\r\n\t\t\t// 4. If mapfn is undefined, then let mapping be false.\r\n\t\t\tvar mapFn = arguments.length > 1 ? arguments[1] : void undefined;\r\n\t\t\tvar T;\r\n\t\t\tif (typeof mapFn !== Object.UNDEFINED_TYPE_NAME) {\r\n\t\t\t\t// 5. else      \r\n\t\t\t\t// 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\r\n\t\t\t\tif (!isCallable(mapFn)) {\r\n\t\t\t\t\tthrow new TypeError('Array.from: when provided, the second argument must be a function');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n\t\t\t\tif (arguments.length > 2) {\r\n\t\t\t\t\tT = arguments[2];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 10. Let lenValue be Get(items, \"length\").\r\n\t\t\t// 11. Let len be ToLength(lenValue).\r\n\t\t\tvar len = toLength(items.length);\r\n\r\n\t\t\t// 13. If IsConstructor(C) is true, then\r\n\t\t\t// 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.\r\n\t\t\t// 14. a. Else, Let A be ArrayCreate(len).\r\n\t\t\tvar A = isCallable(C) ? Object(new C(len)) : new Array(len);\r\n\r\n\t\t\t// 16. Let k be 0.\r\n\t\t\tvar k = 0;\r\n\t\t\t// 17. Repeat, while k < len… (also steps a - h)\r\n\t\t\tvar kValue;\r\n\t\t\twhile (k < len) {\r\n\t\t\t\tkValue = items[k];\r\n\t\t\t\tif (mapFn) {\r\n\t\t\t\t\tA[k] = typeof T === Object.UNDEFINED_TYPE_NAME ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tA[k] = kValue;\r\n\t\t\t\t}\r\n\t\t\t\tk += 1;\r\n\t\t\t}\r\n\t\t\t// 18. Let putStatus be Put(A, \"length\", len, true).\r\n\t\t\tA.length = len;\r\n\t\t\t// 20. Return A.\r\n\t\t\treturn A;\r\n\t\t};\r\n\t}());\r\n}\r\n/* ==================== Array 的扩展 ==================== */\n\n//# sourceURL=webpack:///./src/base/Array.js?");

/***/ }),

/***/ "./src/base/Error.js":
/*!***************************!*\
  !*** ./src/base/Error.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let isNumber, getFunctionName;\r\n\r\nfunction init() {\r\n\tif (!isNumber || !getFunctionName) {\r\n\t\tlet common = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\r\n\t\tisNumber = common.isNumber;\r\n\t\tgetFunctionName = common.getFunctionName;\r\n\t}\r\n}\r\n\r\n/* ==================== Error 的扩展 ==================== */\r\nfunction debugError(e) {\r\n\talert('message:' + e.message);\r\n\talert('stack:' + e.stack);\r\n\tthrow e;\r\n}\r\n\r\nfunction errorCast(obj, type) {\r\n\tinit();\r\n\r\n\tif (Function.TYPE_NAME !== typeof type) {\r\n\t\terrorCast(type, Function);\r\n\t}\r\n\r\n\tvar error = new TypeError();\r\n\tconsole.error(error.message);\r\n\tconsole.error(error.stack);\r\n\terror = typeOf(obj) + \" 类型的数据无法转变为 \" + getFunctionName(type) + \"。\";\r\n\tdebugError(error);\r\n}\r\nError.errorCast = errorCast;\r\n\r\nfunction indexOutOfBounds(given, want) {\r\n\tinit();\r\n\tif (!isNumber(given)) errorCast(given, Number);\r\n\tif (!isNumber(want)) errorCast(want, Number);\r\n\r\n\tif (want < given) {\r\n\t\tdebugError(new Error(\"请求的下标 \" + given + \" 超过了上限 \" + want));\r\n\t} else {\r\n\t\tdebugError(new Error(\"请求的下标 \" + given + \" 没有达到下限 \" + want));\r\n\t}\r\n}\r\nError.indexOutOfBounds = indexOutOfBounds;\r\n\r\nfunction noReference(msg) {\r\n\tvar error = new ReferenceError();\r\n\terror.message = msg || \"当前引用错误。\";\r\n\tdebugError(error);\r\n}\r\nError.noReference = noReference;\r\n\r\nfunction unsupportedType(type) {\r\n\tvar error = new TypeError();\r\n\terror.message = typeOf(type) + \"类型的数据不被当前操作所支持。\";\r\n\tdebugError(error);\r\n}\r\nError.unsupportedType = unsupportedType;\r\n\r\nfunction unsupportedOperation(msg) {\r\n\tmsg += \" 不被支持的操作\";\r\n\tdebugError(new Error(msg));\r\n}\r\nError.unsupportedOperation = unsupportedOperation;\r\n\r\nfunction noSuchMethod(name) {\r\n\tdebugError(new Error(\"方法 \" + name + \" 不存在。\"));\r\n}\r\nError.noSuchMethod = noSuchMethod;\r\n\r\nfunction noSuchProperty(name) {\r\n\tdebugError(new Error(\"属性 \" + name + \" 不存在。\"));\r\n}\r\nError.noSuchProperty = noSuchProperty;\r\n\r\nfunction errorStatement() {\r\n\tdebugError(new Error(\"语法错误，或被执行的逻辑不正确。\"));\r\n}\r\nError.errorStatement = errorStatement;\r\n\r\nfunction illegalArguments(msg) {\r\n\tmsg = msg || '函数参数不正确';\r\n\tdebugError(msg);\r\n}\r\nError.illegalArguments = illegalArguments;\r\n/* ==================== Error 的扩展 ==================== */\n\n//# sourceURL=webpack:///./src/base/Error.js?");

/***/ }),

/***/ "./src/base/Object.js":
/*!****************************!*\
  !*** ./src/base/Object.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { keyArray, hasOwnProperty, instanceTo, objectClone, isPrimitive } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\r\nconst { unsupportedType, noReference } = Error;\r\n\r\n/* ==================== Object 的扩展 ==================== */\r\nfunction objectIsEmpty(obj) {\r\n\tif (obj === null || obj === undefined) return true;\r\n\tif (obj.isEmpty) return obj.isEmpty();\r\n\tfor (let k in obj) {\r\n\t\tif (hasOwnProperty(obj, k)) return false;\r\n\t}\r\n\treturn true;\r\n};\r\nif (!Object.isEmpty) {\r\n\tObject.isEmpty = objectIsEmpty;\r\n}\r\n\r\nfunction addAll(from, to) {\r\n\r\n\tif (!typeIs(from, Object.TYPE_NAME, Array.TYPE_NAME)) unsupportedType(from);\r\n\tif (!typeIs(to, Object.TYPE_NAME, Array.TYPE_NAME)) unsupportedType(to);\r\n\r\n\tfor (let key in from) {\r\n\t\tif (hasOwnProperty(from, key)) {\r\n\t\t\tlet now = from[key];\r\n\t\t\tif (typeIs(now, Object.TYPE_NAME)) {\r\n\t\t\t\tlet _to = {};\r\n\t\t\t\taddAll(now, _to);\r\n\t\t\t\tto[key] = _to;\r\n\t\t\t} else {\r\n\t\t\t\tto[key] = from[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nObject.addAll = addAll;\r\n\r\nif (!Object.keys) {\r\n\tObject.keys = function (o) {\r\n\t\tif (o !== Object(o))\r\n\t\t\tthrow new TypeError('Object.keys called on a non-object');\r\n\t\tlet k = [];\r\n\t\tfor (let p in o) {\r\n\t\t\tif (hasOwnProperty(o, p)) {\r\n\t\t\t\tk.push(p);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn k.sort();\r\n\t};\r\n}\r\n\r\nif (!Object.values) {\r\n\tObject.values = function (o) {\r\n\t\tif (o !== Object(o))\r\n\t\t\tthrow new TypeError('Object.keys called on a non-object');\r\n\t\tvar k = [];\r\n\t\tfor (let p in o) {\r\n\t\t\tif (hasOwnProperty(o, p)) {\r\n\t\t\t\tk.push(o[p]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn k.sort();\r\n\t}\r\n}\r\n\r\nfunction equals(arg1, arg2) {\r\n\r\n\tif (arg1 === arg2) return true; // 值相同、数据类型相同，或者引用的是同一块内存，或者是基本类型（数字、字符串、boolean）\r\n\r\n\tlet type1 = typeOf(arg1), type2 = typeOf(arg2);\r\n\r\n\tif (type1 !== type2) return false; // 先判断类型，类型不一致，则直接判断不等\r\n\tif (arg1 == arg2) return true; // 这句是因为可能存在 new String() !== '' 这样的情况\r\n\tif (arg1.equals) return arg1.equals(arg2);\r\n\r\n\tswitch (type1) {\r\n\t\tcase Number.NaN_TYPE_NAME:\r\n\t\t\treturn true; // 因为两个都是 NaN，直接返回 true\r\n\t\tcase Function.TYPE_NAME:\r\n\t\tcase Number.Infinity_TYPE_NAME:\r\n\t\t\treturn arg1 === arg2;\r\n\t\tcase Array.TYPE_NAME:\r\n\t\t\tif (arg1.length !== arg2.length) return false;\r\n\r\n\t\t\tfor (let i = 0, len = arg1.length; i < len; i++) {\r\n\t\t\t\tif (!Array.equals(!arg1[i], arg2[i])) return false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\tcase Object.TYPE_NAME:\r\n\t\t\t// 提取对象的 KEY 为一个数组\r\n\t\t\tvar key1 = keyArray(arg1), key2 = keyArray(arg2);\r\n\t\t\tif (key1.length === key2.length) {\r\n\t\t\t\t// 直接转化为字符串判断两个 KEY 的内容是否一致\r\n\t\t\t\tif (key1.toString() === key2.toString()) {\r\n\t\t\t\t\tfor (let i = 0, len = key1.length; i < len; i++) {\r\n\t\t\t\t\t\tif (!equals(arg1[key1[i]], arg2[key2[i]])) return false; // 递归\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tcase RegExp.TYPE_NAME:\r\n\t\t\treturn arg1.toString == arg2.toString();\r\n\t\tdefault:\r\n\t\t\t// 其余不可判断的类型全部JSON化之后判断字符串内容\r\n\t\t\treturn JSON.stringify(arg1) === JSON.stringify(arg2);\r\n\t}\r\n}\r\nObject.equals = equals;\r\n\r\nObject.forEach = (obj, callback) => {\r\n\tif (obj === null || obj === undefined) noReference();\r\n\tif (obj instanceof Map) {\r\n\t\tfor (let [key, value] of obj.entries()) {\r\n\t\t\tcallback(key, value);\r\n\t\t}\r\n\t} else {\r\n\t\tswitch (typeOf(obj)) {\r\n\t\t\tcase Array.TYPE_NAME:\r\n\t\t\t\tArray.forEach(obj, callback);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Object.TYPE_NAME:\r\n\t\t\t\tfor (let k in obj) {\r\n\t\t\t\t\tif (hasOwnProperty(obj, k)) {\r\n\t\t\t\t\t\tlet result = callback(k, obj[k]);\r\n\t\t\t\t\t\tif (undefined !== result) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tunsupportedType(obj);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (!Object.mix) {\r\n\tObject.mix = function () {\r\n\t\tlet deepCpy = arguments[0],\r\n\t\t\tstart = 1;\r\n\t\tif (!typeIs(deepCpy, Boolean.TYPE_NAME)) {\r\n\t\t\tdeepCpy = false;\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\r\n\t\tlet result = {};\r\n\r\n\t\tfor (let i = start; i < arguments.length; i++) {\r\n\t\t\tlet e = arguments[i];\r\n\r\n\t\t\tif (!typeIs(e, Object.TYPE_NAME)) unsupportedType(e);\r\n\r\n\t\t\tlet el = deepCpy ? JSON.parse(JSON.stringify(e)) : e;\r\n\r\n\t\t\taddAll(el, result);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\nObject.isPrimitive = (obj) => {\r\n\tif (obj === null || obj === undefined) return true;\r\n\tlet type = obj.constructor;\r\n\r\n\treturn isPrimitive(type);\r\n};\r\n\r\nif (!Object.clone) {\r\n\tObject.clone = objectClone;\r\n}\r\n\r\nif (!Object.instanceTo) {\r\n\tObject.instanceTo = instanceTo;\r\n}\r\n/* ==================== Object 的扩展 ==================== */\n\n//# sourceURL=webpack:///./src/base/Object.js?");

/***/ }),

/***/ "./src/base/String.js":
/*!****************************!*\
  !*** ./src/base/String.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* ==================== String 的扩展 ==================== */\r\nconst { errorCast, unsupportedType } = Error;\r\n\r\nconst EMPTY_STRING = \"\";\r\nfunction equals(from, another) {\r\n\r\n\tif (!typeIs(from, String.TYPE_NAME)) errorCast(from, String); // from 不是字符串\r\n\tif (!typeIs(another, String.TYPE_NAME)) errorCast(from, String); // another 不是字符串\r\n\r\n\tif (String(from) === String(another)) return true;\r\n\tif (from.equals) return from.equals(another);\r\n\r\n\t// 添加最后这段是为了保证其他各种因为 new 或者其他原因造成的问题\r\n\tif (from.length === another.length) {\r\n\t\tfor (let i = 0, len = from.length; i < len; i++) {\r\n\t\t\tif (from.charAt(i) !== another.charAt(i)) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nif (!String.isEmpty) {\r\n\tString.isEmpty = function (input) {\r\n\r\n\t\tif (input === null || input === undefined) return true;\r\n\t\tif (!typeIs(input, String.TYPE_NAME)) unsupportedType(input);\r\n\t\tif (input.isEmpty) return input.isEmpty();\r\n\r\n\t\treturn input.length === 0 || equals(input, EMPTY_STRING); // 后面一半仅限于前半段不知道什么时候会坏掉时用\r\n\t};\r\n}\r\nif (!String.equals) {\r\n\tString.equals = equals;\r\n}\r\nif (!String.contains) {\r\n\tString.contains = function (str, input, startIndex) {\r\n\t\tif (str.contains) return str.contains(input, startIndex);\r\n\t\treturn -1 !== String.prototype.indexOf.call(str, input, startIndex);\r\n\t};\r\n}\r\n\r\nif (!String.equalsIgnoreCase) {\r\n\tString.equalsIgnoreCase = function (string, another) {\r\n\r\n\t\tif (string === another) return true;\r\n\t\tif (string.equalsIgnoreCase) return string.equalsIgnoreCase(another);\r\n\r\n\t\tif ((another !== null && another !== undefined) || string.length === another.length) {\r\n\t\t\treturn equals(string.toUpperCase(), another.toUpperCase());\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\nif (!String.endsWith) {\r\n\tString.endsWith = function (str, searchString, position) {\r\n\r\n\t\tif (str.endsWith) return str.endsWith(searchString, position);\r\n\r\n\t\tposition = position || str.length;\r\n\t\tposition = position - searchString.length;\r\n\t\tvar lastIndex = str.lastIndexOf(searchString);\r\n\t\treturn lastIndex !== -1 && lastIndex === position;\r\n\t};\r\n}\r\nString.last = function (string) {\r\n\tif (string.last) return string.last();\r\n\treturn string[string.length - 1];\r\n};\r\nString.lastCode = function (string) {\r\n\tif (string.lastCode) return string.lastCode();\r\n\treturn string.charCodeAt(string.length - 1);\r\n};\r\nif (!String.startsWith) {\r\n\tObject.defineProperty(String, 'startsWith', {\r\n\t\tenumerable: false,\r\n\t\tconfigurable: false,\r\n\t\twritable: false,\r\n\t\tvalue: function (string, searchString, position) {\r\n\t\t\tif (string.startsWith) return string.startsWith(searchString, position);\r\n\t\t\tposition = position || 0;\r\n\t\t\treturn string.indexOf(searchString, position) === position;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction trimZeroWidth(str) {\r\n\tif (str.trimZeroWidth) return str.trimZeroWidth();\r\n\treturn str.replace(/\\uFEFF/, EMPTY_STRING);\r\n}\r\n\r\nif (!String.trim) {\r\n\tString.trim = function (str) {\r\n\t\tif (str.trim) return str.trim();\r\n\t\tstr = str.replace(/^\\s+|\\s+$/gm, EMPTY_STRING);\r\n\t\treturn trimZeroWidth(str);\r\n\t};\r\n}\r\nif (!String.trimLeft) {\r\n\tString.trimLeft = function (str) {\r\n\t\tif (str.trimLeft) return str.trimLeft();\r\n\t\tstr.replace(/(^\\s*)/g, EMPTY_STRING);\r\n\t\treturn trimZeroWidth(str);\r\n\t};\r\n}\r\nif (!String.trimRight) {\r\n\tString.trimRight = function (str) {\r\n\t\tif (str.trimRight) return str.trimRight();\r\n\t\tstr.replace(/(\\s*$)/g, EMPTY_STRING);\r\n\t\treturn trimZeroWidth(str);\r\n\t};\r\n}\r\n\r\nif (!String.compareTo) {\r\n\tString.compareTo = function (first, another) {\r\n\t\tif (first.compareTo) return first.compareTo(another);\r\n\t\tvar len1 = first.length,\r\n\t\t\tlen2 = another.length;\r\n\t\tvar max = len1 - len2;\r\n\t\tvar len = (max <= 0) ? len1 : len2;\r\n\t\tvar this_charCodeAt = first.charCodeAt;\r\n\t\tvar another_charCodeAt = another.charCodeAt;\r\n\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\tlet as = this_charCodeAt(i) - another_charCodeAt(i);\r\n\t\t\tif (as !== 0) return as;\r\n\t\t}\r\n\t\treturn max;\r\n\t};\r\n}\r\nif (!String.fromCodePoint) {\r\n\t(function () {\r\n\t\tvar defineProperty = (function () {\r\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\r\n\t\t\ttry {\r\n\t\t\t\tvar object = {};\r\n\t\t\t\treturn Object.defineProperty(object, object, object) && Object.defineProperty;\r\n\t\t\t} catch (error) { }\r\n\t\t}());\r\n\t\tvar stringFromCharCode = String.fromCharCode;\r\n\t\tvar floor = Math.floor;\r\n\r\n\t\tfunction fromCodePoint() {\r\n\t\t\tvar MAX_SIZE = 0x4000;\r\n\t\t\tvar codeUnits = [];\r\n\t\t\tvar highSurrogate;\r\n\t\t\tvar lowSurrogate;\r\n\t\t\tvar index = -1;\r\n\t\t\tvar length = arguments.length;\r\n\t\t\tif (!length) {\r\n\t\t\t\treturn EMPTY_STRING;\r\n\t\t\t}\r\n\t\t\tvar result = EMPTY_STRING;\r\n\t\t\twhile (++index < length) {\r\n\t\t\t\tlet codePoint = Number(arguments[index]);\r\n\t\t\t\tif (!isFinite(codePoint) || // `NaN`, `+Infinity`, or\r\n\t\t\t\t\t// `-Infinity`\r\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\r\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\r\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\r\n\t\t\t\t) {\r\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\r\n\t\t\t\t}\r\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\r\n\t\t\t\t\tcodeUnits.push(codePoint);\r\n\t\t\t\t} else { // Astral code point; split in surrogate halves\r\n\t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n\t\t\t\t\tcodePoint -= 0x10000;\r\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\r\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\r\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\r\n\t\t\t\t}\r\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\r\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\r\n\t\t\t\t\tcodeUnits.length = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\tif (defineProperty) {\r\n\t\t\tdefineProperty(String, 'fromCodePoint', {\r\n\t\t\t\t'value': fromCodePoint,\r\n\t\t\t\t'configurable': true,\r\n\t\t\t\t'writable': true\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tString.fromCodePoint = fromCodePoint;\r\n\t\t}\r\n\t}());\r\n}\r\nif (!String.prototype.codePointAt) {\r\n\t(function () {\r\n\t\t'use strict'; // needed to support `apply`/`call` with\r\n\t\t// `undefined`/`null`\r\n\t\tvar codePointAt = function (position) {\r\n\t\t\tif (this == null) {\r\n\t\t\t\tthrow TypeError();\r\n\t\t\t}\r\n\t\t\tvar string = String(this);\r\n\t\t\tvar size = string.length;\r\n\t\t\t// `ToInteger`\r\n\t\t\tvar index = position ? new Number(position) : 0;\r\n\t\t\tif (index != index) { // better `isNaN`\r\n\t\t\t\tindex = 0;\r\n\t\t\t}\r\n\t\t\t// Account for out-of-bounds indices:\r\n\t\t\tif (index < 0 || index >= size) return undefined;\r\n\r\n\t\t\t// Get the first code unit\r\n\t\t\tvar first = string.charCodeAt(index);\r\n\t\t\tvar second;\r\n\t\t\tif ( // check if it’s the start of a surrogate pair\r\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\r\n\t\t\t\tsize > index + 1 // there is a next code unit\r\n\t\t\t) {\r\n\t\t\t\tsecond = string.charCodeAt(index + 1);\r\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\r\n\t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn first;\r\n\t\t};\r\n\t\tObject.defineProperty(String.prototype, 'codePointAt', {\r\n\t\t\t'value': codePointAt,\r\n\t\t\t'configurable': true,\r\n\t\t\t'writable': true\r\n\t\t});\r\n\t}());\r\n}\r\n\r\nconst STRING_AS_ARRAY_REGX = /[\\s\\S]/gi;\r\nString.asArray = function (input) {\r\n\treturn input.match(STRING_AS_ARRAY_REGX);\r\n};\r\n\r\nObject.defineProperty(String, 'BLANK', {\r\n\tvalue: EMPTY_STRING,\r\n\twritable: false\r\n});\r\n\r\n/*\r\n * 因为JS已经有 valueOf 函数，所以这里用 from 来实现 类似 Java 中 String.valueOf 的 功能\r\n */\r\nString.from = (obj) => {\r\n\tif (obj === null || obj === undefined) return EMPTY_STRING;\r\n\treturn (obj).valueOf();\r\n};\r\n/* ==================== String 的扩展 ==================== */\n\n//# sourceURL=webpack:///./src/base/String.js?");

/***/ }),

/***/ "./src/base/common.js":
/*!****************************!*\
  !*** ./src/base/common.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(Array, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'array';\r\n\t}\r\n});\r\nObject.defineProperty(Boolean, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'boolean';\r\n\t}\r\n});\r\nObject.defineProperty(Error, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'error';\r\n\t}\r\n});\r\nObject.defineProperty(Function, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'function';\r\n\t}\r\n});\r\nObject.defineProperty(Number, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'number';\r\n\t}\r\n});\r\nObject.defineProperty(Number, 'NaN_TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'NaN';\r\n\t}\r\n});\r\nObject.defineProperty(Number, 'Infinity_TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'Infinity';\r\n\t}\r\n});\r\nObject.defineProperty(Object, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'object';\r\n\t}\r\n});\r\nObject.defineProperty(Object, 'NULL_TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'null';\r\n\t}\r\n});\r\nObject.defineProperty(Object, 'UNDEFINED_TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'undefined';\r\n\t}\r\n});\r\nObject.defineProperty(String, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'string';\r\n\t}\r\n});\r\nObject.defineProperty(RegExp, 'TYPE_NAME', {\r\n\tget: () => {\r\n\t\treturn 'regexp';\r\n\t}\r\n});\r\n\r\nconst _isArray = exports.isArray = (Array.isArray) ? Array.isArray :\r\n\t(arr) => {\r\n\t\treturn arr && (arr instanceof Array ||\r\n\t\t\t(typeof arr === Object.TYPE_NAME &&\r\n\t\t\t\ttypeof arr.length === Number.TYPE_NAME &&\r\n\t\t\t\tarr.propertyIsEnumerable('length')));\r\n\t};\r\n\r\nconst keyArray = exports.keyArray = (Object.keys) ? Object.keys :\r\n\t(obj) => {\r\n\t\tlet keys = [];\r\n\t\tfor (let k in obj) {\r\n\t\t\tif (obj.hasOwnProperty(k)) {\r\n\t\t\t\tkeys.push(k);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn keys;\r\n\t};\r\n\r\nconst { errorCast, noReference, unsupportedType, indexOutOfBounds, unsupportedOperation, noSuchMethod } = Error;\r\n\r\n/**\r\n * 用于得到数据类型\r\n * 一般以 string 类型返回数据类型的值\r\n * 数据类型判断不依照 JS 规则，而是以以下基准判断\r\n * Object.NULL_TYPE_NAME === typeOf(null)\r\n * Object.UNDEFINED_TYPE_NAME === typeOf(undefined)\r\n * Boolean.TYPE_NAME === typeOf(boolean)\r\n * Number.NaN_TYPE_NAME === typeOf(NaN) 仅用于 NaN ，如果提供的是 '12X' 则直接判断为字符串\r\n * Number.Infinity_TYPE_NAME === typeOf(Infinity) 仅用于 Infinity 和 -Infinity，其他可用字面量表达的数字判断为 number\r\n * Number.TYPE_NAME === typeOf(number)\r\n * String.TYPE_NAME === typeOf(string)\r\n * Function.TYPE_NAME === typeOf(function)\r\n * Object.TYPE_NAME === typeOf(object)\r\n * Array.TYPE_NAME === typeOf(array)\r\n * RegExp.TYPE_NAME === typeOf(regexp)\r\n * \r\n * String、Number、Boolean 这三种可以被包装的对象也当成字面量来进行判断，而不返回 object\r\n * 即\r\n * String.TYPE_NAME === typeOf(new String());\r\n * Number.TYPE_NAME === typeOf(new Number());\r\n * Boolean.TYPE_NAME === typeOf(new Boolean());\r\n * \r\n * 但不会判断包括JS 内置的 Date 类型，以及 XmllWrapper 在内的 Coralian 自定义数据类型，这些类型都将被辨认为 object\r\n * \r\n * @returns\r\n */\r\nfunction typeOf(object) {\r\n\tvar result;\r\n\r\n\tif (object === null) {\r\n\t\tresult = Object.NULL_TYPE_NAME;\r\n\t} else if (_isArray(object)) {\r\n\t\tresult = Array.TYPE_NAME;\r\n\t} else if (object !== object) {\r\n\t\tresult = NaN.TYPE_NAME;\r\n\t} else if (object === Infinity || object === -Infinity) {\r\n\t\tresult = Infinity.TYPE_NAME;\r\n\t} else if (object instanceof RegExp) {\r\n\t\tresult = RegExp.TYPE_NAME;\r\n\t} else if (object instanceof Number) { // new Number\r\n\t\tresult = Number.TYPE_NAME;\r\n\t} else if (object instanceof Boolean) { // new Boolean\r\n\t\tresult = Boolean.TYPE_NAME;\r\n\t} else if (object instanceof String) { // new String\r\n\t\tresult = String.TYPE_NAME;\r\n\t} else {\r\n\t\tresult = typeof object;\r\n\t\tif (result === Number.TYPE_NAME && isNaN(object)) { // 以防有漏网之鱼\r\n\t\t\tresult = NaN.TYPE_NAME;\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\nexports.typeOf = typeOf;\r\n\r\n/*\r\n * 第一个参数是需要被比较的 Object 对象\r\n * 从第二个参数开始是一个可变长参数，可以传入任意多字符串参数表达数据类型，\r\n * 只要其中一个和被比较对象的结果一致，则返回 ture 当全部不符合的时候，返回 false 。\r\n */\r\nfunction typeIs(object, types) {\r\n\r\n\tvar type = typeOf(object);\r\n\tvar _types = types;\r\n\r\n\tif (arguments.length === 2 && typeof types === String.TYPE_NAME) {\r\n\t\treturn type === types;\r\n\t} else if (!_isArray(types) && arguments.length > 2) {\r\n\t\t_types = Array.prototype.slice.call(arguments, 1);\r\n\t}\r\n\r\n\treturn Array.has(_types, type);\r\n}\r\nexports.typeIs = typeIs;\r\n\r\nconst LOOP_REG_START = \"#{\",\r\n\tLOOP_REG_END = \"#{/\",\r\n\tLOOP_IN_START = \"#:{\";\r\nconst LOOP_REG_START_L = LOOP_REG_START.length;\r\nconst DEFAULT_PREFIX = \"${\",\r\n\tDEFAULT_SURFIX = \"}\";\r\n\r\nfunction replaceElement(str, obj, prefix, surfix) {\r\n\r\n\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\r\n\tprefix = prefix || DEFAULT_PREFIX;\r\n\tsurfix = surfix || DEFAULT_SURFIX;\r\n\r\n\tvar ret = String.BLANK,\r\n\t\tp1 = 0,\r\n\t\tp2 = 0;\r\n\twhile (true) {\r\n\t\tp1 = str.indexOf(prefix, p2);\r\n\t\tif (p1 === -1) break;\r\n\t\tif (p1 > p2) {\r\n\t\t\tret += str.substring(p2, p1);\r\n\t\t}\r\n\t\tp2 = str.indexOf(surfix, p1 + prefix.length);\r\n\t\tif (p2 === -1) break;\r\n\t\tlet holder = str.substring(p1 + prefix.length, p2);\r\n\t\tlet nests = holder.split('.');\r\n\t\tlet val = obj;\r\n\t\tfor (let i = 0, length = nests.length; i < length; i++) {\r\n\t\t\tval = val[nests[i]];\r\n\t\t\tif (!val) break;\r\n\t\t}\r\n\t\tif (null !== val && undefined !== val) {\r\n\t\t\t// 如果目标对象中不包含请求内容，则清空表达\r\n\t\t\tret += val;\r\n\t\t}\r\n\t\tp2 = p2 + surfix.length;\r\n\t}\r\n\tif (p1 === -1) {\r\n\t\tret += str.substring(p2, str.length);\r\n\t} else {\r\n\t\tif (p2 === -1) {\r\n\t\t\tret += str.substring(p1, str.length);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\nreplaceElement.LOOP_REG_START = LOOP_REG_START;\r\nreplaceElement.LOOP_REG_END = LOOP_REG_END;\r\nreplaceElement.LOOP_IN_START = LOOP_IN_START;\r\nreplaceElement.LOOP_REG_START_L = LOOP_REG_START_L;\r\nreplaceElement.DEFAULT_PREFIX = DEFAULT_PREFIX;\r\nreplaceElement.DEFAULT_SURFIX = DEFAULT_SURFIX;\r\n\r\nexports.replaceElement = replaceElement;\r\n\r\n\r\n/*\r\n * [ERR:20170310] 将 nodejs 更新至 v6.10.0 之后有些时候会出现 hasOwnProperty 错误。\r\n * 错误信息：TypeError: hasOwnProperty is not a function\r\n * 原因未知。\r\n * 所以暂时用这种方式来解决问题\r\n */\r\nfunction hasOwnProperty(obj, keyName) {\r\n\treturn Object.prototype.hasOwnProperty.call(obj, keyName);\r\n}\r\nexports.hasOwnProperty = hasOwnProperty;\r\n\r\nfunction instanceTo(instance, type) {\r\n\r\n\tvar prototype = type.prototype;\r\n\r\n\tif (prototype) {\r\n\t\tinstance.__proto__ = prototype;\r\n\t\tinstance.constructor = prototype.constructor;\r\n\t}\r\n}\r\nexports.instanceTo = instanceTo;\r\n\r\nlet getFunctionName = exports.getFunctionName = (func) => {\r\n\r\n\tvar functionName = String.BLANK;\r\n\tvar _name = func.name;\r\n\tif (_name !== undefined) {\r\n\t\tfunctionName = _name;\r\n\t} else {\r\n\t\tlet arr = null,\r\n\t\t\tstr = func.toString();\r\n\t\tif (str.charAt(0) === '[') {\r\n\t\t\tarr = str.match(/\\[\\w+\\s*(\\w+)\\]/);\r\n\t\t} else {\r\n\t\t\tarr = str.match(/function\\s*(\\w+)/);\r\n\t\t}\r\n\t\tif (arr && arr.length === 2) {\r\n\t\t\tfunctionName = arr[1];\r\n\t\t}\r\n\t}\r\n\r\n\treturn functionName;\r\n}\r\n\r\nconst FUNCTION_MARK = 'function ',\r\n\tARG_MARK = 'arg';\r\nconst BEFOR_BRACKET = '(',\r\n\tAFTER_BRACKET = ');';\r\nconst getFunctionDefine = exports.getFunctionDefine = (name, count) => {\r\n\tvar _d = [];\r\n\tfor (let i = 0; i < count; i++) {\r\n\t\t_d.push(ARG_MARK + i);\r\n\t}\r\n\treturn FUNCTION_MARK + name + BEFOR_BRACKET + _d.join() + AFTER_BRACKET;\r\n}\r\n\r\nexports.newInstance = (type, args) => {\r\n\r\n\tvar obj = {};\r\n\tvar ret = type.apply(obj, args);\r\n\tvar instance = typeIs(ret, Object.TYPE_NAME) ? ret : obj;\r\n\r\n\treturn instanceTo(instance, type);\r\n}\r\n\r\nfunction arrayClone(array) {\r\n\r\n\tvar output = [];\r\n\r\n\tfor (let i = 0, len = array.length; i < len; i++) {\r\n\t\toutput.push(objectClone(array[i]));\r\n\t}\r\n\r\n\treturn output;\r\n}\r\nexports.arrayClone = arrayClone;\r\n\r\nfunction objectClone(obj) {\r\n\r\n\tif (obj === null || obj === undefined) return obj;\r\n\tif (obj !== obj) return obj; // NaN\r\n\tif (typeIs(obj, String.TYPE_NAME, Number.TYPE_NAME, Number.Infinity_TYPE_NAME, Boolean.TYPE_NAME, RegExp.TYPE_NAME, Function.TYPE_NAME)) return obj;\r\n\tif (obj.clone) return obj.clone();\r\n\r\n\tif (_isArray(obj)) {\r\n\t\treturn arrayClone(obj);\r\n\t} else {\r\n\t\tvar another = {};\r\n\t\tfor (let key in obj) {\r\n\t\t\tif (hasOwnProperty(obj, key)) {\r\n\t\t\t\tanother[key] = objectClone(obj[key]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 将新建对象的原型链关联到旧对象上，保证两者看起来一致\r\n\t\tinstanceTo(another, getType(obj));\r\n\r\n\t\treturn another;\r\n\t}\r\n};\r\nexports.objectClone = objectClone;\r\n\r\nfunction Iterator(obj) {\r\n\tif (obj === null || obj === undefined) noReference();\r\n\r\n\tvar isArray = _isArray(obj);\r\n\tif (!isArray && !typeIs(obj, Object.TYPE_NAME)) unsupportedType(obj);\r\n\r\n\tvar keys = keyArray(obj);\r\n\tvar index = 0,\r\n\t\tcount = keys.length;\r\n\r\n\tthis.hasNext = function () {\r\n\t\treturn index < count;\r\n\t};\r\n\tthis.next = function () {\r\n\t\tvar key = keys[index++];\r\n\t\tif (isArray) {\r\n\t\t\treturn key;\r\n\t\t} else {\r\n\t\t\treturn obj[key];\r\n\t\t}\r\n\t};\r\n\tthis.first = function () {\r\n\t\treturn keys[0];\r\n\t};\r\n\tthis.last = function () {\r\n\t\treturn keys[count - 1];\r\n\t};\r\n\tthis[\"goto\"] = function (index) {\r\n\t\tif (index < 0) {\r\n\t\t\tindexOutOfBounds(index, 0);\r\n\t\t}\r\n\t\tif (index >= count) {\r\n\t\t\tindexOutOfBounds(index, count);\r\n\t\t}\r\n\t};\r\n\tthis.forward = function (cnt) {\r\n\t\tvar at = index + cnt;\r\n\t\tif (at < 0) {\r\n\t\t\tindexOutOfBounds(at, 0);\r\n\t\t}\r\n\t\tif (at >= count) {\r\n\t\t\tindexOutOfBounds(at, count);\r\n\t\t}\r\n\t\tindex = at;\r\n\t};\r\n}\r\n\r\nexports.Iterator = Iterator;\r\n\r\nfunction Constructor(type, name, callback, isFunction) {\r\n\r\n\t// 参数个数\r\n\tvar count = type.length,\r\n\t\t// 获得定义\r\n\t\tdefine = getFunctionDefine(name, count);\r\n\r\n\tthis.getDefine = function () {\r\n\t\treturn define;\r\n\t};\r\n\tthis.parameterCount = function () {\r\n\t\treturn count;\r\n\t};\r\n\tthis.newInstance = function () {\r\n\t\tcallback();\r\n\t\tif (!isFunction) {\r\n\t\t\treturn newInstance(type, arguments);\r\n\t\t} else {\r\n\t\t\treturn new type();\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/*\r\n * 布尔类型 布尔表示一个逻辑实体，可以有两个值： true 和 false 。\r\n * Null 类型 Null 类型只有一个值： null ，更多详情可查看 null 和Null 。\r\n * Undefined 类型 ...\r\n * 数字类型 ...\r\n * 字符串类型 ...\r\n * 符号类型 ... \r\n */\r\nfunction isPrimitive(type) {\r\n\treturn (type === String || type === Number || type === Boolean || type === Symbol);\r\n}\r\nexports.isPrimitive = isPrimitive;\r\n\r\nfunction Type(obj) {\r\n\r\n\t// 对象的数据类型\r\n\tvar type = obj.constructor || Object,\r\n\t\t// 对象的原型\r\n\t\tprototype = obj.prototype || Object;\r\n\r\n\t// 是否是基本数据类型\r\n\tvar _isPrimitive = isPrimitive(type),\r\n\t\t// 是否是接口\r\n\t\t_isInterface = isInterface(obj),\r\n\t\t// 是否是数组\r\n\t\tisArray = _isArray(obj),\r\n\t\tisFunction = (type === Function),\r\n\t\t// 是否是字面量对象\r\n\t\tisLiteral = (type === Object || _isPrimitive || isArray || type === RegExp);\r\n\r\n\t// 类型的名字\r\n\tvar name = getFunctionName(type);\r\n\r\n\tfunction constructorCheck() {\r\n\t\tif (isLiteral || _isPrimitive) {\r\n\t\t\tthrow new Error(\"请使用字面量来构造对象\");\r\n\t\t}\r\n\t\tif (_isInterface) {\r\n\t\t\tthrow new Error(\"请使用 Coralian.util.Interface 类的 newInterface 方法来构造接口\");\r\n\t\t}\r\n\t}\r\n\r\n\tthis.getName = function () {\r\n\t\treturn name;\r\n\t};\r\n\tthis.getStatic = type.getStatic;\r\n\tthis.isLiteral = function () {\r\n\t\treturn isLiteral;\r\n\t};\r\n\tthis.isArray = function () {\r\n\t\treturn isArray;\r\n\t};\r\n\tthis.isInterface = function () {\r\n\t\treturn _isInterface;\r\n\t};\r\n\tthis.isPrimitive = function () {\r\n\t\treturn isPrimitive;\r\n\t};\r\n\tthis.isFunction = function () {\r\n\t\treturn isFunction;\r\n\t};\r\n\t// TODO 这两个到底是个什么还没想好\r\n\t//\t\t\tthis.invoke = function() {\r\n\t//\t\t\t\tif (isFunction) {\r\n\t//\t\t\t\t\treturn type.apply(null, arguments);\r\n\t//\t\t\t\t} else {\r\n\t//\t\t\t\t\tunsupportedOperation(typeOf(type) + \"不是函数\");\r\n\t//\t\t\t\t}\r\n\t//\t\t\t},\r\n\tthis.newInstance = function () {\r\n\t\tconstructorCheck();\r\n\t\tif (!isFunction) {\r\n\t\t\treturn newInstance(type);\r\n\t\t} else {\r\n\t\t\treturn new type();\r\n\t\t}\r\n\t};\r\n\tthis.getPrototype = function () {\r\n\t\treturn prototype;\r\n\t};\r\n\tthis.typeIs = function () {\r\n\t\treturn typeIs(obj, arguments);\r\n\t};\r\n\tthis.instanceOf = function (classType) {\r\n\t\treturn type === classType || type instanceof classType;\r\n\t};\r\n\tthis.getConstructor = function () {\r\n\t\treturn new Constructor(type, name, constructorCheck, isFunction);\r\n\t};\r\n}\r\n\r\nlet getType = exports.getType = (obj) => {\r\n\treturn new Type(obj);\r\n}\r\n\r\nfunction Interface(name, methods) {\r\n\tfor (let i = 0, len = methods.length; i < len; i++) {\r\n\t\tlet method = methods[i];\r\n\t\tif (!typeIs(method, String.TYPE_NAME)) errorCast(method, String);\r\n\t}\r\n\tthis.getName = function () {\r\n\t\treturn name;\r\n\t};\r\n\tthis.iterator = function () {\r\n\t\treturn new Iterator(methods);\r\n\t};\r\n}\r\n\r\nfunction newInterface(name, methods) {\r\n\tif (arguments.length === 1) throw new Error(\"构建接口至少定义一个方法\");\r\n\r\n\tif (!Array.isArray(methods)) {\r\n\t\tmethods = array_slice.call(arguments, 1);\r\n\t}\r\n\r\n\treturn new Interface(name, methods);\r\n}\r\n\r\nfunction isInterface(obj) {\r\n\treturn obj instanceof Interface;\r\n}\r\n\r\nexports.Interface = {\r\n\tnewInterface: newInterface,\r\n\tensureImplements: function (object) {\r\n\t\tif (arguments.length < 2) throw new Error(\"判定对象是否是实现某接口，必须先提供至少一个被判定的接口\");\r\n\r\n\t\tfor (let i = 1, len = arguments.length; i < len; i++) {\r\n\t\t\tlet target = arguments[i];\r\n\t\t\tif (!isInterface(target)) errorCast(object, Interface);\r\n\r\n\t\t\tlet iterator = target.iterator();\r\n\t\t\twhile (iterator.hasNext()) {\r\n\t\t\t\tlet name = iterator.next();\r\n\t\t\t\tlet method = object[name];\r\n\t\t\t\tif (!method || !typeIs(method, Function.TYPE_NAME)) noSuchMethod(name);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tisInterface: isInterface,\r\n\tCollection: newInterface(\"Collection\", // 接口名称\r\n\t\t[\"add\", // add 方法，添加元素\r\n\t\t\t\"clear\", // clear 方法，清空元素\r\n\t\t\t\"exists\", // exists 方法，判断元素是否存在于集合中\r\n\t\t\t\"existsAll\", // existsAll 方法，判断元素集合是否都存在于集合中\r\n\t\t\t\"equals\", // equals 方法，判断元素是否和集合是否相同，由各个实现类各自实现具体需求\r\n\t\t\t\"isEmpty\", // isEmpty 方法，判断集合是否为空\r\n\t\t\t\"remove\", // remove 方法，删除某个指定的元素\r\n\t\t\t\"size\", // size 方法，获得集合的大小（元素个数）\r\n\t\t\t\"toArray\" // toArray 方法，将集合转化成数组\r\n\t\t])\r\n}\r\n\r\nexports.isNumber = (number, notation) => {\r\n\r\n\tif (number !== number) return false;\r\n\r\n\tnotation = notation || 10;\r\n\r\n\tif (notation === 16 && !String.startsWith((number).toString().toLowerCase(), '0x')) {\r\n\t\tnumber = '0x' + number;\r\n\t}\r\n\r\n\treturn isFinite(number);\r\n}\r\n\r\nexports.formatString = (str, ...obj) => {\r\n\r\n\tif (!obj) unsupportedOperation('至少需要一个字符来进行替换');\r\n\r\n\tif (Object.TYPE_NAME === typeOf(obj[0])) {\r\n\t\tstr = replaceElement(str, obj[0]);\r\n\t} else {\r\n\t\tObject.forEach(obj, function (i, e) {\r\n\t\t\tstr = str.replace(/\\%s/, e);\r\n\t\t});\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\nlet side = typeof (window) !== Object.UNDEFINED_TYPE_NAME; // 设置端点，side = true 客户端 side = false 服务端\r\nexports.side = side;\r\n\r\nconst SIDE_ONLY_FMT_STR = \"只能在%s中使该功能用\";\r\nexports.browserOnly = () => {\r\n\tif (!side) throw new Error(formatString(SIDE_ONLY_FMT_STR, \"浏览器\"));\r\n}\r\n\r\nexports.serverOnly = () => {\r\n\tif (side) throw new Error(formatString(SIDE_ONLY_FMT_STR, \"服务端\"));\r\n}\n\n//# sourceURL=webpack:///./src/base/common.js?");

/***/ }),

/***/ "./src/base/others.js":
/*!****************************!*\
  !*** ./src/base/others.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { hasOwnProperty, getFunctionName, getFunctionDefine, getType, isNumber } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\r\nconst { errorCast, unsupportedType, noReference } = Error;\r\n\r\n/* ==================== Date 的扩展 ==================== */\r\nDate.toJSON = Date.toString = function (date) {\r\n\r\n\treturn date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate() + \" \" + date.getHours() + \":\" +\r\n\t\tdate.getMinutes() + \":\" + date.getSeconds();\r\n};\r\nDate.clone = function (date) {\r\n\tif (!(date instanceof Date)) {\r\n\t\terrorCast(date, Date);\r\n\t}\r\n\tvar another = new Date(date.getTime());\r\n\treturn another;\r\n};\r\n/* ==================== Date 的扩展 ==================== */\r\n/* ==================== Number 的扩展 ==================== */\r\nif (!Number.isNumber) {\r\n\tNumber.isNumber = isNumber;\r\n}\r\n\r\nNumber.equals = function (num1, num2) {\r\n\r\n\tif (!isNumber(num1)) unsupportedType(num1);\r\n\tif (!isNumber(num2)) unsupportedType(num2);\r\n\r\n\treturn num1 == num2;\r\n};\r\nNumber.from = (obj) => {\r\n\tif (!isNumber(obj)) return NaN;\r\n\r\n\treturn Number(obj);\r\n\t// return (obj).toString();\r\n};\r\n/* ==================== Number 的扩展 ==================== */\r\n/* ==================== Function 的扩展 ==================== */\r\nif (!Function.getName) {\r\n\tFunction.getName = getFunctionName;\r\n}\r\n\r\nif (!Function.EMPTY_BODY) {\r\n\tObject.defineProperty(Function, \"EMPTY_BODY\", {\r\n\t\tvalue: () => { },\r\n\t\twritable: false\r\n\t});\r\n}\r\n\r\nif (!Function.getStatic) {\r\n\tFunction.getStatic = (func) => {\r\n\r\n\t\tvar statics = {};\r\n\r\n\t\tfor (let k in func) {\r\n\t\t\tif (hasOwnProperty(func, k)) {\r\n\t\t\t\tstatics[k] = func[k];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.isEmpty(statics) ? undefined : statics;\r\n\t}\r\n}\r\n\r\nFunction.getDefine = (func) => {\r\n\treturn getFunctionDefine(getFunctionName(func), func.count);\r\n};\r\n/* ==================== Function 的扩展 ==================== */\r\n/* ==================== Map 的扩展 ==================== */\r\n/* ==================== Map 的扩展 ==================== */\r\nif (!Map.isEmpty) {\r\n\tMap.isEmpty = function (map) {\r\n\t\treturn map.size === 0;\r\n\t}\r\n}\r\nif (!Map.equals) {\r\n\tMap.equals = collectionIsSame;\r\n}\r\n/* ==================== Set 的扩展 ==================== */\r\nif (!Set.isEmpty) {\r\n\tSet.isEmpty = (set) => {\r\n\t\treturn set.size === 0;\r\n\t};\r\n}\r\nif (!Set.equals) {\r\n\tSet.equals = collectionIsSame;\r\n}\r\n/* ==================== Set 的扩展 ==================== */\r\nfunction collectionIsSame(c1, c2) {\r\n\r\n\tif (c1 === c2) return true;\r\n\tif (Function.getName(getType(c1)) !== Function.getName(getType(c2))) return false;\r\n\tif (c1.size !== c2.size) return false;\r\n\r\n\tlet c1Iter = c1[Symbol.iterator]();\r\n\tlet c2Iter = c2[Symbol.iterator]();\r\n\r\n}\n\n//# sourceURL=webpack:///./src/base/others.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * 自定义函数集/类库\r\n * <p>\r\n * 主要实现两个功能 <br />\r\n * 1.针对 JS 自身的不足，补足相关功能、添加部分数据类型 <br />\r\n * 设计方针基本符合《 JavaScript 语言精粹 》中的要求 <br />\r\n * &nbsp;&nbsp;&nbsp;&nbsp;不同的是因为要设计一些数据类型（Map、Set、Interface、Collection、XmlWrapper）等<br />\r\n * &nbsp;&nbsp;&nbsp;&nbsp;所以保留了对 new 关键字的使用<br />\r\n * 2.简单化功能封装 <br />\r\n * &nbsp;&nbsp;&nbsp;&nbsp;包括对一些 JS 中不尽人意的地方进行了封装，或者重新写了一些相适用的方法 / 函数集合\r\n * </p>\r\n * 所有实现均为对 ECMAScript 的扩展，不包含任何 window、document 操作<br />\r\n * 适用浏览器\r\n * <ul>\r\n * <li>Firefox</li>\r\n * <li>Chrome</li>\r\n * <li>Opera</li>\r\n * <li>Edge</li>\r\n * </ul>\r\n */\r\n\r\n/*\r\n * 这些属于 JS 的基本类库扩展，不用导入Coralian命名空间\r\n */\r\n__webpack_require__(/*! ./base/Error */ \"./src/base/Error.js\");\r\n__webpack_require__(/*! ./base/Array */ \"./src/base/Array.js\");\r\n__webpack_require__(/*! ./base/Object */ \"./src/base/Object.js\");\r\n__webpack_require__(/*! ./base/String */ \"./src/base/String.js\");\r\n__webpack_require__(/*! ./base/others */ \"./src/base/others.js\");\r\n\r\nconst { side, typeOf, typeIs, browserOnly, serverOnly } = __webpack_require__(/*! ./base/common */ \"./src/base/common.js\");\r\nconst { noReference, unsupportedType } = Error;\r\n\r\nlet that = null, // 定义 全局变量 that，node 中等价于 global 浏览器中等价于 window\r\n\tn_eval = null; // 将 eval 函数的指针赋值给本地局部变量（暂时不知道能干嘛，保留指针）\r\n\r\n/*\r\n * 因为服务端（Nodejs）和客户端（浏览器）有不一样的地方 所以这里分别为服务端和客户端添加载入 Coralian\r\n * 库所必需的函数或者一些方便调试的函数 通过 try... catch 块来分别执行 服务端和 客户端所需要加载的内容\r\n */\r\nif (side) {\r\n\tthat = window; // 初始化客户端\r\n\tthat.global = window;\r\n\r\n\t// 如果客户端没有实现 console.log 则用 window.alert 来代为实现相关功能\r\n\tif (!window.console) {\r\n\t\tthat.cosole = {\r\n\t\t\tlog: that.alert,\r\n\t\t\terr: that.alert,\r\n\t\t\twarn: that.alert\r\n\t\t};\r\n\t} else if (!window.console.log) {\r\n\t\tthat.console.log = that.alert\r\n\t}\r\n} else {\r\n\tthat = global;\r\n\tthat.alert = function (msg) {\r\n\t\tif (String.contains(msg, Error.TYPE_NAME)) {\r\n\t\t\tconsole.log(new Error());\r\n\t\t}\r\n\t\tconsole.log(msg);\r\n\t};\r\n}\r\n\r\n// 将 typeOf 和 typeIs 分别添加到全局对象\r\nthat.typeOf = typeOf;\r\nthat.typeIs = typeIs;\r\n\r\nfunction setToGlobal(parent, pkg, obj) {\r\n\r\n\tlet name = pkg[0];\r\n\tif (pkg.length > 1) {\r\n\t\tlet sub = parent[name];\r\n\t\tif (!sub) {\r\n\t\t\tsub = parent[name] = {};\r\n\t\t}\r\n\t\tsetToGlobal(sub, pkg.slice(1), obj);\r\n\t} else {\r\n\t\tparent[name] = obj;\r\n\t}\r\n}\r\n\r\nthat.Coralian = {\r\n\tABOUT: 'Coralian',\r\n\tVERSION: '0.0.6',\r\n\tHOMEPAGE: 'http://codes.waygc.net/project/?coralian',\r\n\tAUTHOR: 'hzwaygc@gmail.com',\r\n\tside: function () {\r\n\t\treturn side;\r\n\t},\r\n\t/*\r\n\t * 下面两个方法是用来描述作用环境的\r\n\t * 如果判断执行环境非作用环境，则抛出异常。\r\n\t */\r\n\tbrowserOnly: browserOnly,\r\n\tserverOnly: serverOnly,\r\n\t/*\r\n\t * 这组函数主要是用来实现将对象设置到 global 中用\r\n\t * 和计划的解耦客户-服务端的不同方式，自己调用一个函数就可以的目的有些不同\r\n\t * 这里更希望能实现一个类似 Java Class.forName 这样的一个功能\r\n\t */\r\n\tsetToGlobal: function (name, obj) {\r\n\r\n\t\tif (obj === null || obj === undefined) noReference();\r\n\t\tif (!typeIs(name, String.TYPE_NAME)) unsupportedType(name);\r\n\t\tif (String.isEmpty(name)) throw new Error(\"不能使用空字符串作为属性名\");\r\n\r\n\t\tsetToGlobal(that, name.split(\".\"), obj);\r\n\t},\r\n\texports: function (name, obj) {\r\n\t\tsetExports(that, name, obj);\r\n\t},\r\n\tlogger: __webpack_require__(/*! ./lib/logger */ \"./src/lib/logger.js\"),\r\n\tconstants: __webpack_require__(/*! ./lib/constants */ \"./src/lib/constants.js\"),\r\n\tutil: __webpack_require__(/*! ./lib/util */ \"./src/lib/util.js\"),\r\n\tdom: __webpack_require__(/*! ./lib/dom */ \"./src/lib/dom.js\"),\r\n\tCalendar: __webpack_require__(/*! ./lib/Calendar */ \"./src/lib/Calendar.js\"),\r\n\tFormatter: __webpack_require__(/*! ./lib/Formatter */ \"./src/lib/Formatter.js\"),\r\n\tRandom: __webpack_require__(/*! ./lib/Random */ \"./src/lib/Random.js\"),\r\n\tReplaceHolder: __webpack_require__(/*! ./lib/ReplaceHolder */ \"./src/lib/ReplaceHolder.js\"),\r\n\tValidator: __webpack_require__(/*! ./lib/Validator */ \"./src/lib/Validator.js\")\r\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)/buildin/global.js */ \"C:\\\\Users\\\\waygc\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\webpack\\\\buildin\\\\global.js\")))\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/lib/Calendar.js":
/*!*****************************!*\
  !*** ./src/lib/Calendar.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { hasOwnProperty, formatString } = __webpack_require__(/*! ./../base/common */ \"./src/base/common.js\");\r\nconst { unsupportedType, unsupportedOperation, errorCast } = Error;\r\nconst { isNumber } = Number;\r\n\r\n// 一天的毫秒数\r\nconst ONE_DAY_MILLISECONDS = 24 * 3600 * 1000;\r\n// 默认对时间进行格式化\r\nconst DEFAULT_DT_FORMAT = \"YYYY-MM-DD hh:mm:ss\",\r\n\tYEAR_REGEXP = /(Y+)/;\r\n// 中文的周几\r\nconst LONG_CHINESE_WEEK = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],\r\n\tSHORT_CHINESE_WEEK = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\r\n// 地支\r\nconst EARTHLY_BRANCH = ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥'];\r\n// 天干\r\nconst CELESTIAL_STEM = ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸'];\r\n// 生肖\r\nconst CHINESE_ZODIAC = ['鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪'];\r\nconst SEXAGENARY_CYCLE_FIRST = 4; // 公元 4年 甲子年\r\n// 英文的周几\r\nconst ENGLISH_WEEK = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n// 中文的几月\r\nconst CHINESE_MONTH = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];\r\n// 英文的几月\r\nconst ENGLISH_MONTH = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Augst', 'September',\r\n\t'October', 'November', 'December'\r\n];\r\n// 一个月有几天\r\nconst MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\nconst CHINESE_CALANER = ['zh', 'xq', 'yue', 'nian'],\r\n\tONE_COUNT = ['M', 'D', 'h', 'm', 's'];\r\nconst TEN = 10,\r\n\tTWELVE = 12,\r\n\tTHIRTY = 30,\r\n\tSEVEN = 7,\r\n\tTWENTY_NINE = 29,\r\n\tTHIRTH_ONE = 31;\r\n\r\nfunction formatTime(date, format) {\r\n\tif (!(date instanceof Date)) {\r\n\t\terrorCast(date, Date);\r\n\t}\r\n\tformat = format || DEFAULT_DT_FORMAT;\r\n\tvar tmpMonth = date.getMonth();\r\n\tvar tmpDay = date.getDay();\r\n\tvar o = {\r\n\t\t\"M+\": (tmpMonth + 1), // month\r\n\t\t\"yue\": CHINESE_MONTH[tmpMonth],\r\n\t\t\"month\": ENGLISH_MONTH[tmpMonth],\r\n\t\t\"mon\": ENGLISH_MONTH[tmpMonth].slice(0, 3),\r\n\t\t\"D+\": date.getDate(), // day\r\n\t\t\"h+\": date.getHours(), // hour\r\n\t\t\"m+\": date.getMinutes(), // minute\r\n\t\t\"s+\": date.getSeconds(), // second\r\n\t\t\"ms\": date.getMilliseconds(), // millisecond\r\n\t\t\"zh\": SHORT_CHINESE_WEEK[tmpDay],\r\n\t\t\"xq\": LONG_CHINESE_WEEK[tmpDay],\r\n\t\t\"w\": ENGLISH_WEEK[tmpDay].slice(0, 3),\r\n\t\t\"week\": ENGLISH_WEEK[tmpDay]\r\n\t};\r\n\tif (YEAR_REGEXP.test(format)) {\r\n\t\tformat = format.replace(RegExp.$1, (date.getFullYear()).toString().substr(4 - RegExp.$1.length));\r\n\t}\r\n\tfor (let k in o) {\r\n\t\tif (hasOwnProperty(o, k)) {\r\n\t\t\tlet regExp = new RegExp(\"(\" + k + \")\");\r\n\t\t\tif (regExp.test(format)) {\r\n\t\t\t\tlet val = o[k];\r\n\t\t\t\tif (Array.has(CHINESE_CALANER, k)) {\r\n\t\t\t\t\tformat = format.replace(regExp, val);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!Array.has(ONE_COUNT, RegExp.$1) && val < 10) {\r\n\t\t\t\t\t\tval = \"0\" + val;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tformat = format.replace(regExp, val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn format;\r\n}\r\n\r\nfunction instanceTime(arg, format) {\r\n\tif (!arg) {\r\n\t\treturn new Date();\r\n\t} else if (arg instanceof Date) {\r\n\t\treturn arg;\r\n\t} else if (isNumber(arg)) {\r\n\t\tlet _date = new Date();\r\n\t\tformat = format || 8;\r\n\t\tswitch (format) {\r\n\t\t\tcase 0:\r\n\t\t\t\t_date.setFullYear(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\t_data.setYear(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\t_data.setMonth(parseInt(arg) - 1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\t_data.setDate(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\t_date.setYear(parseInt(arg / 10000));\r\n\t\t\t\t_date.setMonth(parseInt(arg / 100) % 100 - 1);\r\n\t\t\t\t_date.setDate(arg % 100);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\t_date.setFullYear(parseInt(arg / 10000));\r\n\t\t\t\t_date.setMonth(parseInt(arg / 100) % 100 - 1);\r\n\t\t\t\t_date.setDate(arg % 100);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 16:\r\n\t\t\t\t_date.setTime(arg);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tunsupportedOperation('所选择的格式化参数不正确');\r\n\t\t}\r\n\t\treturn _date;\r\n\t} else {\r\n\t\tunsupportedType(arg);\r\n\t}\r\n}\r\n\r\nfunction isLeapYear(year) {\r\n\treturn (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0));\r\n}\r\n\r\nfunction checkMonthIsValid(month) {\r\n\tif (!isNumber(month)) errorCast(month, Number);\r\n\tif (month < 1 || 12 < month) unsupportedOperation(month + \" 不是一个合法的月份\");\r\n}\r\n\r\nfunction checkYearIsValid(year) {\r\n\tif (!isNumber(year)) errorCast(year, Number);\r\n}\r\n\r\nfunction getMonthDays(year, month) {\r\n\r\n\tvar _isLeapYear = isLeapYear(year);\r\n\r\n\treturn (month === 1 && _isLeapYear) ? TWENTY_NINE : MONTH_DAYS[month];\r\n}\r\n\r\nmodule.exports = exports = {\r\n\t/**\r\n\t * 得到一定时间内的日历（公历表示，农历暂时不考虑）\r\n\t * 得到一个二维表格，每行为7 第一天之前留空，最后剩余留空\r\n\t * \r\n\t * 示例效果如下：\r\n\t * [ [null, null, 1, 2, 3, 4, 5],\r\n\t * [6, 7, 8, 9, 10, 11, 12],\r\n\t * [13, 14, 15, 16, 17, 18, 19],\r\n\t * [20, 21, 22, 23, 24, 25, 26],\r\n\t * [27, 28, 29, 30, null, null, null] ]\r\n\t * \r\n\t * 本函数只有两种重载：\r\n\t *  1 参数指定：year，month，得到 year 年 month 月的月历\r\n\t *  2 无参，得到当前月的月历\r\n\t */\r\n\tmonthly: function (year, month) {\r\n\r\n\t\tvar date = year;\r\n\t\tif (year instanceof Date) {\r\n\t\t\tmonth = year.getMonth();\r\n\t\t\tyear = year.getFullYear();\r\n\t\t} else {\r\n\t\t\tif (year) {\r\n\t\t\t\tcheckYearIsValid(year);\r\n\t\t\t}\r\n\t\t\tif (month) {\r\n\t\t\t\tcheckMonthIsValid(month);\r\n\t\t\t\tmonth -= 1;\r\n\t\t\t}\r\n\t\t\tdate = new Date();\r\n\t\t\tif (year) {\r\n\t\t\t\tdate.setYear(year);\r\n\t\t\t}\r\n\t\t\tif (month) {\r\n\t\t\t\tdate.setMonth(month);\r\n\t\t\t}\r\n\t\t}\r\n\t\tdate.setDate(1); // 月历固定每个月1号\r\n\t\tvar weekDay = date.getDay();\r\n\r\n\t\tvar days = 0,\r\n\t\t\tresult = [],\r\n\t\t\tmonthDays = getMonthDays(year, month);\r\n\r\n\t\twhile (true) {\r\n\t\t\tif (days >= monthDays) break;\r\n\t\t\tlet week = [null, null, null, null, null, null, null];\r\n\t\t\tfor (let i = weekDay; i < 7; i++) {\r\n\t\t\t\tif (++days <= monthDays) {\r\n\t\t\t\t\tweek[i] = days;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tweekDay = 0;\r\n\t\t\tresult.push(week);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\t/*\r\n\t * today 代表目标日期，如果没有这个参数默认取“今天” week\r\n\t * 代表要取的下一个星期几，如果没有这个参数默认取下一个星期天\r\n\t */\r\n\tnextWeekDay: function (week, today) {\r\n\t\tvar now = new Date();\r\n\t\tif (today) {\r\n\t\t\tnow.setDate(today);\r\n\t\t}\r\n\t\tweek = 7 - (week || now.getDay());\r\n\r\n\t\treturn new Date(now.getTime() + ONE_DAY_MILLISECONDS * week);\r\n\t},\r\n\t// 返回被格式化之后的当前时间\r\n\tgetTime: function (time, format) {\r\n\t\tif (time && !typeIs(time, Number.TYPE_NAME)) {\r\n\t\t\ttime = parseInt(time);\r\n\t\t}\r\n\t\treturn formatTime(instanceTime(time, 16), format);\r\n\t},\r\n\tformatTime: formatTime,\r\n\tinstanceTime: instanceTime,\r\n\tisLeapYear: function (year) {\r\n\r\n\t\tif (!isNumber(year)) {\r\n\t\t\terrorCast(year, Number);\r\n\t\t}\r\n\r\n\t\treturn isLeapYear(year);\r\n\t},\r\n\tgetMonthDays: function (year, month) {\r\n\r\n\t\tcheckYearIsValid(year);\r\n\t\tcheckMonthIsValid(month);\r\n\r\n\t\treturn getMonthDays(year, month);\r\n\t},\r\n\tgetWeekDay: function (time, format) {\r\n\t\treturn formatString(instanceTime(time, format || 16));\r\n\t},\r\n\t// 获得农历表示法\r\n\tChineseCalendar: {\r\n\t\tgetChineseZodiac: function (year) {\r\n\t\t\tcheckYearIsValid(year);\r\n\t\t\treturn CHINESE_ZODIAC[(year - CHINESE_SEXAGENARY_CYCLE_FIRST) % TWELVE];\r\n\t\t},\r\n\t\tgetCelestialStem: function (year) {\r\n\t\t\tcheckYearIsValid(year);\r\n\t\t\tvar stem = CELESTIAL_STEM[(year - SEXAGENARY_CYCLE_FIRST) % TEN] +\r\n\t\t\t\tEARTHLY_BRANCH[(year - SEXAGENARY_CYCLE_FIRST) % TWELVE];\r\n\r\n\t\t\treturn stem;\r\n\t\t},\r\n\t\t/*\r\n\t\t * 农历年表示法暂时不支持\r\n\t\t */\r\n\t\tgetSpringFestival: function (year) {\r\n\t\t\tcheckYearIsValid(year);\r\n\t\t\tunsupportedOperation('暂不支持农历年表示法');\r\n\t\t},\r\n\t\tgetMonthlyCalendar: function (year) {\r\n\t\t\tcheckYearIsValid(year);\r\n\t\t\tunsupportedOperation('暂不支持农历年表示法');\r\n\r\n\t\t}\r\n\t}\r\n};\r\n\r\nObject.defineProperty(exports, 'YYYY', {\r\n\tvalue: 0,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'YY', {\r\n\tvalue: 1,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'Month', {\r\n\tvalue: 2,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'Date', {\r\n\tvalue: 4,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'YYMMDD', {\r\n\tvalue: 6,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'YYYYMMDD', {\r\n\tvalue: 8,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'MILLISECOND', {\r\n\tvalue: 16,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'ONE_DAY_MILLISECONDS', {\r\n\tvalue: ONE_DAY_MILLISECONDS,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'CHINESE_MONTH', {\r\n\tvalue: CHINESE_MONTH,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'ENGLISH_WEEK', {\r\n\tvalue: ENGLISH_WEEK,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'SHORT_ENGLISH_WEEK', {\r\n\tvalue: function () {\r\n\t\tvar ew = [];\r\n\t\tfor (let i = 0, len = ENGLISH_WEEK.length; i < len; i++) {\r\n\t\t\tew[i] = ENGLISH_WEEK[i].slice(0, 3);\r\n\t\t}\r\n\t\treturn ew;\r\n\t},\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'LONG_CHINESE_WEEK', {\r\n\tvalue: LONG_CHINESE_WEEK,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'SHORT_CHINESE_WEEK', {\r\n\tvalue: SHORT_CHINESE_WEEK,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'ENGLISH_MONTH', {\r\n\tvalue: ENGLISH_MONTH,\r\n\twritable: false\r\n});\r\nObject.defineProperty(exports, 'SHORT_ENGLISH_MONTH', {\r\n\tvalue: function () {\r\n\t\tvar em = [];\r\n\t\tfor (let i = 0, len = ENGLISH_MONTH.length; i < len; i++) {\r\n\t\t\tem[i] = ENGLISH_MONTH[i].slice(0, 3);\r\n\t\t}\r\n\t\treturn em;\r\n\t},\r\n\twritable: false\r\n});\n\n//# sourceURL=webpack:///./src/lib/Calendar.js?");

/***/ }),

/***/ "./src/lib/Formatter.js":
/*!******************************!*\
  !*** ./src/lib/Formatter.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function formatNumber(number) {\r\n\r\n\t// 目前只实现保留两位小数\r\n\tnumber = (number).toString().split(\".\");\r\n\r\n\tvar after = number[1];\r\n\tif (after && after.length > 2) {\r\n\t\tlet last = parseInt(after[2]);\r\n\t\tafter = parseInt(after.slice(0, 2));\r\n\t\tif (last > 4) {\r\n\t\t\tafter += 1;\r\n\t\t}\r\n\t}\r\n\tnumber = number[0] + \".\" + (after || 0);\r\n\r\n\treturn number;\r\n}\r\n\r\nconst DEFAULT_FORMAT_TYPE = \"#.00\";\r\n\r\nmodule.exports = exports = {\r\n\tformatNumber: formatNumber,\r\n\tformatFileSize: function (size, type) {\r\n\t\tvar formated;\r\n\t\ttype = type || DEFAULT_FORMAT_TYPE;\r\n\t\tif (size < 1048576) {\r\n\t\t\tformated = formatNumber(size / 1024, type) + \" KB\";\r\n\t\t} else if (size < 1073741824) {\r\n\t\t\tformated = formatNumber(size / 1048576, type) + \" MB\";\r\n\t\t} else if (size < 1099511627776) {\r\n\t\t\tformated = formatNumber(size / 1073741824, type) + \" GB\";\r\n\t\t} else {\r\n\t\t\tformated = formatNumber(size / 1099511627776, type) + \" TB\";\r\n\t\t}\r\n\t\treturn formated;\r\n\t},\r\n\tformatString:  __webpack_require__(/*! ./../base/common */ \"./src/base/common.js\").formatString\r\n};\r\n\n\n//# sourceURL=webpack:///./src/lib/Formatter.js?");

/***/ }),

/***/ "./src/lib/Random.js":
/*!***************************!*\
  !*** ./src/lib/Random.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const ALL_CASE = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst UPPER_CASE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst LOWER_CASE = \"abcdefghijklmnopqrstuvwxyz\";\r\nconst NUMBER = \"1234567890\";\r\nconst RAND_CODES = ALL_CASE + NUMBER;\r\n\r\nfunction getRand(type, length) {\r\n\r\n\tvar key = [],\r\n\t\ttimes = type.length;\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tkey[i] = type[parseInt(Math.random() * times)];\r\n\t}\r\n\r\n\treturn key.join(EMPTY_STRING);\r\n}\r\n\r\nmodule.exports = exports = {\r\n\tgetRandCode: function (length) {\r\n\t\treturn getRand(RAND_CODES, length);\r\n\t},\r\n\trandAllCase: function (length) {\r\n\t\treturn getRand(ALL_CASE, length);\r\n\t},\r\n\trandUpperCase: function (length) {\r\n\t\treturn getRand(UPPER_CASE, length);\r\n\t},\r\n\trandLowerCase: function (length) {\r\n\t\treturn getRand(LOWER_CASE, length);\r\n\t},\r\n\trandNumber: function (length) {\r\n\t\tlength = length || 16;\r\n\t\tif (length > 16) {\r\n\t\t\tthrow new Error(\"最多只能获取不超过 16 位的整数\");\r\n\t\t} else {\r\n\t\t\treturn parseInt(Math.random() * Math.pow(10, length));\r\n\t\t}\r\n\t},\r\n\trandNumberAndLetter: function (length) {\r\n\t\tvar key = [],\r\n\t\t\tcases, num;\r\n\t\tswitch (arguments[1]) {\r\n\t\t\tcase 0:\r\n\t\t\t\tcases = ALL_CASE + NUMBER;\r\n\t\t\t\tnum = 62;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tcases = UPPER_CASE + NUMBER;\r\n\t\t\t\tnum = 36;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tcases = LOWER_CASE + NUMBER;\r\n\t\t\t\tnum = 36;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tkey[i] = cases[parseInt(Math.random() * num)];\r\n\t\t}\r\n\t\treturn key;\r\n\t},\r\n\tALL_CASE: 0,\r\n\tUPPER_CASE: 1,\r\n\tLOWER_CASE: 2\r\n};\n\n//# sourceURL=webpack:///./src/lib/Random.js?");

/***/ }),

/***/ "./src/lib/ReplaceHolder.js":
/*!**********************************!*\
  !*** ./src/lib/ReplaceHolder.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const replaceElement = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\").replaceElement;\r\nconst { LOOP_REG_START, LOOP_REG_END, LOOP_IN_START, DEFAULT_SURFIX, LOOP_REG_START_L } = replaceElement;\r\n\r\nfunction replaceLoop(str, objs, callback) {\r\n\tvar result = [];\r\n\twhile (true) {\r\n\t\tlet index = str.indexOf(LOOP_REG_START);\r\n\t\tif (index > 0) {\r\n\t\t\tresult.push(str.slice(0, index));\r\n\t\t\tstr = str.slice(index);\r\n\t\t} else if (index < 0) {\r\n\t\t\tresult.push(str);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tlet firstEnd = str.indexOf(DEFAULT_SURFIX),\r\n\t\t\taction = str.slice(LOOP_REG_START_L, firstEnd);\r\n\t\tvar end = LOOP_REG_END + action + DEFAULT_SURFIX;\r\n\t\tlet inStr = str.slice(firstEnd + 1, str.indexOf(end));\r\n\t\tlet obj = objs,\r\n\t\t\ttmpAction = action.split(\".\");\r\n\t\tfor (let i = 0, len = tmpAction.length; i < len; i++) {\r\n\t\t\tif (!obj) break;\r\n\t\t\tobj = obj[tmpAction[i]];\r\n\t\t}\r\n\r\n\t\tif (obj !== null && obj !== undefined) {\r\n\t\t\tlet isArr = Array.isArray(obj);\r\n\t\t\tlet keys = isArr ? obj : Object.keys(obj);\r\n\t\t\tfor (let i = 0, len = keys.length; i < len; i++) {\r\n\t\t\t\tlet o = obj[isArr ? i : keys[i]];\r\n\t\t\t\tlet loopStr = inStr; // 定义循环所使用的变量\r\n\t\t\t\tloopStr = loopStr.replace(new RegExp(LOOP_IN_START + \"id}\", \"g\"), i);\r\n\t\t\t\tloopStr = loopStr.replace(new RegExp(LOOP_IN_START + \"key}\", \"g\"), keys[i]);\r\n\t\t\t\tif (String.TYPE_NAME === typeof o) {\r\n\t\t\t\t\tresult.push(loopStr.replace(new RegExp(LOOP_IN_START + \"text}\", \"g\"), keys[i]));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 递归查找子循环\r\n\t\t\t\t\tloopStr = replaceLoop(loopStr, o);\r\n\t\t\t\t\t// 替换内部元素\r\n\t\t\t\t\tloopStr = replaceElement(loopStr, o, LOOP_IN_START + action + \".\");\r\n\t\t\t\t\tloopStr = callback(loopStr, o, action + \".\");\r\n\t\t\t\t\tresult.push(loopStr);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstr = str.slice(str.indexOf(end) + end.length);\r\n\t}\r\n\r\n\treturn result.join(String.BLANK);\r\n}\r\n\r\nmodule.exports = exports = {\r\n\treplaceElement: replaceElement,\r\n\treplaceLoop: replaceLoop,\r\n\t/*\r\n\t * html 替换器\r\n\t */\r\n\thtmlEscape: function (str, aspect) {\r\n\r\n\t\tstr = str.replace(/\\&/g, \"&amp;\");\r\n\r\n\t\tvar first, second, third, forth;\r\n\t\tif (aspect) {\r\n\t\t\tfirst = aspect.first;\r\n\t\t\tsecond = aspect.second;\r\n\t\t\tthird = aspect.third;\r\n\t\t\tforth = aspect.forth;\r\n\t\t}\r\n\r\n\t\tstr = (!!first) ? first(str) : str;\r\n\r\n\t\tstr = str.replace(/  /ig, ' &nbsp;');\r\n\t\tstr = str.replace(/\\t/ig, '&nbsp;&nbsp;&nbsp;&nbsp;\\uFEFF'); // 制表符这么写主要是为了满足表现形式和制表符相同（不会换行）\r\n\r\n\t\tstr = (!!second) ? second(str) : str;\r\n\r\n\t\tstr = str.replace(/</ig, '&lt;');\r\n\t\tstr = str.replace(/>/ig, '&gt;');\r\n\r\n\t\tstr = (!!third) ? third(str) : str;\r\n\r\n\t\tstr = str.replace(/(\\r\\n|\\n|\\r)/ig, '<br />');\r\n\r\n\t\tstr = (!!forth) ? forth(str) : str;\r\n\r\n\t\treturn str;\r\n\t}\r\n};\n\n//# sourceURL=webpack:///./src/lib/ReplaceHolder.js?");

/***/ }),

/***/ "./src/lib/Validator.js":
/*!******************************!*\
  !*** ./src/lib/Validator.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const UPPER_CASE = /[A-Z]/,\r\n\tLOWER_CASE = /[a-z]/,\r\n\tNUMBER = /[0-9]/,\r\n\tMARKS = /[\\@#\\$\\%\\&\\*\\!\\^\\+\\=\\-_\\~:\\;\\,\\.\\?]/;\r\n\r\nfunction passwordCheckError(msg, id) {\r\n\tvar e = new Error(msg);\r\n\te.id = id || 'password';\r\n\r\n\tthrow e;\r\n}\r\n\r\nfunction isValidPassword(password) {\r\n\r\n\tif (String.isEmpty(password)) {\r\n\t\tpasswordCheckError('密码不能为空');\r\n\t}\r\n\r\n\t/*\r\n\t * 密码校验必须符合以下两项规则\r\n\t * 1. 长度必须 >= 6 位\r\n\t */\r\n\tif (password.length < 6) {\r\n\t\tpasswordCheckError('密码长度最少 6 位');\r\n\t}\r\n\r\n\t/*\r\n\t * 2. 必须包含大小写字母、数字、特殊字符（@#$%&*!^+=-_~:;,.?，不再左列中，以及不是字母、数字的字符被视为非法字符）中的三项\r\n\t *  大写字母 小写字母 数字 特殊字符\r\n\t *  0000 X 0\r\n\t *  0001 X 1\r\n\t *  0010 X 2\r\n\t *  0011 X 3\r\n\t *  0100 X 4\r\n\t *  0101 X 5\r\n\t *  0110 X 6\r\n\t *  0111 O 7\r\n\t *  1000 X 8\r\n\t *  1001 X 9\r\n\t *  1010 X 10\r\n\t *  1011 O 11\r\n\t *  1100 X 12\r\n\t *  1101 O 13\r\n\t *  1110 O 14\r\n\t *  1111 O 15\r\n\t */\r\n\tvar point = 0;\r\n\tif (UPPER_CASE.test(password)) {\r\n\t\tpoint += 8;\r\n\t}\r\n\tif (LOWER_CASE.test(password)) {\r\n\t\tpoint += 4;\r\n\t}\r\n\tif (NUMBER.test(password)) {\r\n\t\tpoint += 2;\r\n\t}\r\n\tif (MARKS.test(password)) {\r\n\t\tpoint += 1;\r\n\t}\r\n\tif (point < 13 && point !== 7 && point !== 11)\r\n\t\treturn passwordCheckError(\"密码至少要包含大写字母、小写字母、数字或特殊字符中的三项\");\r\n\r\n}\r\n\r\nmodule.exports = exports = {\r\n\tisValidPassword: isValidPassword,\r\n\t// 校验身份证号\r\n\t// 来源：https://segmentfault.com/a/1190000010452673\r\n\tisValidIdNumber: function (id) {\r\n\r\n\t\t// 1 \"验证通过!\", 0 //校验不通过\r\n\t\tvar format = /^(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5])|([7][1])|([8][1-2]))\\d{4}(([1][9]\\d{2})|([2]\\d{3}))(([0][1-9])|([1][0-2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))\\d{3}[0-9xX]$/;\r\n\t\t//号码规则校验\r\n\t\tif (!format.test(id)) return false;\r\n\r\n\t\t//区位码校验\r\n\t\t//出生年月日校验   前正则限制起始年份为1900;\r\n\t\tvar year = id.substr(6, 4),//身份证年\r\n\t\t\tmonth = id.substr(10, 2),//身份证月\r\n\t\t\tdate = id.substr(12, 2),//身份证日\r\n\t\t\ttime = Date.parse(month + '-' + date + '-' + year),//身份证日期时间戳date\r\n\t\t\tnowTime = Date.parse(new Date()),//当前时间戳\r\n\t\t\tdates = (new Date(year, month, 0)).getDate();//身份证当月天数\r\n\t\tif (time > nowTime || date > dates) return false;\r\n\r\n\t\t//校验码判断\r\n\t\tvar c = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);   //系数\r\n\t\tvar b = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');  //校验码对照表\r\n\t\tvar id_array = id.split(String.BLANK);\r\n\t\tvar sum = 0;\r\n\t\tfor (var k = 0; k < 17; k++) {\r\n\t\t\tsum += parseInt(id_array[k]) * parseInt(c[k]);\r\n\t\t}\r\n\r\n\t\treturn id_array[17].toUpperCase() === b[sum % 11].toUpperCase();\r\n\t},\r\n\tisValidMPhone: function (mphone) {\r\n\t\treturn /^[1](([3][0-9])|([4][5-9])|([5][0-3,5-9])|([6][5,6])|([7][0-8])|([8][0-9])|([9][1,8,9]))[0-9]{8}$/.test(mphone);\r\n\t}\r\n};\n\n//# sourceURL=webpack:///./src/lib/Validator.js?");

/***/ }),

/***/ "./src/lib/constants.js":
/*!******************************!*\
  !*** ./src/lib/constants.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\r\n * 定义所有的常量\r\n */\r\n\r\nmodule.exports = exports = {\r\n\tXmlEntity: {\r\n\t\tLEFT_ANGLE: '&lt;', // <\r\n\t\tRIGHT_ANGLE: '&gt;',  // >\r\n\t\tAMP: '&amp;', // &\r\n\t\tQUOT: \"&quot;\", // \"\r\n\t\tAPOS: \"&apos;\", // '\r\n\t\tSHARP: '&#35;', // #\r\n\t\tSPACE: '&nbsp;'\r\n\t},\r\n\tCharCode: {\r\n\t\tZERO_WIDTH: \"\\uFEFF\",\r\n\t\tZERO: 0x0030,\r\n\t\tNINE: 0x0039,\r\n\t\t// 大写字母字母的 ASCII 编号\r\n\t\tUPPER_A: 0x0041,\r\n\t\tUPPER_Z: 0x005A,\r\n\t\tUPPER_F: 0x0046,\r\n\t\t// 小写字母字母的 ASCII 编号\r\n\t\tLOWER_A: 0x0061,\r\n\t\tLOWER_Z: 0x007A,\r\n\t\tLOWER_F: 0x0066,\r\n\t\t// 特殊符号的 ASCII 编号\r\n\t\tUNDERBAR: 0x005F, // _\r\n\t\tDOLLAR: 0x0024, // $\r\n\t},\r\n\tMark: {\r\n\t\tSPACE_REGX: /\\s/, // 标准空白\r\n\t\tDQUOTE: '\"',\r\n\t\tQUOTE: \"'\",\r\n\t\tGRAVE_ACCENT: '`',\r\n\t\tSLASH: '/',\r\n\t\tASTERISK: '*',\r\n\t\tNEW_LINE: '\\n',\r\n\t\tAT: '@',\r\n\t\tAND: '&',\r\n\t\tTAB: '\\t',\r\n\t\tSHARP: '#',\r\n\t\tCOMMA: \",\",\r\n\t\tSEMICOLON: ';',\r\n\t\tCOLON: ':',\r\n\t\tLEFT_BRACKET: '{',\r\n\t\tRIGHT_BRACKET: '}',\r\n\t\tLEFT_SQUARE_BRACKET: '[',\r\n\t\tRIGHT_SQUARE_BRACKET: ']',\r\n\t\tLEFT_PARENTHE: '(',\r\n\t\tRIGHT_PARENTHE: ')',\r\n\t\tPOINT: '.',\r\n\t\tHYPHEN: \"-\",\r\n\t\tEQUALS: '=',\r\n\t\tTILDE: '~',\r\n\t\tEXCALMATORY: '!',\r\n\t\tLEFT_ANGLE: '<',\r\n\t\tRIGHT_ANGLE: '>'\r\n\t},\r\n\tMimeType: {\r\n\t\t// application\r\n\t\tJSON: 'application/json',\r\n\t\tPDF: 'application/pdf',\r\n\t\tJAVASCRIPT: 'application/javascript',\r\n\t\tOCTET_STREAM: 'application/octet-stream',\r\n\t\tDTD: 'application/xml-dtd',\r\n\t\tZIP: 'application/zip',\r\n\t\t// text\r\n\t\tTEXT: 'text/plain',\r\n\t\tHTML: 'text/html',\r\n\t\tXML: 'text/xml',\r\n\t\tCSS: 'text/css',\r\n\t\tCSV: 'text/csv',\r\n\t\t// image\r\n\t\tGIF: 'image/gif',\r\n\t\tPNG: 'image/png',\r\n\t\tJPG: 'image/jpeg',\r\n\t\tBMP: 'image/bmp',\r\n\t\tWEBP: 'image/webp',\r\n\t\tICON: 'image/x-icon',\r\n\t\tSVG: 'image/svg+xml'\r\n\t},\r\n\tHttpRequestMethod: {\r\n\t\tGET: 'GET',\r\n\t\tPUT: 'PUT',\r\n\t\tPOST: 'POST',\r\n\t\tDELETE: 'DELETE',\r\n\t\tCONNECT: 'CONNECT',\r\n\t\tHEAD: 'HEAD',\r\n\t\tOPTIONS: 'OPTIONS',\r\n\t\tTRACE: 'TRACE',\r\n\t\tPATCH: 'PATCH'\r\n\t},\r\n\tHttpStatusCode: {\r\n\t\t\"CONTINUE\": 100,\r\n\t\t\"SWITCHING_PROTOCOLS\": 101,\r\n\t\t\"PROCESSING\": 102,\r\n\t\t\"OK\": 200,\r\n\t\t\"CREATED\": 201,\r\n\t\t\"ACCEPTED\": 202,\r\n\t\t\"NON_AUTHORITATIVE_INFORMATION\": 203,\r\n\t\t\"NO_CONTENT\": 204,\r\n\t\t\"RESET_CONTENT\": 205,\r\n\t\t\"PARTIAL_CONTENT\": 206,\r\n\t\t\"MULTI_STATUS\": 207,\r\n\t\t\"ALREADY_REPORTED\": 208,\r\n\t\t\"IM_USED\": 226,\r\n\t\t\"MULTIPLE_CHOICES\": 300,\r\n\t\t\"MOVED_PERMANENTLY\": 301,\r\n\t\t\"FOUND\": 302,\r\n\t\t\"SEE_OTHER\": 303,\r\n\t\t\"NOT_MODIFIED\": 304,\r\n\t\t\"USE_PROXY\": 305,\r\n\t\t\"TEMPORARY_REDIRECT\": 307,\r\n\t\t\"PERMANENT_REDIRECT\": 308,\r\n\t\t\"BAD_REQUEST\": 400,\r\n\t\t\"UNAUTHORIZED\": 401,\r\n\t\t\"PAYMENT_REQUIRED\": 402,\r\n\t\t\"FORBIDDEN\": 403,\r\n\t\t\"NOT_FOUND\": 404,\r\n\t\t\"METHOD_NOT_ALLOWED\": 405,\r\n\t\t\"NOT_ACCEPTABLE\": 406,\r\n\t\t\"PROXY_AUTHENTICATION_REQUIRED\": 407,\r\n\t\t\"REQUEST_TIMEOUT\": 408,\r\n\t\t\"CONFLICT\": 409,\r\n\t\t\"GONE\": 410,\r\n\t\t\"LENGTH_REQUIRED\": 411,\r\n\t\t\"PRECONDITION_FAILED\": 412,\r\n\t\t\"PAYLOAD_TOO_LARGE\": 413,\r\n\t\t\"URI_TOO_LONG\": 414,\r\n\t\t\"UNSUPPORTED_MEDIA_TYPE\": 415,\r\n\t\t\"RANGE_NOT_SATISFIABLE\": 416,\r\n\t\t\"EXPECTATION_FAILED\": 417,\r\n\t\t\"I_AM_A_TEAPOT\": 418,\r\n\t\t\"MISDIRECTED_REQUEST\": 421,\r\n\t\t\"UNPROCESSABLE_ENTITY\": 422,\r\n\t\t\"LOCKED\": 423,\r\n\t\t\"FAILED_DEPENDENCY\": 424,\r\n\t\t\"UNORDERED_COLLECTION\": 425,\r\n\t\t\"UPGRADE_REQUIRED\": 426,\r\n\t\t\"PRECONDITION_REQUIRED\": 428,\r\n\t\t\"TOO_MANY_REQUESTS\": 429,\r\n\t\t\"REQUEST_HEADER_FIELDS_TOO_LARGE\": 431,\r\n\t\t\"UNAVAILABLE_FOR_LEGAL_REASONS\": 451,\r\n\t\t\"INTERNAL_SERVER_ERROR\": 500,\r\n\t\t\"NOT_IMPLEMENTED\": 501,\r\n\t\t\"BAD_GATEWAY\": 502,\r\n\t\t\"SERVICE_UNAVAILABLE\": 503,\r\n\t\t\"GATEWAY_TIMEOUT\": 504,\r\n\t\t\"HTTP_VERSION_NOT_SUPPORTED\": 505,\r\n\t\t\"VARIANT_ALSO_NEGOTIATES\": 506,\r\n\t\t\"INSUFFICIENT_STORAGE\": 507,\r\n\t\t\"LOOP_DETECTED\": 508,\r\n\t\t\"BANDWIDTH_LIMIT_EXCEEDED\": 509,\r\n\t\t\"NOT_EXTENDED\": 510,\r\n\t\t\"NETWORK_AUTHENTICATION_REQUIRED\": 511\r\n\t},\r\n\tNumberNonation: {\r\n\t\tHEX: 16,\r\n\t\tDEC: 10,\r\n\t\tOCT: 8,\r\n\t\tBIN: 2\r\n\t},\r\n\tHtmlTagAttribute: {\r\n\t\tinput: {\r\n\t\t\tBUTTON: \"button\",\r\n\t\t\tCHECKBOX: \"checkbox\",\r\n\t\t\tCOLOR: \"color\",\r\n\t\t\tDATE: \"date\",\r\n\t\t\tDATETIME_LOCAL: \"datetime-local\",\r\n\t\t\tEMAIL: \"email\",\r\n\t\t\tFILE: \"file\",\r\n\t\t\tHIDDEN: \"hidden\",\r\n\t\t\tIMAGE: \"image\",\r\n\t\t\tMONTH: \"month\",\r\n\t\t\tNUMBER: Number.TYPE_NAME,\r\n\t\t\tPASSWORD: \"password\",\r\n\t\t\tRADIO: \"radio\",\r\n\t\t\tRANGE: \"range\",\r\n\t\t\tRESET: \"reset\",\r\n\t\t\tSEARCH: \"search\",\r\n\t\t\tSUBMIT: \"submit\",\r\n\t\t\tTEL: \"tel\",\r\n\t\t\tTEXT: \"text\",\r\n\t\t\tTIME: \"time\",\r\n\t\t\tURL: \"url\",\r\n\t\t\tWEEK: \"week\",\r\n\t\t}\r\n\t},\r\n\tHtmlTag: {\r\n\t\tA: \"a\",\r\n\t\tABBR: \"abbr\",\r\n\t\tACRONYM: \"acronym\",\r\n\t\tADDRESS: \"address\",\r\n\t\tAPPLET: \"applet\",\r\n\t\tAREA: \"area\",\r\n\t\tARTICLE: \"article\",\r\n\t\tASIDE: \"aside\",\r\n\t\tAUDIO: \"audio\",\r\n\t\tB: \"b\",\r\n\t\tBASE: \"base\",\r\n\t\tBASEFONT: \"basefont\",\r\n\t\tBDI: \"bdi\",\r\n\t\tBDO: \"bdo\",\r\n\t\tBIG: \"big\",\r\n\t\tBLOCKQUOTE: \"blockquote\",\r\n\t\tBODY: \"body\",\r\n\t\tBR: \"br\",\r\n\t\tBUTTON: \"button\",\r\n\t\tCANVAS: \"canvas\",\r\n\t\tCAPTION: \"caption\",\r\n\t\tCENTER: \"center\",\r\n\t\tCITE: \"cite\",\r\n\t\tCODE: \"code\",\r\n\t\tCOL: \"col\",\r\n\t\tCOLGROUP: \"colgroup\",\r\n\t\tCOMMAND: \"command\",\r\n\t\tDATALIST: \"datalist\",\r\n\t\tDD: \"dd\",\r\n\t\tDEL: \"del\",\r\n\t\tDETAILS: \"details\",\r\n\t\tDFN: \"dfn\",\r\n\t\tDIALOG: \"dialog\",\r\n\t\tDIR: \"dir\",\r\n\t\tDIV: \"div\",\r\n\t\tDL: \"dl\",\r\n\t\tDT: \"dt\",\r\n\t\tEM: \"em\",\r\n\t\tEMBED: \"embed\",\r\n\t\tFIELDSET: \"fieldset\",\r\n\t\tFIGCAPTION: \"figcaption\",\r\n\t\tFIGURE: \"figure\",\r\n\t\tFONT: \"font\",\r\n\t\tFOOTER: \"footer\",\r\n\t\tFORM: \"form\",\r\n\t\tFRAME: \"frame\",\r\n\t\tFRAMESET: \"frameset\",\r\n\t\tH1: \"h1\",\r\n\t\tH2: \"h2\",\r\n\t\tH3: \"h3\",\r\n\t\tH4: \"h4\",\r\n\t\tH5: \"h5\",\r\n\t\tH6: \"h6\",\r\n\t\tHEAD: \"head\",\r\n\t\tHEADER: \"header\",\r\n\t\tHR: \"hr\",\r\n\t\tHTML: \"html\",\r\n\t\tI: \"i\",\r\n\t\tIFRAME: \"iframe\",\r\n\t\tIMG: \"img\",\r\n\t\tINPUT: \"input\",\r\n\t\tINS: \"ins\",\r\n\t\tKBD: \"kbd\",\r\n\t\tKEYGEN: \"keygen\",\r\n\t\tLABEL: \"label\",\r\n\t\tLEGEND: \"legend\",\r\n\t\tLI: \"li\",\r\n\t\tLINK: \"link\",\r\n\t\tMAP: \"map\",\r\n\t\tMARK: \"mark\",\r\n\t\tMENU: \"menu\",\r\n\t\tMETA: \"meta\",\r\n\t\tMETER: \"meter\",\r\n\t\tNAV: \"nav\",\r\n\t\tNOFRAMES: \"noframes\",\r\n\t\tNOSCRIPT: \"noscript\",\r\n\t\tOBJECT: Object.TYPE_NAME,\r\n\t\tOL: \"ol\",\r\n\t\tOPTGROUP: \"optgroup\",\r\n\t\tOPTION: \"option\",\r\n\t\tOUTPUT: \"output\",\r\n\t\tP: \"p\",\r\n\t\tPARAM: \"param\",\r\n\t\tPRE: \"pre\",\r\n\t\tPROGRESS: \"progress\",\r\n\t\tQ: \"q\",\r\n\t\tRP: \"rp\",\r\n\t\tRT: \"rt\",\r\n\t\tRUBY: \"ruby\",\r\n\t\tS: \"s\",\r\n\t\tSAMP: \"samp\",\r\n\t\tSCRIPT: \"script\",\r\n\t\tSECTION: \"section\",\r\n\t\tSELECT: \"select\",\r\n\t\tSMALL: \"small\",\r\n\t\tSOURCE: \"source\",\r\n\t\tSPAN: \"span\",\r\n\t\tSTRIKE: \"strike\",\r\n\t\tSTRONG: \"strong\",\r\n\t\tSTYLE: \"style\",\r\n\t\tSUB: \"sub\",\r\n\t\tSUMMARY: \"summary\",\r\n\t\tSUP: \"sup\",\r\n\t\tTABLE: \"table\",\r\n\t\tTBODY: \"tbody\",\r\n\t\tTD: \"td\",\r\n\t\tTEXTAREA: \"textarea\",\r\n\t\tTFOOT: \"tfoot\",\r\n\t\tTH: \"th\",\r\n\t\tTHEAD: \"thead\",\r\n\t\tTIME: \"time\",\r\n\t\tTITLE: \"title\",\r\n\t\tTR: \"tr\",\r\n\t\tTRACK: \"track\",\r\n\t\tTT: \"tt\",\r\n\t\tU: \"u\",\r\n\t\tUL: \"ul\",\r\n\t\tVAR: \"var\",\r\n\t\tVIDEO: \"video\",\r\n\t\tWBR: \"wbr\"\r\n\t}\r\n};\n\n//# sourceURL=webpack:///./src/lib/constants.js?");

/***/ }),

/***/ "./src/lib/dom.js":
/*!************************!*\
  !*** ./src/lib/dom.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { browserOnly, hasOwnProperty } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\r\nconst { unsupportedType, indexOutOfBounds, errorCast } = Error;\r\nconst EMPTY_STRING = String.BLANK;\r\n\r\n// 标签\r\nconst START_START_TAG = '<',\r\n\tSTART_END_TAG = '</',\r\n\tEND_TAG = '>',\r\n\tENMPTY_END_TAG = ' />';\r\n\r\n// 包括 img 在内没有回标签的标签集合\r\nconst NO_BODY_TAG = ['img', 'input', 'br', 'hr', 'title'];\r\n\r\n// 不能再在标签内部添加同名标签\r\nconst NOT_SAME_TAG = [\r\n\t// HTML 体标签\r\n\t'html', 'head', 'title', 'body',\r\n\t// 其他标签\r\n\t'a', 'i', 'b', 'del', 'u', 'strike'\r\n];\r\n\r\nconst ABEND_TAG = ['script'];\r\n\r\nconst KEY_NAME = new Map();\r\nKEY_NAME.set('class', 'className');\r\n\r\nfunction getKeyName(key) {\r\n\treturn KEY_NAME.has(key) ? KEY_NAME.get(key) : key;\r\n}\r\n\r\nfunction XmlWrapper(tag, attribute, xmlType) {\r\n\r\n\tlet _hashcode = '$=!' + (2388 / Math.random() + Math.sin(Date.now()));\r\n\r\n\tif (!tag || !typeIs(tag, String.TYPE_NAME)) throw new Error(\"只有非空文本能作为标签\");\r\n\tif (Array.has(ABEND_TAG, tag)) throw new Error(\"不允许使用 XmlWrapper 来动态构建 \" + tag + \" 元素\");\r\n\r\n\tlet attrs;\r\n\tif (attribute instanceof Map) {\r\n\t\tattrs = attribute;\r\n\t} else {\r\n\t\tattrs = new Map();\r\n\t\tif (attribute) {\r\n\t\t\tObject.forEach(attribute, function (key, value) {\r\n\t\t\t\tattrs.set(key, value);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tvar tIndex = 0,\r\n\t\tnIndex = 0, // 这两个数字不对外公开使用\r\n\t\tchildren = [],\r\n\t\tparent = null;\r\n\r\n\tthis.add = function (element, parse) {\r\n\r\n\t\tif (!tag) {\r\n\t\t\tchildren.push({\r\n\t\t\t\tindex: tIndex++,\r\n\t\t\t\ttype: String,\r\n\t\t\t\tparse: (parse === undefined) ? true : parse\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (Array.has(NO_BODY_TAG, tag)) throw new Error(\"不能向当前标签（\" + tag + \"）内无法添加元素\");\r\n\r\n\t\tif (element instanceof XmlWrapper) {\r\n\t\t\tif (Array.has(NOT_SAME_TAG, tag) && tag === element.getTag()) throw new Error(\"当前 XML 节点的标签（\" + tag + \"）中不被允许储存同名子节点\");\r\n\r\n\t\t\tchildren.push({\r\n\t\t\t\tindex: nIndex++,\r\n\t\t\t\ttype: XmlWrapper,\r\n\t\t\t\telement: element\r\n\t\t\t});\r\n\t\t\telement.setParent(this);\r\n\t\t} else if (typeIs(element, String.TYPE_NAME)) {\r\n\r\n\t\t\tchildren.push({\r\n\t\t\t\tindex: tIndex++,\r\n\t\t\t\ttype: String,\r\n\t\t\t\telement: element,\r\n\t\t\t\tparse: (parse === undefined) ? true : parse\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tunsupportedType(element);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\tthis.clearChildren();\r\n\t\tattrs.clear();\r\n\t\tparent = null;\r\n\t};\r\n\r\n\tthis.clearChildren = function () {\r\n\t\tnIndex = 0;\r\n\t\ttIndex = 0;\r\n\t\tchildren = [];\r\n\t};\r\n\r\n\tthis.nodeCount = function (tagName) {\r\n\t\tif (!tagName) return nIndex;\r\n\r\n\t\tvar count = 0;\r\n\t\tObject.forEach(children, function (i, element) {\r\n\t\t\tif (element.type === XmlWrapper &&\r\n\t\t\t\telement.element.getTag() === tagName) {\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn count;\r\n\t};\r\n\r\n\tthis.isEmpty = function () {\r\n\t\treturn Object.isEmpty(children);\r\n\t};\r\n\r\n\t/*\r\n\t * xml = true html = false\r\n\t */\r\n\tthis.setXmlType = function (type) {\r\n\t\txmlType = type;\r\n\t};\r\n\tthis.setParent = function (p) {\r\n\t\tparent = p;\r\n\t};\r\n\tthis.getParent = function () {\r\n\t\treturn parent;\r\n\t};\r\n\r\n\tthis.isRoot = function () {\r\n\t\treturn parent == null;\r\n\t};\r\n\r\n\tthis.getElement = function (index) {\r\n\t\treturn children[index];\r\n\t};\r\n\r\n\tthis.getText = function (index) {\r\n\t\tif (isNumber(index)) {\r\n\t\t\tif (index < tIndex) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tif (String === element.type && element.index === index) {\r\n\t\t\t\t\t\treturn element.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindexOutOfBounds(tIndex, index);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\terrorCast(index, Number);\r\n\t\t}\r\n\t};\r\n\r\n\tthis.getTexts = function () {\r\n\t\tvar results = [];\r\n\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\tlet element = children[i];\r\n\t\t\tif (String === element.type) {\r\n\t\t\t\tresults.push(element.element);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\r\n\tthis.hashCode = function () {\r\n\t\treturn _hashcode;\r\n\t};\r\n\r\n\tthis.getNode = function (index, tagName) {\r\n\t\tif (tagName) {\r\n\t\t\tif (index < nIndex) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tlet node = element.element;\r\n\t\t\t\t\tif (element.type === XmlWrapper && index === element.index && node.getTag() === tagName) {\r\n\t\t\t\t\t\treturn node;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindexOutOfBounds(nIndex, index);\r\n\t\t\t}\r\n\t\t} else if (Number.isNumber(index)) {\r\n\t\t\tif (index < nIndex) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tif (element.type === XmlWrapper && index === element.index) {\r\n\t\t\t\t\t\treturn element.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindexOutOfBounds(nIndex, index);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\terrorCast(index, Number);\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tthis.lastNode = function (tagName) {\r\n\t\tif (tagName) {\r\n\t\t\tif (typeIs(tagName, String.TYPE_NAME)) {\r\n\t\t\t\tfor (let i = children.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tlet node = element.element;\r\n\t\t\t\t\tif (element.type === XmlWrapper && node.getTag() === tagName) {\r\n\t\t\t\t\t\treturn node;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\terrorCast(tagName, String);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = children.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet element = children[i];\r\n\t\t\t\tif (element.type === XmlWrapper) {\r\n\t\t\t\t\treturn element.element;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\tthis.getNodes = function (tagName) {\r\n\r\n\t\tlet results = [];\r\n\r\n\t\tif (tagName) {\r\n\t\t\tif (typeIs(tagName, String.TYPE_NAME)) {\r\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\t\tlet element = children[i];\r\n\t\t\t\t\tlet node = element.element;\r\n\t\t\t\t\tif (element.type === XmlWrapper && node.getTag() === tagName) {\r\n\t\t\t\t\t\tresults.push(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\terrorCast(tagName, String);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\t\t\t\tlet element = children[i];\r\n\t\t\t\tif (element.type === XmlWrapper) {\r\n\t\t\t\t\tresults.push(element.element);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\r\n\tthis.size = function () {\r\n\t\treturn children.length;\r\n\t};\r\n\r\n\tthis.update = function (index, element) {\r\n\r\n\t\tif (!Number.isNumber(index)) errorCast(index, Number);\r\n\r\n\t\tvar type = typeof element;\r\n\t\tif ((String.TYPE_NAME !== type) && !(element instanceof XmlWrapper)) unsupportedType(element);\r\n\r\n\t\tvar len = children.length;\r\n\t\tif (index >= len) indexOutOfBounds(index, len);\r\n\r\n\t\tvar old = children[index];\r\n\r\n\t\tif (type === typeof old.element) {\r\n\t\t\told.element = element;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\told.element = element;\r\n\r\n\t\tvar isFirst = true;\r\n\t\tfor (index += 1; index < len; index++) {\r\n\t\t\tlet tmp = children[index];\r\n\t\t\tif (type === typeof tmp.element) {\r\n\t\t\t\tif (isFirst) {\r\n\t\t\t\t\told.index = tmp.index;\r\n\t\t\t\t\tisFirst = false;\r\n\t\t\t\t}\r\n\t\t\t\ttmp.index++;\r\n\t\t\t} else {\r\n\t\t\t\ttmp.index--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (String.TYPE_NAME === type) {\r\n\t\t\tnIndex++;\r\n\t\t\ttIndex--;\r\n\t\t} else {\r\n\t\t\ttIndex++;\r\n\t\t\tnIndex--;\r\n\t\t}\r\n\t};\r\n\r\n\tthis.compare = function (another) {\r\n\t\tif (this === another) return true;\r\n\t\tif (!(another instanceof Map)) return false;\r\n\t\tif (tag !== another.getTag()) return false;\r\n\r\n\t\tfor (let [key, val] of attrs.entries()) {\r\n\t\t\tvar aVal = another.get(key);\r\n\t\t\tif (typeof val !== typeof aVal) return false;\r\n\t\t\tif (val !== aVal && // 字符串形式的文本节点或引用同一片内存空间\r\n\t\t\t\t!val.compare(aVal)) // 元素节点\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tthis.on = function (name, func) {\r\n\t\tbrowserOnly();\r\n\t}\r\n\r\n\t/*\r\n\t * 将保存的对象渲染为一个dom结构\r\n\t * 不同于 toString 转变为字符串，这个输出的 dom 结构是可以修改的，并且可以直接插入到 HTML 之中\r\n\t */\r\n\tthis.render = function () {\r\n\r\n\t\tbrowserOnly();\r\n\r\n\t\tlet element = document.createElement(tag);\r\n\r\n\t\tattrs.forEach(function (val, key) {\r\n\t\t\telement[getKeyName(key)] = val;\r\n\t\t});\r\n\r\n\t\tObject.forEach(children, function (i, node) {\r\n\t\t\tswitch (node.type) {\r\n\t\t\t\tcase String:\r\n\t\t\t\t\tif (node.parse) {\r\n\t\t\t\t\t\telement.appendChild(document.createTextNode(node.element));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.innerHTML = node.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase XmlWrapper:\r\n\t\t\t\t\telement.appendChild(node.element.render());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tunsupportedType(node.type);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn element;\r\n\t}\r\n\r\n\tthis.remove = function (index, count, type, tag) {\r\n\r\n\t\tvar len = children.length;\r\n\t\tif (index < 0 || index >= len) indexOutOfBounds(index, 0);\r\n\r\n\t\tvar last = index + count;\r\n\t\tif (len <= last) indexOutOfBounds(last, len);\r\n\r\n\t\tvar removed = [];\r\n\t\tvar nRemoved = 0,\r\n\t\t\ttRevmoed = 0;\r\n\r\n\t\tfor (let i = index; i < last; i++) {\r\n\r\n\t\t\tlet element = children[i];\r\n\t\t\tswitch (element.type) {\r\n\t\t\t\tcase String:\r\n\t\t\t\t\tif (type === String.TYPE_NAME) {\r\n\t\t\t\t\t\ttRemoved++;\r\n\t\t\t\t\t\tremoved.push(element.element);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase XmlWrapper:\r\n\t\t\t\t\tif (type === 'node') {\r\n\t\t\t\t\t\tif (!!tag && element.element.getTag() === tag) {\r\n\t\t\t\t\t\t\tremoved.push(element.element);\r\n\t\t\t\t\t\t\tnRemoved++;\r\n\t\t\t\t\t\t} else if (!tag) {\r\n\t\t\t\t\t\t\tremoved.push(element.element);\r\n\t\t\t\t\t\t\tnRemoved++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tunsupportedType(element.type);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\ttIndex -= tRevmoed;\r\n\t\tnIndex -= nRevmoed;\r\n\r\n\t\tfor (let i = last; i < len; i++) {\r\n\t\t\tlet element = children[i];\r\n\t\t\tswitch (element.type) {\r\n\t\t\t\tcase String:\r\n\t\t\t\t\telement.index -= tRevmoed;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase XmlWrapper:\r\n\t\t\t\t\telement.index -= nRevmoed;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tunsupportedType(element.type);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn removed;\r\n\t};\r\n\tthis.putAttribute = function (key, val) {\r\n\t\tattrs.set(key, val);\r\n\t};\r\n\tthis.putAllAttributes = function (obj) {\r\n\t\tObject.forEach(obj, function (key, val) {\r\n\t\t\tattrs.set(key, val);\r\n\t\t})\r\n\t};\r\n\tthis.removeAttribute = function (key) {\r\n\t\treturn attrs['delete'](key);\r\n\t};\r\n\tthis.getAttribute = function (key) {\r\n\t\treturn attrs.get(key);\r\n\t};\r\n\tthis.containsAttribute = function (key) {\r\n\t\treturn attrs.has(key);\r\n\t};\r\n\r\n\tthis.getTag = function () {\r\n\t\treturn tag;\r\n\t};\r\n\tthis.toString = this.toHTML = function () {\r\n\r\n\t\tvar xml = [START_START_TAG, tag];\r\n\t\tattrs.forEach(function (val, key) {\r\n\t\t\txml.push(' ' + key + '=\"' + attrs.get(key) + '\"');\r\n\t\t});\r\n\r\n\t\tvar len = children.length;\r\n\t\tif (len === 0) {\r\n\t\t\tif (xmlType) {\r\n\t\t\t\txml.push(ENMPTY_END_TAG);\r\n\t\t\t} else {\r\n\t\t\t\tif (Array.has(NO_BODY_TAG, tag)) {\r\n\t\t\t\t\txml.push(ENMPTY_END_TAG);\r\n\t\t\t\t} else {\r\n\t\t\t\t\txml.push(END_TAG + START_END_TAG + tag + END_TAG);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\txml.push(END_TAG);\r\n\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\txml.push(children[i].element.toString());\r\n\t\t\t}\r\n\t\t\txml.push(START_END_TAG + tag + END_TAG);\r\n\t\t}\r\n\t\treturn xml.join(EMPTY_STRING);\r\n\t};\r\n}\r\n\r\n/**\r\n * 通过制定格式的 JSON 对象创建一个 HTML 格式的 JSON：\r\n * [{ tag : 'div', attribute : {\r\n * 'class' : 'class_name' }, child : [ 'text', { tag : 'div', child : [\r\n * 'div_text', { tag : 'input', attribute : { type : 'text' } } ] } ] }, {\r\n * tag : 'p', attribute : { id : 'idname' }, child : [ { tag :\r\n * 'span', child : [ 'spantext' ] } ] } ]\r\n * \r\n * 说明： tag : 制定要创建的 HTML 节点的 tag attribute : HTML 节点的属性 child\r\n * ：HTML节点的子元素（文本与子节点均通过 child 来表示）\r\n */\r\nfunction jsonToHTML(json) {\r\n\tif (!Array.isArray(json)) {\r\n\t\tunsupportedType(json);\r\n\t}\r\n\tvar result = [];\r\n\tfor (let i = 0, len = json.length; i < len; i++) {\r\n\t\tlet obj = json[i];\r\n\t\tif (!typeIs(obj, Object.TYPE_NAME)) {\r\n\t\t\tresult.push((obj).toString());\r\n\t\t} else {\r\n\t\t\tlet xml = new XmlWrapper(obj.tag, obj.attribute);\r\n\t\t\tlet child = obj.child;\r\n\t\t\tif (child) {\r\n\t\t\t\tif (typeIs(child, String.TYPE_NAME)) {\r\n\t\t\t\t\txml.add(child);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar children = jsonToHTML(child);\r\n\t\t\t\t\tfor (let j = 0, cLen = children.length; j < cLen; j++) {\r\n\t\t\t\t\t\txml.add(children[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult.push(xml);\r\n\t\t}\r\n\t}\r\n\treturn result.join(String.BLANK);\r\n}\r\n\r\n// String -> XmlWrapper\r\nfunction parse(input) {\r\n\r\n}\r\n\r\n/**\r\n * 将任意格式的 JSON 对象转换为一个 XML 字符串（不是 HTML）\r\n */\r\nfunction jsonToXml(json, rootTag) {\r\n\r\n\tif (!typeIs(json, Object.TYPE_NAME, Array.TYPE_NAME, String.TYPE_NAME, Number.TYPE_NAME)) unsupportedType(json);\r\n\r\n\tvar root = new XmlWrapper(rootTag || 'root');\r\n\troot.setXmlType(true);\r\n\tif (typeOf(json, String.TYPE_NAME)) {\r\n\t\troot.add(json);\r\n\t} else {\r\n\t\tfor (let name in json) {\r\n\t\t\tif (hasOwnProperty(json, item)) {\r\n\t\t\t\tlet item = json[name];\r\n\t\t\t\troot.add(jsonToXml(item, name));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn root;\r\n}\r\n\r\nmodule.exports = exports = {\r\n\tnewXmlWrapper: function (t, a, x) {\r\n\t\treturn new XmlWrapper(t, a, x);\r\n\t},\r\n\tisXmlWrapper: function (obj) {\r\n\t\treturn obj instanceof XmlWrapper;\r\n\t},\r\n\tjsonToHTML: jsonToHTML,\r\n\tjsonToXml: jsonToXml,\r\n\t/*\r\n\t * 目前尚未实现该功能\r\n\t */\r\n\t// parse : parse,\r\n\t// xmlToJSON : xmlToJSON\r\n\tXML: false,\r\n\tHTML: true\r\n};\n\n//# sourceURL=webpack:///./src/lib/dom.js?");

/***/ }),

/***/ "./src/lib/logger.js":
/*!***************************!*\
  !*** ./src/lib/logger.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\r\n * Coralian.logger 只实现最基本的日志记录功能，\r\n * 以及对日志进行最基本的格式化功能\r\n */\r\nconst Calendar = __webpack_require__(/*! ./Calendar */ \"./src/lib/Calendar.js\");\r\nconst formatString = __webpack_require__(/*! ./../base/common */ \"./src/base/common.js\").formatString;\r\n\r\nconst INFO = 'INFO',\r\n\tERROR = 'ERROR',\r\n\tWARN = 'WARN';\r\n\r\nconst STRING_FORMAT = \"[${date}] ${level} ${message}\";\r\nconst TIME_FORMAT = \"YYYY-MM-DD hh:mm:ss.ms\";\r\n\r\nfunction format(level, message) {\r\n\treturn formatString(STRING_FORMAT, {\r\n\t\tdate: Calendar.formatTime(new Date(), TIME_FORMAT),\r\n\t\tlevel: level,\r\n\t\tmessage: message\r\n\t});\r\n}\r\n\r\nexports.log = exports.ingo = (str) => {\r\n\tconsole.log(format(INFO, str));\r\n};\r\nexports.err = (err) => {\r\n\tconsole.error(err.message)\r\n\tconsole.error(format(ERROR, err.stack));\r\n};\r\nexports.warn = (str) => {\r\n\tconsole.warn(format(WARN, str));\r\n};\n\n//# sourceURL=webpack:///./src/lib/logger.js?");

/***/ }),

/***/ "./src/lib/util.js":
/*!*************************!*\
  !*** ./src/lib/util.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { hasOwnProperty, Interface, Iterator, objectClone, getType } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\r\nconst { unsupportedOperation, unsupportedType, errorCast, illegalArguments } = Error;\r\n\r\nmodule.exports = exports = {\r\n\tInterface: Interface,\r\n\tIterator: Iterator,\r\n\tMathUtil: {\r\n\t\t/*\r\n\t\t * 代码来自：https://tool.lu/hexconvert/\r\n\t\t * 有修改。\r\n\t\t *\r\n\t\t * 进制转换函数。\r\n\t\t * 有三个参数：\r\n\t\t *   第一个参数支持的数据类型包括字符串和数字，\r\n\t\t *     当第一个参数的数据类型为数字（typeof === Number.TYPE_NAME），\r\n\t\t *       且没有提供第三个参数，则第二个参数的值作为输出参数处理。\r\n\t\t *   第二个参数是输入进制基数，\r\n\t\t *      如果不提供该参数，则判断输入的数字为10进制；\r\n\t\t *      如果输入的字符串中含有该进制不认可的字符，则返回NaN；\r\n\t\t *      如果hexConvert 不支持该进制，则抛出错误。\r\n\t\t *   第三个参数是输出进制基数，\r\n\t\t *      当第一个参数的数据类型为数字（typeof === Number.TYPE_NAME），该参数无效，\r\n\t\t *        以第二个参数作为输出进制基数进行处理\r\n\t\t *      如果不提供该参数，则判断输入的数字为10进制；\r\n\t\t *      如果hexConvert 不支持该进制，则抛出错误。\r\n\t\t */\r\n\t\thexConvert: (function () {\r\n\t\t\tconst BIN = 2,\r\n\t\t\t\tSIX = 6,\r\n\t\t\t\tOCT = 8,\r\n\t\t\t\tDEC = 10,\r\n\t\t\t\tHEX = 16,\r\n\t\t\t\tTWENTY_SIX = 26,\r\n\t\t\t\tSIXTY_TWO = 62\r\n\t\t\tSIXTY_FOUR = 64;\r\n\r\n\t\t\tconst BIN_START = '0b',\r\n\t\t\t\tOCT_START = '0o',\r\n\t\t\t\tHEX_START = '0x'\r\n\r\n\t\t\tconst NaN_STR = Number.NaN_TYPE_NAME;\r\n\t\t\tconst HEX_CHARS = {};\r\n\t\t\tHEX_CHARS[DEC] = '0123456789';\r\n\t\t\tHEX_CHARS[HEX] = HEX_CHARS[DEC] + 'ABCDEF';\r\n\t\t\tHEX_CHARS[TWENTY_SIX] = 'abcdefghijklmnopqrstuvwxyz';\r\n\t\t\tHEX_CHARS[SIXTY_FOUR] = (HEX_CHARS[DEC] + HEX_CHARS[TWENTY_SIX] + HEX_CHARS[TWENTY_SIX].toUpperCase()).replace(/[Oo01lI]/g, String.BLANK) + '!@$&#%';\r\n\t\t\tHEX_CHARS[SIXTY_TWO] = HEX_CHARS[SIXTY_FOUR].slice(2);\r\n\r\n\t\t\t// Returns a string representation of the given number for the given alphabet:\r\n\t\t\tfunction toAlphabet(num, alphabet) {\r\n\t\t\t\tvar base = alphabet.length;\r\n\t\t\t\tvar digits = [];\t// these will be in reverse order since arrays are stacks\r\n\r\n\t\t\t\t// execute at least once, even if num is 0, since we should return the '0':\r\n\t\t\t\tdo {\r\n\t\t\t\t\tdigits.push(num % base);\t// TODO handle negatives properly?\r\n\t\t\t\t\tnum = Math.floor(num / base);\r\n\t\t\t\t} while (num > 0);\r\n\r\n\t\t\t\tvar chars = [];\r\n\t\t\t\twhile (digits.length) {\r\n\t\t\t\t\tchars.push(alphabet[digits.pop()]);\r\n\t\t\t\t}\r\n\t\t\t\treturn chars.join(String.BLANK);\r\n\t\t\t};\r\n\r\n\t\t\t// Returns an integer representation of the given string for the given alphabet:\r\n\t\t\tfunction fromAlphabet(str, alphabet) {\r\n\t\t\t\tvar base = alphabet.length;\r\n\t\t\t\tvar pos = 0;\r\n\t\t\t\tvar num = 0;\r\n\r\n\t\t\t\tfor (let chr of str) {\r\n\t\t\t\t\tlet at = alphabet.indexOf(chr);\r\n\t\t\t\t\tif (at === -1) return NaN; // 因为返回的类型都是数字，所以这里直接返回 NaN\r\n\t\t\t\t\tnum += Math.pow(base, pos) * at;\r\n\t\t\t\t\tpos++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn num;\r\n\t\t\t};\r\n\r\n\t\t\tfunction fromBase(str, base) {\r\n\r\n\t\t\t\tswitch (base) {\r\n\t\t\t\t\tcase BIN:\r\n\t\t\t\t\t\tstr = BIN_START + str;\r\n\t\t\t\t\t\treturn Number(str);\r\n\t\t\t\t\tcase OCT:\r\n\t\t\t\t\t\tstr = OCT_START + str;\r\n\t\t\t\t\t\treturn Number(str);\r\n\t\t\t\t\tcase DEC:\r\n\t\t\t\t\t\treturn Number(str);\r\n\t\t\t\t\tcase HEX:\r\n\t\t\t\t\t\tstr = HEX_START + str;\r\n\t\t\t\t\t\treturn Number(str);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn fromAlphabet(str, HEX_CHARS[base]);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfunction hexConvert(num, inBase = DEC, outBase = DEC) {\r\n\r\n\t\t\t\tinBase = Number(inBase);\r\n\t\t\t\toutBase = Number(outBase);\r\n\r\n\t\t\t\tif (inBase > HEX && !(inBase in HEX_CHARS)) illegalArguments(\"不支持的输入进制基数：\" + inBase);\r\n\t\t\t\tif (outBase > HEX && !(outBase in HEX_CHARS)) illegalArguments(\"不支持的输出进制基数：\" + outBase);\r\n\r\n\t\t\t\tlet type = typeOf(num);\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase String.TYPE_NAME:\r\n\t\t\t\t\t\tnum = fromBase(num, inBase);\r\n\t\t\t\t\t\tif (Object.is(num, NaN)) return NaN_STR;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase Number.TYPE_NAME:\r\n\t\t\t\t\t\toutBase = inBase;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tillegalArguments(\"不被支持的参数类型：\" + type);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet hexChars = (outBase < DEC) ? HEX_CHARS[DEC].slice(0, outBase) : HEX_CHARS[outBase];\r\n\t\t\t\treturn toAlphabet(num, hexChars);\r\n\t\t\t}\r\n\r\n\t\t\thexConvert.BIN = BIN;\r\n\t\t\thexConvert.OCT = OCT;\r\n\t\t\thexConvert.DEC = DEC;\r\n\t\t\thexConvert.HEX = HEX;\r\n\t\t\thexConvert.TWENTY_SIX = TWENTY_SIX;\r\n\t\t\thexConvert.SIXTY_TWO = SIXTY_TWO;\r\n\t\t\thexConvert.SIXTY_FOUR = SIXTY_FOUR;\r\n\t\t\treturn hexConvert;\r\n\t\t})(),\r\n\t\tPrimeNumber: (function () {\r\n\r\n\t\t\tconst PRIME_IN_50 = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]; // 预置50以内的所有质数\r\n\r\n\t\t\tfunction getPrimeInInputStartsWithFrom(primes, from) {\r\n\r\n\t\t\t\tlet output = [];\r\n\r\n\t\t\t\tfor (let i = primes.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tif (primes[i] < from) break;\r\n\t\t\t\t\toutput.unshift(primes[i]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (from < 2) {\r\n\t\t\t\t\toutput.unshift(2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn output;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tcalcByInput: (from, to) => {\r\n\r\n\t\t\t\t\t// 错误检查\r\n\t\t\t\t\tif (!Number.isNumber(from)) errorCast(from, Number);\r\n\t\t\t\t\tif (!Number.isNumber(to)) errorCast(to, Number);\r\n\t\t\t\t\tif (from > to) unsupportedOperation(\"开始数必须大于结束数\");\r\n\t\t\t\t\tif (to < 0 || from < 0) unsupportedOperation(\"开始数必须大于 0\");\r\n\r\n\t\t\t\t\tlet primes = PRIME_IN_50.slice();\r\n\t\t\t\t\tlet output = getPrimeInInputStartsWithFrom(primes, from);\r\n\r\n\t\t\t\t\tIS_PRIME: for (let i = 53; i < to; i += 2) {\r\n\r\n\t\t\t\t\t\tfor (let j = 0; j < primes.length; j++) {\r\n\t\t\t\t\t\t\tif (i % primes[j] === 0) continue IS_PRIME;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tprimes.push(i);\r\n\t\t\t\t\t\tif (i >= from) {\r\n\t\t\t\t\t\t\toutput.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn output;\r\n\t\t\t\t},\r\n\t\t\t\tis: (input) => {\r\n\r\n\t\t\t\t\tif (!typeIs(input, Number.TYPE_NAME)) errorCast(input, Number);\r\n\r\n\t\t\t\t\tlet inputRoot = Math.sqrt(input);\r\n\r\n\t\t\t\t\tfor (let i = 0; i < PRIME_IN_50.length; i++) {\r\n\t\t\t\t\t\tlet now = PRIME_IN_50[i];\r\n\t\t\t\t\t\tif (now > inputRoot) return true;\r\n\t\t\t\t\t\tif (input % now === 0) return false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let i = 51; i < inputRoot; i += 2) {\r\n\t\t\t\t\t\tif (input % i === 0) return false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t})()\r\n\t},\r\n\t/*\r\n\t * Coralian.util.Calendar\r\n\t * 对时间处理的类集合封装了获得历法计算、时间计算等函数 包含对 Calendar 的相关操作\r\n\t */\r\n\tObjectUtil: {\r\n\t\t/**\r\n\t\t * 迭代器\r\n\t\t */\r\n\t\titerator: (obj) => {\r\n\t\t\treturn new Iterator(obj);\r\n\t\t},\r\n\t\thasOwnProperty: hasOwnProperty,\r\n\t\toverride: function (obj, name, callback) {\r\n\r\n\t\t\tvar proto = obj[name];\r\n\r\n\t\t\tobj[name] = callback(function () {\r\n\t\t\t\treturn proto.apply(obj, arguments);\r\n\t\t\t});\r\n\t\t},\r\n\t\targumentsToArray: function () {\r\n\t\t\treturn Array.of(arguments);\r\n\t\t},\r\n\t\tclone: objectClone,\r\n\t\t/*\r\n\t\t * 通过 Type 类来获得相关 type 的信息\r\n\t\t */\r\n\t\tgetType: getType\r\n\t},\r\n\t// Coralian.util.StringUtil\r\n\tStringUtil: {\r\n\t\tnormal: function (input) {\r\n\t\t\treturn input.replace(/<(\\/)?(b|i|strike|em|u|strong|sub|sup)>/ig, EMPTY_STRING);\r\n\t\t},\r\n\t\tweight: function (tag) {\r\n\t\t\treturn \"<\" + tag + \">\" + input + \"</\" + tag + \">\";\r\n\t\t},\r\n\t\tqueryString: function (obj) {\r\n\r\n\t\t\tif (typeIs(obj, String.TYPE_NAME)) {\r\n\t\t\t\treturn encodeURI(obj);\r\n\t\t\t}\r\n\r\n\t\t\tvar string = [];\r\n\t\t\tfor (var key in obj) {\r\n\t\t\t\tif (hasOwnProperty(obj, key)) {\r\n\t\t\t\t\t// 这里 encodeURIComponent 是因为 nodejs 端才这么写，其他服务器语言可能用不着\r\n\t\t\t\t\t// JSON.stringify 这句是因为可能存在包含对象类型的数据\r\n\t\t\t\t\tif (typeIs(obj[key], Object.TYPE_NAME)) {\r\n\t\t\t\t\t\tstring.push(key + '=' + JSON.stringify(encodeURIComponent(obj[key])));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstring.push(key + '=' + encodeURIComponent(obj[key]));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn string.join('&');\r\n\t\t},\r\n\t\tfirstToUpperCase: function (str) {\r\n\t\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\t\t\treturn str.charAt(0).toUpperCase() + str.slice(1);\r\n\t\t},\r\n\t\tfirstToLowserCase: function (str) {\r\n\t\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\t\t\treturn str.charAt(0).toLowserCase() + str.slice(1);\r\n\t\t}\r\n\t},\r\n\t// Coralian.util.NumberUtil\r\n\tNumberUtil: {\r\n\t\taddBeforeZero: function (arg, length) {\r\n\t\t\tif (!typeIs(arg, Number.TYPE_NAME)) unsupportedType(arg);\r\n\t\t\tif (!typeIs(length, Number.TYPE_NAME)) unsupportedType(length);\r\n\r\n\t\t\tvar r = [];\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tr.push(\"0\");\r\n\t\t\t}\r\n\t\t\treturn r.join(EMPTY_STRING) + arg;\r\n\t\t},\r\n\t\taddComma: (num, split) => {\r\n\r\n\t\t\tif (!isNumber(num)) errorCast(num, Number);\r\n\t\t\tif (split !== undefined && !isNumber(split)) errorCast(split, Number);\r\n\r\n\t\t\tsplit = parseInt(Math.pow(10, split || 3));\r\n\r\n\t\t\tvar result = String.BLANK;\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet part = num % split;\r\n\t\t\t\tnum = parseInt(num / split);\r\n\r\n\t\t\t\trersult = part + result;\r\n\t\t\t\tif (num !== 0) {\r\n\t\t\t\t\tresult = ',' + result;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tparseInt: function (num, nag) {\r\n\t\t\treturn parseNumber(num, nag, parseInt);\r\n\t\t},\r\n\t\tparseFloat: function (num, nag) {\r\n\t\t\treturn parseNumber(num, nag, parseFloat);\r\n\t\t}\r\n\t},\r\n\tCharUtil: (function () {\r\n\r\n\t\tfunction invaildCharacter(input) {\r\n\t\t\tthrow new Error(input + ' 不是合法的字符');\r\n\t\t}\r\n\r\n\t\tvar ZERO = 0x0030,\r\n\t\t\tNINE = 0x0039,\r\n\t\t\tUPPER_A = 0x0041,\r\n\t\t\tUPPER_Z = 0x005A,\r\n\t\t\tLOWER_A = 0x0061,\r\n\t\t\tLOWER_Z = 0x007A;\r\n\t\tvar SPACE = [' ', '\\t', '\\r', '\\n', '\\r\\n', '\\u000B', '\\f', '\\u001C', '\\u001D', '\\u001E', '\\u001F'];\r\n\r\n\t\t// TODO 这个函数有点问题，先暂时不用\r\n\t\t// function __isNumber(number) {\r\n\t\t// \tif (!isChar(number)) invaildCharacter(number);\r\n\t\t// \tvar code = number.charCodeAt(0);\r\n\t\t// \treturn code >= ZERO && code <= NINE;\r\n\t\t// }\r\n\r\n\t\tfunction isAlphabet(input) {\r\n\t\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\t\tvar code = letter.charCodeAt(0);\r\n\t\t\treturn (code >= UPPER_A && code <= UPPER_Z) || (code >= LOWER_A && code <= LOWER_Z);\r\n\t\t}\r\n\r\n\t\tfunction isChar(str) {\r\n\t\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\r\n\t\t\treturn 1 === str.length;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tisChar: isChar,\r\n\t\t\tisNumber: Number.isNumber,\r\n\t\t\tisAlphabet: isAlphabet,\r\n\t\t\tisNumberOrAlphabet: function (arg) {\r\n\t\t\t\treturn Number.isNumber(arg) || isAlphabet(arg);\r\n\t\t\t},\r\n\t\t\tisASCII(input) {\r\n\t\t\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\t\t\treturn input.charAodeAt(0) < 128;\r\n\t\t\t},\r\n\t\t\tisSpace: function (input) {\r\n\t\t\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\t\t\treturn Array.has(SPACE, input);\r\n\t\t\t},\r\n\t\t\tchange: function (value, count) {\r\n\t\t\t\tif (!Number.isNumber(count)) errorCast(count, Number);\r\n\t\t\t\tif (isChar(value)) {\r\n\t\t\t\t\treturn String.fromCharCode(value.charCodeAt(0) + count);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tunsupportedOperation(value + ' 不是合法的字符');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcompare: function (char1, char2) {\r\n\t\t\t\tif (!isChar(char1)) invaildCharacter(char1);\r\n\t\t\t\tif (!isChar(char2)) invaildCharacter(char2);\r\n\t\t\t\treturn char1.charCodeAt(0) - char2.charCodeAt(0);\r\n\t\t\t},\r\n\t\t\tasUnicodeEncode: function (input) {\r\n\t\t\t\tvar code;\r\n\t\t\t\tif (!Number.isNumber(input)) {\r\n\t\t\t\t\tif (!isChar(input)) invaildCharacter(input);\r\n\t\t\t\t\tcode = (input.charCodeAt(0)).toString(16);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcode = (input).toString();\r\n\t\t\t\t}\r\n\t\t\t\tcode = code.toUpperCase();\r\n\t\t\t\tswitch (code.length) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcode = \"000\" + code;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcode = \"00\" + code;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tcode = \"0\" + code;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\treturn \"\\\\u\" + code;\r\n\t\t\t},\r\n\t\t\tZERO: ZERO,\r\n\t\t\tNINE: NINE,\r\n\t\t\tUPPER_A: UPPER_A,\r\n\t\t\tUPPER_Z: UPPER_Z,\r\n\t\t\tLOWER_A: LOWER_A,\r\n\t\t\tLOWER_Z: LOWER_Z\r\n\t\t};\r\n\t})()\r\n}\n\n//# sourceURL=webpack:///./src/lib/util.js?");

/***/ }),

/***/ "C:\\Users\\waygc\\AppData\\Roaming\\npm\\node_modules\\webpack\\buildin\\global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });