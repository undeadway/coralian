/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/base/Array.js":
/*!***************************!*\
  !*** ./src/base/Array.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { isArray, arrayClone } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\nconst { unsupportedType, indexOutOfBounds, errorCast } = Error;\n\n/* ==================== Array 的扩展 ==================== */\nconst array_slice = Array.prototype.slice;\nif (!Array.removeEach) {\n\tArray.removeEach = function (array, callback) {\n\t\tif (!typeIs(array, Array.TYPE_NAME)) unsupportedType(array);\n\n\t\twhile ((node = array.shift()) !== undefined) {\n\t\t\tcallback(node);\n\t\t}\n\t};\n}\n\nArray.forEach = function (array, start, end, callback) {\n\tif (!typeIs(array, Array.TYPE_NAME)) unsupportedType(array);\n\n\tswitch (arguments.length) {\n\t\tcase 2:\n\t\t\tcallback = start;\n\t\t\tstart = 0;\n\t\t\tend = array.length;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcallback = end;\n\t\t\tend = array.length;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\tif (start < 0) indexOutOfBounds(start, 0);\n\tif (end > array.length) indexOutOfBounds(end, array.length);\n\n\tfor (let i = start; i < end; i++) {\n\t\tlet result = callback(i, array[i]);\n\t\tif (undefined !== result) break;\n\t}\n};\n\nif (!Array.equals) {\n\tfunction equals(arr1, arr2) {\n\n\t\tif (!(isArray(arr2))) errorCast(arr2, Array);\n\t\tif (arr1.equals) return arr1.equals(arr2);\n\t\tif (!(isArray(arr1))) errorCast(arr1, Array);\n\n\t\tlet len = arg1.length;\n\t\tif (len === arr2.length) {\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t// 因为数组元素是可以任意对象类型，所以这里调用 Object.equals 来判断两者是否一致\n\t\t\t\tif (!Object.equals(arr1[i], arr2[i])) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\tArray.equals = equals;\n}\nif (!Array.isEmpty) {\n\tArray.isEmpty = function (obj) {\n\t\tif (obj === null || obj === undefined) return true;\n\t\treturn obj.length === 0;\n\t};\n}\nif (!Array.asObject) {\n\tArray.asObject = function (input) {\n\t\tlet obj = {};\n\t\tfor (let i = 0, len = input.length; i < len; i++) {\n\t\t\tobj[i] = input[i];\n\t\t}\n\t\treturn obj;\n\t};\n}\nif (!Array.has) {\n\tArray.has = function (input, element) {\n\t\tfor (let i = 0, len = input.length; i < len; i++) {\n\t\t\tif (Object.equals(element, input[i])) return true;\n\t\t}\n\t\treturn false;\n\t};\n}\nif (!Array.find) {\n\tArray.find = function (input, element) {\n\t\tfor (let i = 0, len = this.length; i < len; i++) {\n\t\t\tif (Object.equals(element, input[i])) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n}\nif (!Array.last) {\n\tArray.last = function (array, cnt) {\n\t\tlet len = array.length;\n\t\tif (!cnt) { // 真的最后一个位置\n\t\t\treturn array[len - 1];\n\t\t} else {\n\t\t\tif (!typeIs(cnt, Number.TYPE_NAME)) unsupportedType(cnt);\n\t\t\tif (cnt > len) indexOutOfBounds(cnt, len);\n\t\t\tif (cnt > 0) {\n\t\t\t\treturn array[len - cnt];\n\t\t\t} else {\n\t\t\t\treturn array[0 - cnt];\n\t\t\t}\n\t\t}\n\t};\n}\n\nif (!Array.of) {\n\tArray.of = function () {\n\t\treturn array_slice.call(arguments);\n\t};\n}\nif (!Array.clone) {\n\tArray.clone = arrayClone;\n}\n\n// 下面的代码是从 MDN 上抄的，所以 var 不修改为 let\nif (!Array.from) {\n\tArray.from = (function () {\n\t\tvar toStr = Object.prototype.toString;\n\t\tvar isCallable = function (fn) {\n\t\t\treturn typeof fn === Function.TYPE_NAME || toStr.call(fn) === \"[object Function]\";\n\t\t};\n\t\tvar toInteger = function (value) {\n\t\t\tvar number = Number(value);\n\t\t\tif (isNaN(number)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (number === 0 || !isFinite(number)) {\n\t\t\t\treturn number;\n\t\t\t}\n\t\t\treturn (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n\t\t};\n\t\tvar maxSafeInteger = Math.pow(2, 53) - 1;\n\t\tvar toLength = function (value) {\n\t\t\tvar len = toInteger(value);\n\t\t\treturn Math.min(Math.max(len, 0), maxSafeInteger);\n\t\t};\n\n\t\t// The length property of the from method is 1.\n\t\treturn function from(arrayLike /*, mapFn, thisArg */) {\n\t\t\t// 1. Let C be the this value.\n\t\t\tvar C = this;\n\n\t\t\t// 2. Let items be ToObject(arrayLike).\n\t\t\tvar items = Object(arrayLike);\n\n\t\t\t// 3. ReturnIfAbrupt(items).\n\t\t\tif (arrayLike == null) {\n\t\t\t\tthrow new TypeError(\"Array.from requires an array-like object - not null or undefined\");\n\t\t\t}\n\n\t\t\t// 4. If mapfn is undefined, then let mapping be false.\n\t\t\tvar mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n\t\t\tvar T;\n\t\t\tif (typeof mapFn !== Object.UNDEFINED_TYPE_NAME) {\n\t\t\t\t// 5. else      \n\t\t\t\t// 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n\t\t\t\tif (!isCallable(mapFn)) {\n\t\t\t\t\tthrow new TypeError(\"Array.from: when provided, the second argument must be a function\");\n\t\t\t\t}\n\n\t\t\t\t// 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\t\t\t\tif (arguments.length > 2) {\n\t\t\t\t\tT = arguments[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 10. Let lenValue be Get(items, \"length\").\n\t\t\t// 11. Let len be ToLength(lenValue).\n\t\t\tvar len = toLength(items.length);\n\n\t\t\t// 13. If IsConstructor(C) is true, then\n\t\t\t// 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.\n\t\t\t// 14. a. Else, Let A be ArrayCreate(len).\n\t\t\tvar A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n\t\t\t// 16. Let k be 0.\n\t\t\tvar k = 0;\n\t\t\t// 17. Repeat, while k < len… (also steps a - h)\n\t\t\tvar kValue;\n\t\t\twhile (k < len) {\n\t\t\t\tkValue = items[k];\n\t\t\t\tif (mapFn) {\n\t\t\t\t\tA[k] = typeof T === Object.UNDEFINED_TYPE_NAME ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n\t\t\t\t} else {\n\t\t\t\t\tA[k] = kValue;\n\t\t\t\t}\n\t\t\t\tk += 1;\n\t\t\t}\n\t\t\t// 18. Let putStatus be Put(A, \"length\", len, true).\n\t\t\tA.length = len;\n\t\t\t// 20. Return A.\n\t\t\treturn A;\n\t\t};\n\t}());\n}\n/* ==================== Array 的扩展 ==================== */\n\n//# sourceURL=webpack://coralian/./src/base/Array.js?");

/***/ }),

/***/ "./src/base/Error.js":
/*!***************************!*\
  !*** ./src/base/Error.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * 这里这么写的原因是 Error 和 common 之间存在关联调用\n * 所以只能做一个懒加载模式\n */\nlet isNumber, getFunctionName;\n/* ==================== Error 的扩展 ==================== */\nfunction debugError(e) {\n\tif (!isNumber || !getFunctionName) {\n\t\tlet common = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\n\t\tisNumber = common.isNumber;\n\t\tgetFunctionName = common.getFunctionName;\n\t}\n\n\talert(\"message:\" + e.message);\n\talert(\"stack:\" + e.stack);\n\tthrow e;\n}\n\nfunction errorCast(obj, type) {\n\n\tif (Function.TYPE_NAME !== typeof type) {\n\t\terrorCast(type, Function);\n\t}\n\n\tlet error = new TypeError();\n\tconsole.error(error.message);\n\tconsole.error(error.stack);\n\terror = typeOf(obj) + \" 类型的数据无法转变为 \" + getFunctionName(type) + \"。\";\n\tdebugError(error);\n}\nError.errorCast = errorCast;\n\nfunction indexOutOfBounds(given, want) {\n\n\tif (!isNumber(given)) errorCast(given, Number);\n\tif (!isNumber(want)) errorCast(want, Number);\n\n\tif (want < given) {\n\t\tdebugError(new Error(\"请求的下标 \" + given + \" 超过了上限 \" + want));\n\t} else {\n\t\tdebugError(new Error(\"请求的下标 \" + given + \" 没有达到下限 \" + want));\n\t}\n}\nError.indexOutOfBounds = indexOutOfBounds;\n\nfunction noReference(msg) {\n\n\tlet error = new ReferenceError();\n\terror.message = msg || \"当前引用错误。\";\n\tdebugError(error);\n}\nError.noReference = noReference;\n\nfunction unsupportedType(type) {\n\n\tlet error = new TypeError();\n\terror.message = typeOf(type) + \"类型的数据不被当前操作所支持。\";\n\tdebugError(error);\n}\nError.unsupportedType = unsupportedType;\n\nfunction unsupportedOperation(msg) {\n\n\tmsg += \" 不被支持的操作\";\n\tdebugError(new Error(msg));\n}\nError.unsupportedOperation = unsupportedOperation;\n\nfunction noSuchMethod(name) {\n\n\tdebugError(new Error(\"方法 \" + name + \" 不存在。\"));\n}\nError.noSuchMethod = noSuchMethod;\n\nfunction noSuchProperty(name) {\n\n\tdebugError(new Error(\"属性 \" + name + \" 不存在。\"));\n}\nError.noSuchProperty = noSuchProperty;\n\nfunction errorStatement() {\n\n\tdebugError(new Error(\"语法错误，或被执行的逻辑不正确。\"));\n}\nError.errorStatement = errorStatement;\n\nfunction illegalArguments(msg) {\n\n\tmsg = msg || \"函数参数不正确\";\n\tdebugError(msg);\n}\nError.illegalArguments = illegalArguments;\n/* ==================== Error 的扩展 ==================== */\n\n//# sourceURL=webpack://coralian/./src/base/Error.js?");

/***/ }),

/***/ "./src/base/Object.js":
/*!****************************!*\
  !*** ./src/base/Object.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { keyArray, hasOwnProperty, instanceTo, objectClone, isPrimitive } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\nconst { unsupportedType, noReference } = Error;\n\n/* ==================== Object 的扩展 ==================== */\nfunction objectIsEmpty(obj) {\n\tif (obj === null || obj === undefined) return true;\n\tif (obj.isEmpty) return obj.isEmpty();\n\tfor (let k in obj) {\n\t\tif (hasOwnProperty(obj, k)) return false;\n\t}\n\treturn true;\n};\nif (!Object.isEmpty) {\n\tObject.isEmpty = objectIsEmpty;\n}\n\nfunction addAll(from, to) {\n\n\tif (!typeIs(from, Object.TYPE_NAME, Array.TYPE_NAME)) unsupportedType(from);\n\tif (!typeIs(to, Object.TYPE_NAME, Array.TYPE_NAME)) unsupportedType(to);\n\n\tfor (let key in from) {\n\t\tif (hasOwnProperty(from, key)) {\n\t\t\tlet now = from[key];\n\t\t\tif (typeIs(now, Object.TYPE_NAME)) {\n\t\t\t\tlet _to = {};\n\t\t\t\taddAll(now, _to);\n\t\t\t\tto[key] = _to;\n\t\t\t} else {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\t}\n}\nObject.addAll = addAll;\n\nif (!Object.keys) {\n\tObject.keys = function (o) {\n\t\tif (o !== Object(o))\n\t\t\tthrow new TypeError(\"Object.keys called on a non-object\");\n\t\tlet k = [];\n\t\tfor (let p in o) {\n\t\t\tif (hasOwnProperty(o, p)) {\n\t\t\t\tk.push(p);\n\t\t\t}\n\t\t}\n\t\treturn k.sort();\n\t};\n}\n\n// 下面的代码是从 MDN 上抄的，所以 var 不修改为 let\nif (!Object.values) {\n\tObject.values = function (o) {\n\t\tif (o !== Object(o))\n\t\t\tthrow new TypeError(\"Object.keys called on a non-object\");\n\t\tvar k = [];\n\t\tfor (let p in o) {\n\t\t\tif (hasOwnProperty(o, p)) {\n\t\t\t\tk.push(o[p]);\n\t\t\t}\n\t\t}\n\t\treturn k.sort();\n\t}\n}\n\nfunction equals(arg1, arg2) {\n\n\tif (arg1 === arg2) return true; // 值相同、数据类型相同，或者引用的是同一块内存，或者是基本类型（数字、字符串、boolean）\n\n\tlet type1 = typeOf(arg1), type2 = typeOf(arg2);\n\n\tif (type1 !== type2) return false; // 先判断类型，类型不一致，则直接判断不等\n\tif (arg1 == arg2) return true; // 这句是因为可能存在 new String() !== '' 这样的情况\n\tif (arg1.equals) return arg1.equals(arg2);\n\n\tswitch (type1) {\n\t\tcase Number.NaN_TYPE_NAME:\n\t\t\treturn true; // 因为两个都是 NaN，直接返回 true\n\t\tcase Function.TYPE_NAME:\n\t\tcase Number.Infinity_TYPE_NAME:\n\t\t\treturn arg1 === arg2;\n\t\tcase Array.TYPE_NAME:\n\t\t\tif (arg1.length !== arg2.length) return false;\n\n\t\t\tfor (let i = 0, len = arg1.length; i < len; i++) {\n\t\t\t\tif (!Array.equals(arg1[i], arg2[i])) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\tcase Object.TYPE_NAME:\n\t\t\t// 提取对象的 KEY 为一个数组\n\t\t\tlet key1 = keyArray(arg1), key2 = keyArray(arg2);\n\t\t\tif (key1.length === key2.length) {\n\t\t\t\t// 直接转化为字符串判断两个 KEY 的内容是否一致\n\t\t\t\tif (key1.toString() === key2.toString()) {\n\t\t\t\t\tfor (let i = 0, len = key1.length; i < len; i++) {\n\t\t\t\t\t\tif (!equals(arg1[key1[i]], arg2[key2[i]])) return false; // 递归\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\tcase RegExp.TYPE_NAME:\n\t\t\treturn arg1.toString == arg2.toString();\n\t\tdefault:\n\t\t\t// 其余不可判断的类型全部JSON化之后判断字符串内容\n\t\t\treturn JSON.stringify(arg1) === JSON.stringify(arg2);\n\t}\n}\nObject.equals = equals;\n\nObject.forEach = (obj, callback) => {\n\tif (obj === null || obj === undefined) noReference();\n\tif (obj instanceof Map) {\n\t\tfor (let [key, value] of obj.entries()) {\n\t\t\tcallback(key, value);\n\t\t}\n\t} else {\n\t\tswitch (typeOf(obj)) {\n\t\t\tcase Array.TYPE_NAME:\n\t\t\t\tArray.forEach(obj, callback);\n\t\t\t\tbreak;\n\t\t\tcase Object.TYPE_NAME:\n\t\t\t\tfor (let k in obj) {\n\t\t\t\t\tif (hasOwnProperty(obj, k)) {\n\t\t\t\t\t\tlet result = callback(k, obj[k]);\n\t\t\t\t\t\tif (undefined !== result) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunsupportedType(obj);\n\t\t}\n\t}\n}\n\nif (!Object.mix) {\n\tObject.mix = function () {\n\t\tlet deepCpy = arguments[0],\n\t\t\tstart = 1;\n\t\tif (!typeIs(deepCpy, Boolean.TYPE_NAME)) {\n\t\t\tdeepCpy = false;\n\t\t\tstart = 0;\n\t\t}\n\n\t\tlet result = {};\n\n\t\tfor (let i = start; i < arguments.length; i++) {\n\t\t\tlet e = arguments[i];\n\n\t\t\tif (!typeIs(e, Object.TYPE_NAME)) unsupportedType(e);\n\n\t\t\tlet el = deepCpy ? JSON.parse(JSON.stringify(e)) : e;\n\n\t\t\taddAll(el, result);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nObject.isPrimitive = (obj) => {\n\tif (obj === null || obj === undefined) return true;\n\tlet type = obj.constructor;\n\n\treturn isPrimitive(type);\n};\n\nif (!Object.clone) {\n\tObject.clone = objectClone;\n}\n\nif (!Object.instanceTo) {\n\tObject.instanceTo = instanceTo;\n}\n/* ==================== Object 的扩展 ==================== */\n\n//# sourceURL=webpack://coralian/./src/base/Object.js?");

/***/ }),

/***/ "./src/base/String.js":
/*!****************************!*\
  !*** ./src/base/String.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { typeIs } = __webpack_require__(/*! ./common */ \"./src/base/common.js\");\n\n/* ==================== String 的扩展 ==================== */\nconst { errorCast, unsupportedType } = Error;\n\nconst EMPTY_STRING = \"\";\nfunction equals(from, another) {\n\n\tif (!typeIs(from, String.TYPE_NAME)) errorCast(from, String); // from 不是字符串\n\tif (!typeIs(another, String.TYPE_NAME)) errorCast(from, String); // another 不是字符串\n\n\tif (String(from) === String(another)) return true;\n\tif (from.equals) return from.equals(another);\n\n\t// 添加最后这段是为了保证其他各种因为 new 或者其他原因造成的问题\n\tif (from.length === another.length) {\n\t\tfor (let i = 0, len = from.length; i < len; i++) {\n\t\t\tif (from.charAt(i) !== another.charAt(i)) return false;\n\t\t}\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nif (!String.isEmpty) {\n\tString.isEmpty = function (input) {\n\n\t\tif (input === null || input === undefined) return true;\n\t\tif (!typeIs(input, String.TYPE_NAME)) unsupportedType(input);\n\t\tif (input.isEmpty) return input.isEmpty();\n\n\t\treturn input.length === 0 || equals(input, EMPTY_STRING); // 后面一半仅限于前半段不知道什么时候会坏掉时用\n\t};\n}\nif (!String.equals) {\n\tString.equals = equals;\n}\nif (!String.contains) {\n\tString.contains = function (str, input, startIndex) {\n\t\tif (str.contains) return str.contains(input, startIndex);\n\t\treturn -1 !== String.prototype.indexOf.call(str, input, startIndex);\n\t};\n}\n\nif (!String.equalsIgnoreCase) {\n\tString.equalsIgnoreCase = function (string, another) {\n\n\t\tif (string === another) return true;\n\t\tif (string.equalsIgnoreCase) return string.equalsIgnoreCase(another);\n\n\t\tif ((another !== null && another !== undefined) || string.length === another.length) {\n\t\t\treturn equals(string.toUpperCase(), another.toUpperCase());\n\t\t}\n\n\t\treturn false;\n\t}\n}\nif (!String.endsWith) {\n\tString.endsWith = function (str, searchString, position) {\n\n\t\tif (str.endsWith) return str.endsWith(searchString, position);\n\n\t\tposition = position || str.length;\n\t\tposition = position - searchString.length;\n\t\tlet lastIndex = str.lastIndexOf(searchString);\n\t\treturn lastIndex !== -1 && lastIndex === position;\n\t};\n}\nString.last = function (string) {\n\tif (string.last) return string.last();\n\treturn string[string.length - 1];\n};\nString.lastCode = function (string) {\n\tif (string.lastCode) return string.lastCode();\n\treturn string.charCodeAt(string.length - 1);\n};\nif (!String.startsWith) {\n\tObject.defineProperty(String, \"startsWith\", {\n\t\tenumerable: false,\n\t\tconfigurable: false,\n\t\twritable: false,\n\t\tvalue: function (string, searchString, position) {\n\t\t\tif (string.startsWith) return string.startsWith(searchString, position);\n\t\t\tposition = position || 0;\n\t\t\treturn string.indexOf(searchString, position) === position;\n\t\t}\n\t});\n}\n\nfunction trimZeroWidth(str) {\n\tif (str.trimZeroWidth) return str.trimZeroWidth();\n\treturn str.replace(/\\uFEFF/, EMPTY_STRING);\n}\n\nif (!String.trim) {\n\tString.trim = function (str) {\n\t\tif (str.trim) return str.trim();\n\t\tstr = str.replace(/^\\s+|\\s+$/gm, EMPTY_STRING);\n\t\treturn trimZeroWidth(str);\n\t};\n}\nif (!String.trimLeft) {\n\tString.trimLeft = function (str) {\n\t\tif (str.trimLeft) return str.trimLeft();\n\t\tstr.replace(/(^\\s*)/g, EMPTY_STRING);\n\t\treturn trimZeroWidth(str);\n\t};\n}\nif (!String.trimRight) {\n\tString.trimRight = function (str) {\n\t\tif (str.trimRight) return str.trimRight();\n\t\tstr.replace(/(\\s*$)/g, EMPTY_STRING);\n\t\treturn trimZeroWidth(str);\n\t};\n}\n\n// 下面的代码是从 MDN 上抄的，所以 var 不修改为 let\nif (!String.compareTo) {\n\tString.compareTo = function (first, another) {\n\t\tif (first.compareTo) return first.compareTo(another);\n\t\tvar len1 = first.length,\n\t\t\tlen2 = another.length;\n\t\tvar max = len1 - len2;\n\t\tvar len = (max <= 0) ? len1 : len2;\n\t\tvar this_charCodeAt = first.charCodeAt;\n\t\tvar another_charCodeAt = another.charCodeAt;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tlet as = this_charCodeAt(i) - another_charCodeAt(i);\n\t\t\tif (as !== 0) return as;\n\t\t}\n\t\treturn max;\n\t};\n}\nif (!String.fromCodePoint) {\n\t(function () {\n\t\tvar defineProperty = (function () {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\treturn Object.defineProperty(object, object, object) && Object.defineProperty;\n\t\t\t} catch (error) { }\n\t\t}());\n\t\tvar stringFromCharCode = String.fromCharCode;\n\t\tvar floor = Math.floor;\n\n\t\tfunction fromCodePoint() {\n\t\t\tvar MAX_SIZE = 0x4000;\n\t\t\tvar codeUnits = [];\n\t\t\tvar highSurrogate;\n\t\t\tvar lowSurrogate;\n\t\t\tvar index = -1;\n\t\t\tvar length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn EMPTY_STRING;\n\t\t\t}\n\t\t\tvar result = EMPTY_STRING;\n\t\t\twhile (++index < length) {\n\t\t\t\tlet codePoint = Number(arguments[index]);\n\t\t\t\tif (!isFinite(codePoint) || // `NaN`, `+Infinity`, or\n\t\t\t\t\t// `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError(\"Invalid code point: \" + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, \"fromCodePoint\", {\n\t\t\t\t\"value\": fromCodePoint,\n\t\t\t\t\"configurable\": true,\n\t\t\t\t\"writable\": true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\nif (!String.prototype.codePointAt) {\n\t(function () {\n\t\t\"use strict\"; // needed to support `apply`/`call` with\n\t\t// `undefined`/`null`\n\t\tvar codePointAt = function (position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? new Number(position) : 0;\n\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) return undefined;\n\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tObject.defineProperty(String.prototype, \"codePointAt\", {\n\t\t\t\"value\": codePointAt,\n\t\t\t\"configurable\": true,\n\t\t\t\"writable\": true\n\t\t});\n\t}());\n}\n\nconst STRING_AS_ARRAY_REGX = /[\\s\\S]/gi;\nString.asArray = function (input) {\n\treturn input.match(STRING_AS_ARRAY_REGX);\n};\n\nObject.defineProperty(String, \"BLANK\", {\n\tvalue: EMPTY_STRING,\n\twritable: false\n});\n\n/*\n * 因为JS已经有 valueOf 函数，所以这里用 from 来实现 类似 Java 中 String.valueOf 的 功能\n */\nString.from = (obj) => {\n\tif (obj === null || obj === undefined) return EMPTY_STRING;\n\treturn (obj).valueOf();\n};\n\nString.lowerCamelCase = (input, mark = \"-\") => {\n\n\tif (!typeIs(input, 'string', 'array')) {\n\t\tunsupportedType(input);\n\t}\n\tif (typeIs(input, 'string')) {\n\t\tinput = input.split(mark);\n\t}\n\n\tlet output = [];\n\n\toutput.push(input.shift().toLowerCase());\n\n\tinput.map(item => {\n\t\tlet str = item.charAt(0).toUpperCase() + item.slice(1).toLowerCase();\n\t\toutput.push(str);\n\t});\n\n\treturn output.join(String.BLANK);\n};\n\nString.upperCamelCase = (input, mark = \"-\") => {\n\n\tif (!typeIs(input, 'string', 'array')) {\n\t\tunsupportedType(input);\n\t}\n\tif (typeIs(input, 'string')) {\n\t\tinput = input.split(mark);\n\t}\n\n\tlet output = [];\n\n\tinput.map(item => {\n\t\tlet str = item.charAt(0).toUpperCase() + item.slice(1).toLowerCase();\n\t\toutput.push(str);\n\t});\n\n\treturn output.join(String.BLANK);\n}\n/* ==================== String 的扩展 ==================== */\n\n//# sourceURL=webpack://coralian/./src/base/String.js?");

/***/ }),

/***/ "./src/base/common.js":
/*!****************************!*\
  !*** ./src/base/common.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(Array, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"array\";\n\t}\n});\nObject.defineProperty(Boolean, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"boolean\";\n\t}\n});\nObject.defineProperty(Error, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"error\";\n\t}\n});\nObject.defineProperty(Function, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"function\";\n\t}\n});\nObject.defineProperty(Number, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"number\";\n\t}\n});\nObject.defineProperty(Number, \"NaN_TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"NaN\";\n\t}\n});\nObject.defineProperty(Number, \"Infinity_TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"Infinity\";\n\t}\n});\nObject.defineProperty(Object, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"object\";\n\t}\n});\nObject.defineProperty(Object, \"NULL_TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"null\";\n\t}\n});\nObject.defineProperty(Object, \"UNDEFINED_TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"undefined\";\n\t}\n});\nObject.defineProperty(String, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"string\";\n\t}\n});\nObject.defineProperty(RegExp, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"regexp\";\n\t}\n});\nObject.defineProperty(Date, \"TYPE_NAME\", {\n\tget: () => {\n\t\treturn \"date\";\n\t}\n});\n//  ES6 新增\nif (Set) {\n\tObject.defineProperty(Set, \"TYPE_NAME\", {\n\t\tget: () => {\n\t\t\treturn \"set\";\n\t\t}\n\t});\n}\nif (WeakSet) {\n\tObject.defineProperty( WeakSet, \"TYPE_NAME\", {\n\t\tget: () => {\n\t\t\treturn \"weakset\";\n\t\t}\n\t});\n}\nif (Map) {\n\tObject.defineProperty(Map, \"TYPE_NAME\", {\n\t\tget: () => {\n\t\t\treturn \"set\";\n\t\t}\n\t});\n}\nif (WeakMap) {\n\tObject.defineProperty( WeakMap, \"TYPE_NAME\", {\n\t\tget: () => {\n\t\t\treturn \"weakset\";\n\t\t}\n\t});\n}\n// if (global.TypedArray) {\n// \tObject.defineProperty( global.TypedArray, 'TYPE_NAME', {\n// \t\tget: () => {\n// \t\t\treturn 'typedarray';\n// \t\t}\n// \t});\n// }\nif (Symbol) {\n\tObject.defineProperty(Symbol, \"TYPE_NAME\", {\n\t\tget: () => {\n\t\t\treturn \"symbol\";\n\t\t}\n\t});\n}\n\nconst _isArray = exports.isArray = (Array.isArray) ? Array.isArray :\n\t(arr) => {\n\t\treturn arr && (arr instanceof Array ||\n\t\t\t(typeof arr === Object.TYPE_NAME &&\n\t\t\t\ttypeof arr.length === Number.TYPE_NAME &&\n\t\t\t\tarr.propertyIsEnumerable(\"length\")));\n\t};\n\nconst keyArray = exports.keyArray = (Object.keys) ? Object.keys :\n\t(obj) => {\n\t\tlet keys = [];\n\t\tfor (let k in obj) {\n\t\t\tif (obj.hasOwnProperty(k)) {\n\t\t\t\tkeys.push(k);\n\t\t\t}\n\t\t}\n\t\treturn keys;\n\t};\n\nconst { errorCast, noReference, unsupportedType, indexOutOfBounds, unsupportedOperation, noSuchMethod } = Error;\nconst { Mark } = __webpack_require__(/*! ./../lib/constants */ \"./src/lib/constants.js\");\n\n/**\n * 用于得到数据类型\n * 一般以 string 类型返回数据类型的值\n * 数据类型判断不依照 JS 规则，而是以以下基准判断\n * Object.NULL_TYPE_NAME === typeOf(null)\n * Object.UNDEFINED_TYPE_NAME === typeOf(undefined)\n * Boolean.TYPE_NAME === typeOf(boolean)\n * Number.NaN_TYPE_NAME === typeOf(NaN) 仅用于 NaN ，如果提供的是 '12X' 则直接判断为字符串\n * Number.Infinity_TYPE_NAME === typeOf(Infinity) 仅用于 Infinity 和 -Infinity，其他可用字面量表达的数字判断为 number\n * Number.TYPE_NAME === typeOf(number)\n * String.TYPE_NAME === typeOf(string)\n * Function.TYPE_NAME === typeOf(function)\n * Object.TYPE_NAME === typeOf(object)\n * Array.TYPE_NAME === typeOf(array)\n * RegExp.TYPE_NAME === typeOf(regexp)\n * Date.TYPE_NAME === typeOf(date)\n * Set.TYPE_NAME === typeOf(set)\n * WeakSet.TYPE_NAME === typeOf(weakset)\n * Map.TYPE_NAME === typeOf(map)\n * WeakMap.TYPE_NAME === typeOf(weakmap)\n * Symbol.TYPE_NAME === typeOf(symbol)\n * \n * String、Number、Boolean 这三种可以被包装的对象也当成字面量来进行判断，而不返回 object\n * 即\n * String.TYPE_NAME === typeOf(new String());\n * Number.TYPE_NAME === typeOf(new Number());\n * Boolean.TYPE_NAME === typeOf(new Boolean());\n * \n * 只判断 JS 内置的数据类型格式\n * 不会判断各种自定义数据类型，这些类型都将被辨认为 object\n * \n * @returns\n */\nfunction typeOf(object) {\n\tlet result;\n\n\tif (object === null) {\n\t\tresult = Object.NULL_TYPE_NAME;\n\t} else if (_isArray(object)) {\n\t\tresult = Array.TYPE_NAME;\n\t} else if (object !== object) {\n\t\tresult = NaN.TYPE_NAME;\n\t} else if (object === Infinity || object === -Infinity) {\n\t\tresult = Infinity.TYPE_NAME;\n\t} else if (object instanceof RegExp) {\n\t\tresult = RegExp.TYPE_NAME;\n\t} else if (object instanceof Number) { // new Number\n\t\tresult = Number.TYPE_NAME;\n\t} else if (object instanceof Boolean) { // new Boolean\n\t\tresult = Boolean.TYPE_NAME;\n\t} else if (object instanceof String) { // new String\n\t\tresult = String.TYPE_NAME;\n\t} else if (object instanceof Date) {\n\t\tresult = Date.TYPE_NAME;\n\t} else if (object instanceof Set) {\n\t\tresult = Set.TYPE_NAME;\n\t} else if (object instanceof WeakSet) {\n\t\tresult = WeakSet.TYPE_NAME;\n\t} else if (object instanceof Map) {\n\t\tresult = Map.TYPE_NAME;\n\t} else if (object instanceof WeakMap) {\n\t\tresult = WeakMap.TYPE_NAME;\n\t} else {\n\t\tresult = typeof object;\n\t\tif (result === Number.TYPE_NAME && isNaN(object)) { // 以防有漏网之鱼\n\t\t\tresult = Number.NaN_TYPE_NAME\n\t\t}\n\t}\n\n\treturn result;\n}\nexports.typeOf = typeOf;\n\n/*\n * 第一个参数是需要被比较的 Object 对象\n * 从第二个参数开始是一个可变长参数，可以传入任意多字符串参数表达数据类型，\n * 只要其中一个和被比较对象的结果一致，则返回 ture 当全部不符合的时候，返回 false 。\n */\nfunction typeIs(object, ...types) {\n\n\tlet type = typeOf(object);\n\t// let _types = types;\n\n\t// if (arguments.length === 2 && typeof types === String.TYPE_NAME) {\n\t// \treturn type === types;\n\t// } else if (!_isArray(types) && arguments.length > 2) {\n\t// \t_types = Array.prototype.slice.call(arguments, 1);\n\t// }\n\treturn new Set(types).has(type);\n}\nexports.typeIs = typeIs;\n\nconst LOOP_REG_START = \"#{\",\n\tLOOP_REG_END = \"#{/\",\n\tLOOP_IN_START = \"#:{\";\nconst LOOP_REG_START_L = LOOP_REG_START.length;\nconst DEFAULT_PREFIX = \"${\",\n\tDEFAULT_SURFIX = \"}\";\n\nfunction replaceElement(str, obj, prefix = DEFAULT_PREFIX, surfix = DEFAULT_SURFIX) {\n\n\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\n\n\tlet ret = String.BLANK,\n\t\tp1 = 0,\n\t\tp2 = 0;\n\twhile (true) {\n\t\tp1 = str.indexOf(prefix, p2);\n\t\tif (p1 === -1) break;\n\t\tif (p1 > p2) {\n\t\t\tret += str.substring(p2, p1);\n\t\t}\n\t\tp2 = str.indexOf(surfix, p1 + prefix.length);\n\t\tif (p2 === -1) break;\n\t\tlet holder = str.substring(p1 + prefix.length, p2);\n\t\tlet nests = holder.split(Mark.POINT);\n\t\tlet val = obj;\n\t\tfor (let i = 0, length = nests.length; i < length; i++) {\n\t\t\tval = val[nests[i]];\n\t\t\tif (!val) break;\n\t\t}\n\t\tif (null !== val && undefined !== val) {\n\t\t\t// 如果目标对象中不包含请求内容，则清空表达\n\t\t\tret += val;\n\t\t}\n\t\tp2 = p2 + surfix.length;\n\t}\n\tif (p1 === -1) {\n\t\tret += str.substring(p2, str.length);\n\t} else {\n\t\tif (p2 === -1) {\n\t\t\tret += str.substring(p1, str.length);\n\t\t}\n\t}\n\treturn ret;\n}\nreplaceElement.LOOP_REG_START = LOOP_REG_START;\nreplaceElement.LOOP_REG_END = LOOP_REG_END;\nreplaceElement.LOOP_IN_START = LOOP_IN_START;\nreplaceElement.LOOP_REG_START_L = LOOP_REG_START_L;\nreplaceElement.DEFAULT_PREFIX = DEFAULT_PREFIX;\nreplaceElement.DEFAULT_SURFIX = DEFAULT_SURFIX;\n\nexports.replaceElement = replaceElement;\n\n/*\n * [ERR:20170310] 将 nodejs 更新至 v6.10.0 之后有些时候会出现 hasOwnProperty 错误。\n * 错误信息：TypeError: hasOwnProperty is not a function\n * 原因未知。\n * 所以暂时用这种方式来解决问题\n * \n * 一种解释，仅供参考：\n * https://stackoverflow.com/questions/53978067/hasownproperty-is-not-a-function-in-node-js\n */\nfunction hasOwnProperty(obj, keyName) {\n\treturn Object.prototype.hasOwnProperty.call(obj, keyName);\n}\nexports.hasOwnProperty = hasOwnProperty;\n\nfunction instanceTo(instance, type) {\n\n\tlet prototype = type.prototype;\n\n\tif (prototype) {\n\t\tinstance.__proto__ = prototype;\n\t\tinstance.constructor = prototype.constructor;\n\t}\n}\nexports.instanceTo = instanceTo;\n\nconst getFunctionName = exports.getFunctionName = (func) => {\n\n\tlet functionName = String.BLANK;\n\tlet _name = func.name;\n\tif (_name !== undefined) {\n\t\tfunctionName = _name;\n\t} else {\n\t\tlet arr = null,\n\t\t\tstr = func.toString();\n\t\tif (str.charAt(0) === Mark.LEFT_SQUARE_BRACKET) {\n\t\t\tarr = str.match(/\\[\\w+\\s*(\\w+)\\]/);\n\t\t} else {\n\t\t\tarr = str.match(/function\\s*(\\w+)/);\n\t\t}\n\t\tif (arr && arr.length === 2) {\n\t\t\tfunctionName = arr[1];\n\t\t}\n\t}\n\n\treturn functionName;\n}\n\nconst ARG_MARK = \"arg\";\nconst getFunctionDefine = exports.getFunctionDefine = (name, count) => {\n\tlet _d = [];\n\tfor (let i = 0; i < count; i++) {\n\t\t_d.push(ARG_MARK + i);\n\t}\n\n\tlet pars = _d.join();\n\treturn `function ${name}${Mark.LEFT_PARENTHE}${pars}${Mark.RIGHT_PARENTHE}${Mark.SEMICOLON}`;\n}\n\nexports.newInstance = (type, args) => {\n\n\tlet obj = {};\n\tlet ret = type.apply(obj, args);\n\tlet instance = typeIs(ret, Object.TYPE_NAME) ? ret : obj;\n\n\treturn instanceTo(instance, type);\n}\n\nfunction arrayClone(array) {\n\n\tlet output = [];\n\n\tfor (let i = 0, len = array.length; i < len; i++) {\n\t\toutput.push(objectClone(array[i]));\n\t}\n\n\treturn output;\n}\nexports.arrayClone = arrayClone;\n\nfunction objectClone(obj) {\n\n\tif (obj === null || obj === undefined) return obj;\n\tif (obj !== obj) return obj; // NaN\n\tif (typeIs(obj, String.TYPE_NAME, Number.TYPE_NAME, Number.Infinity_TYPE_NAME, \n\t\tBoolean.TYPE_NAME, RegExp.TYPE_NAME, Function.TYPE_NAME)) return obj;\n\tif (obj.clone) return obj.clone();\n\n\tif (_isArray(obj)) {\n\t\treturn arrayClone(obj);\n\t} else {\n\t\tlet another = {};\n\t\tfor (let key in obj) {\n\t\t\tif (hasOwnProperty(obj, key)) {\n\t\t\t\tanother[key] = objectClone(obj[key]);\n\t\t\t}\n\t\t}\n\n\t\t// 将新建对象的原型链关联到旧对象上，保证两者看起来一致\n\t\tinstanceTo(another, getType(obj));\n\n\t\treturn another;\n\t}\n};\nexports.objectClone = objectClone;\n\nfunction Iterator(obj) {\n\tif (obj === null || obj === undefined) noReference();\n\n\tlet isArray = _isArray(obj);\n\tif (!isArray && !typeIs(obj, Object.TYPE_NAME)) unsupportedType(obj);\n\n\tlet keys = keyArray(obj);\n\tlet index = 0,\n\t\tcount = keys.length;\n\n\tthis.hasNext = function () {\n\t\treturn index < count;\n\t};\n\tthis.next = function () {\n\t\tlet key = keys[index++];\n\t\tif (isArray) {\n\t\t\treturn key;\n\t\t} else {\n\t\t\treturn obj[key];\n\t\t}\n\t};\n\tthis.first = function () {\n\t\treturn keys[0];\n\t};\n\tthis.last = function () {\n\t\treturn keys[count - 1];\n\t};\n\tthis[\"goto\"] = function (index) {\n\t\tif (index < 0) {\n\t\t\tindexOutOfBounds(index, 0);\n\t\t}\n\t\tif (index >= count) {\n\t\t\tindexOutOfBounds(index, count);\n\t\t}\n\t};\n\tthis.forward = function (cnt) {\n\t\tlet at = index + cnt;\n\t\tif (at < 0) {\n\t\t\tindexOutOfBounds(at, 0);\n\t\t}\n\t\tif (at >= count) {\n\t\t\tindexOutOfBounds(at, count);\n\t\t}\n\t\tindex = at;\n\t};\n}\n\nexports.Iterator = Iterator;\n\nfunction Constructor(type, name, callback, isFunction) {\n\n\t// 参数个数\n\tlet count = type.length,\n\t\t// 获得定义\n\t\tdefine = getFunctionDefine(name, count);\n\n\tthis.getDefine = function () {\n\t\treturn define;\n\t};\n\tthis.parameterCount = function () {\n\t\treturn count;\n\t};\n\tthis.newInstance = function () {\n\t\tcallback();\n\t\tif (!isFunction) {\n\t\t\treturn newInstance(type, arguments);\n\t\t} else {\n\t\t\treturn new type();\n\t\t}\n\t};\n}\n\n/*\n * 布尔类型 布尔表示一个逻辑实体，可以有两个值： true 和 false 。\n * Null 类型 Null 类型只有一个值： null ，更多详情可查看 null 和Null 。\n * Undefined 类型 ...\n * 数字类型 ...\n * 字符串类型 ...\n * 符号类型 ... \n */\nfunction isPrimitive(type) {\n\treturn (type === String || type === Number || type === Boolean || type === Symbol);\n}\nexports.isPrimitive = isPrimitive;\n\nfunction Type(obj) {\n\n\t// 对象的数据类型\n\tlet type = obj.constructor || Object,\n\t\t// 对象的原型\n\t\tprototype = obj.prototype || Object;\n\n\t// 是否是基本数据类型\n\tlet _isPrimitive = isPrimitive(type),\n\t\t// 是否是接口\n\t\t_isInterface = isInterface(obj),\n\t\t// 是否是数组\n\t\tisArray = _isArray(obj),\n\t\tisFunction = (type === Function),\n\t\t// 是否是字面量对象\n\t\tisLiteral = (type === Object || _isPrimitive || isArray || type === RegExp);\n\n\t// 类型的名字\n\tlet name = getFunctionName(type);\n\n\tfunction constructorCheck() {\n\t\tif (isLiteral || _isPrimitive) {\n\t\t\tthrow new Error(\"请使用字面量来构造对象\");\n\t\t}\n\t\tif (_isInterface) {\n\t\t\tthrow new Error(\"请使用 Coralian.util.Interface 类的 newInterface 方法来构造接口\");\n\t\t}\n\t}\n\n\tthis.getName = function () {\n\t\treturn name;\n\t};\n\tthis.getStatic = type.getStatic;\n\tthis.isLiteral = function () {\n\t\treturn isLiteral;\n\t};\n\tthis.isArray = function () {\n\t\treturn isArray;\n\t};\n\tthis.isInterface = function () {\n\t\treturn _isInterface;\n\t};\n\tthis.isPrimitive = function () {\n\t\treturn isPrimitive;\n\t};\n\tthis.isFunction = function () {\n\t\treturn isFunction;\n\t};\n\t// TODO 这两个到底是个什么还没想好\n\t//\t\t\tthis.invoke = function() {\n\t//\t\t\t\tif (isFunction) {\n\t//\t\t\t\t\treturn type.apply(null, arguments);\n\t//\t\t\t\t} else {\n\t//\t\t\t\t\tunsupportedOperation(typeOf(type) + \"不是函数\");\n\t//\t\t\t\t}\n\t//\t\t\t},\n\tthis.newInstance = function () {\n\t\tconstructorCheck();\n\t\tif (!isFunction) {\n\t\t\treturn newInstance(type);\n\t\t} else {\n\t\t\treturn new type();\n\t\t}\n\t};\n\tthis.getPrototype = function () {\n\t\treturn prototype;\n\t};\n\tthis.typeIs = function () {\n\t\treturn typeIs(obj, arguments);\n\t};\n\tthis.instanceOf = function (classType) {\n\t\treturn type === classType || type instanceof classType;\n\t};\n\tthis.getConstructor = function () {\n\t\treturn new Constructor(type, name, constructorCheck, isFunction);\n\t};\n}\n\nlet getType = exports.getType = (obj) => {\n\treturn new Type(obj);\n}\n\nfunction Interface(name, methods) {\n\tfor (let i = 0, len = methods.length; i < len; i++) {\n\t\tlet method = methods[i];\n\t\tif (!typeIs(method, String.TYPE_NAME)) errorCast(method, String);\n\t}\n\tthis.getName = function () {\n\t\treturn name;\n\t};\n\tthis.iterator = function () {\n\t\treturn new Iterator(methods);\n\t};\n}\n\nfunction newInterface(name, methods) {\n\tif (arguments.length === 1) throw new Error(\"构建接口至少定义一个方法\");\n\n\tif (!Array.isArray(methods)) {\n\t\tmethods = array_slice.call(arguments, 1);\n\t}\n\n\treturn new Interface(name, methods);\n}\n\nfunction isInterface(obj) {\n\treturn obj instanceof Interface;\n}\n\nexports.Interface = {\n\tnewInterface: newInterface,\n\tensureImplements: function (object) {\n\t\tif (arguments.length < 2) throw new Error(\"判定对象是否是实现某接口，必须先提供至少一个被判定的接口\");\n\n\t\tfor (let i = 1, len = arguments.length; i < len; i++) {\n\t\t\tlet target = arguments[i];\n\t\t\tif (!isInterface(target)) errorCast(object, Interface);\n\n\t\t\tlet iterator = target.iterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tlet name = iterator.next();\n\t\t\t\tlet method = object[name];\n\t\t\t\tif (!method || !typeIs(method, Function.TYPE_NAME)) noSuchMethod(name);\n\t\t\t}\n\t\t}\n\t},\n\tisInterface: isInterface,\n\tCollection: newInterface(\"Collection\", // 接口名称\n\t\t[\"add\", // add 方法，添加元素\n\t\t\t\"clear\", // clear 方法，清空元素\n\t\t\t\"exists\", // exists 方法，判断元素是否存在于集合中\n\t\t\t\"existsAll\", // existsAll 方法，判断元素集合是否都存在于集合中\n\t\t\t\"equals\", // equals 方法，判断元素是否和集合是否相同，由各个实现类各自实现具体需求\n\t\t\t\"isEmpty\", // isEmpty 方法，判断集合是否为空\n\t\t\t\"remove\", // remove 方法，删除某个指定的元素\n\t\t\t\"size\", // size 方法，获得集合的大小（元素个数）\n\t\t\t\"toArray\" // toArray 方法，将集合转化成数组\n\t\t])\n}\n\nexports.isNumber = (number, notation) => {\n\n\tif (number !== number) return false;\n\n\tnotation = notation || 10;\n\n\tif (notation === 16 && !String.startsWith((number).toString().toLowerCase(), \"0x\")) {\n\t\tnumber = \"0x\" + number;\n\t}\n\n\treturn isFinite(number);\n}\n\nexports.formatString = (str, ...obj) => {\n\n\tif (!obj) unsupportedOperation(\"至少需要一个字符来进行替换\");\n\n\tif (Object.TYPE_NAME === typeOf(obj[0])) {\n\t\tstr = replaceElement(str, obj[0]);\n\t} else {\n\t\tObject.forEach(obj, function (i, e) {\n\t\t\tstr = str.replace(/\\%s/, e);\n\t\t});\n\t}\n\n\treturn str;\n}\n\nconst side = typeof (window) !== Object.UNDEFINED_TYPE_NAME; // 设置端点，side = true 客户端 side = false 服务端\nexports.side = side;\n\nconst SIDE_ONLY_FMT_STR = \"只能在%s中使该功能用\";\nexports.browserOnly = () => {\n\tif (!side) throw new Error(formatString(SIDE_ONLY_FMT_STR, \"浏览器\"));\n}\n\nexports.serverOnly = () => {\n\tif (side) throw new Error(formatString(SIDE_ONLY_FMT_STR, \"服务端\"));\n}\n\n//# sourceURL=webpack://coralian/./src/base/common.js?");

/***/ }),

/***/ "./src/base/others.js":
/*!****************************!*\
  !*** ./src/base/others.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { hasOwnProperty, getFunctionName, getFunctionDefine, getType, isNumber } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\nconst { errorCast, unsupportedType, noReference } = Error;\n\n/* ==================== Date 的扩展 ==================== */\nDate.toJSON = Date.toString = function (date) {\n\n\treturn date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate() + \" \" + date.getHours() + \":\" +\n\t\tdate.getMinutes() + \":\" + date.getSeconds();\n};\nDate.clone = function (date) {\n\tif (!(date instanceof Date)) {\n\t\terrorCast(date, Date);\n\t}\n\tlet another = new Date(date.getTime());\n\treturn another;\n};\n/* ==================== Date 的扩展 ==================== */\n/* ==================== Number 的扩展 ==================== */\nif (!Number.isNumber) {\n\tNumber.isNumber = isNumber;\n}\n\nNumber.equals = function (num1, num2) {\n\n\tif (!isNumber(num1)) unsupportedType(num1);\n\tif (!isNumber(num2)) unsupportedType(num2);\n\n\treturn num1 == num2;\n};\nNumber.from = (obj) => {\n\tif (!isNumber(obj)) return NaN;\n\n\treturn Number(obj);\n\t// return (obj).toString();\n};\n/* ==================== Number 的扩展 ==================== */\n/* ==================== Function 的扩展 ==================== */\nif (!Function.getName) {\n\tFunction.getName = getFunctionName;\n}\n\nif (!Function.EMPTY_BODY) {\n\tObject.defineProperty(Function, \"EMPTY_BODY\", {\n\t\tvalue: () => { },\n\t\twritable: false\n\t});\n}\n\nif (!Function.getStatic) {\n\tFunction.getStatic = (func) => {\n\n\t\tlet statics = {};\n\n\t\tfor (let k in func) {\n\t\t\tif (hasOwnProperty(func, k)) {\n\t\t\t\tstatics[k] = func[k];\n\t\t\t}\n\t\t}\n\t\treturn Object.isEmpty(statics) ? undefined : statics;\n\t}\n}\n\nFunction.getDefine = (func) => {\n\treturn getFunctionDefine(getFunctionName(func), func.count);\n};\n/* ==================== Function 的扩展 ==================== */\n/* ==================== Map 的扩展 ==================== */\n/* ==================== Map 的扩展 ==================== */\nif (!Map.isEmpty) {\n\tMap.isEmpty = function (map) {\n\t\treturn map.size === 0;\n\t}\n}\nif (!Map.equals) {\n\tMap.equals = collectionIsSame;\n}\n/* ==================== Set 的扩展 ==================== */\nif (!Set.isEmpty) {\n\tSet.isEmpty = (set) => {\n\t\treturn set.size === 0;\n\t};\n}\nif (!Set.equals) {\n\tSet.equals = collectionIsSame;\n}\n/* ==================== Set 的扩展 ==================== */\nfunction collectionIsSame(c1, c2) {\n\n\tif (c1 === c2) return true;\n\tif (Function.getName(getType(c1)) !== Function.getName(getType(c2))) return false;\n\tif (c1.size !== c2.size) return false;\n\n\tlet c1Iter = c1[Symbol.iterator]();\n\tlet c2Iter = c2[Symbol.iterator]();\n\n}\n\n//# sourceURL=webpack://coralian/./src/base/others.js?");

/***/ }),

/***/ "./src/base sync recursive ^\\.\\/.*$":
/*!*********************************!*\
  !*** ./src/base/ sync ^\.\/.*$ ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./Array\": \"./src/base/Array.js\",\n\t\"./Array.js\": \"./src/base/Array.js\",\n\t\"./Error\": \"./src/base/Error.js\",\n\t\"./Error.js\": \"./src/base/Error.js\",\n\t\"./Object\": \"./src/base/Object.js\",\n\t\"./Object.js\": \"./src/base/Object.js\",\n\t\"./String\": \"./src/base/String.js\",\n\t\"./String.js\": \"./src/base/String.js\",\n\t\"./common\": \"./src/base/common.js\",\n\t\"./common.js\": \"./src/base/common.js\",\n\t\"./others\": \"./src/base/others.js\",\n\t\"./others.js\": \"./src/base/others.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src/base sync recursive ^\\\\.\\\\/.*$\";\n\n//# sourceURL=webpack://coralian/./src/base/_sync_^\\.\\/.*$?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"/\";\n/**\n * 自定义函数集/类库\n * <p>\n * 主要实现两个功能 <br />\n * 1.针对 JS 自身的不足，补足相关功能、添加部分数据类型 <br />\n * 设计方针基本符合《 JavaScript 语言精粹 》中的要求 <br />\n * &nbsp;&nbsp;&nbsp;&nbsp;不同的是因为要设计一些数据类型（Map、Set、Interface、Collection、XmlWrapper）等<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;所以保留了对 new 关键字的使用<br />\n * 2.简单化功能封装 <br />\n * &nbsp;&nbsp;&nbsp;&nbsp;包括对一些 JS 中不尽人意的地方进行了封装，或者重新写了一些相适用的方法 / 函数集合\n * </p>\n * 所有实现均为对 ECMAScript 的扩展，不包含任何 window、document 操作<br />\n * 适用浏览器\n * <ul>\n * <li>Firefox</li>\n * <li>Chrome</li>\n * <li>Opera</li>\n * <li>Edge</li>\n * </ul>\n */\n\n/*\n * 这些属于 JS 的基本类库扩展，不用导入Coralian命名空间\n */\nconst lib = {};\nconst { side, typeOf, typeIs, browserOnly, serverOnly } = __webpack_require__(/*! ./base/common */ \"./src/base/common.js\");\nconst { noReference, unsupportedType } = Error;\n\nlet that = null, // 定义 全局变量 that，node 中等价于 global 浏览器中等价于 window\n\tn_eval = null; // 将 eval 函数的指针赋值给本地局部变量（暂时不知道能干嘛，保留指针）\n\n/*\n * 因为服务端（Nodejs）和客户端（浏览器）有不一样的地方 所以这里分别为服务端和客户端添加载入 Coralian\n * 库所必需的函数或者一些方便调试的函数 通过 try... catch 块来分别执行 服务端和 客户端所需要加载的内容\n */\nif (side) {\n\tthat = window; // 初始化客户端\n\tthat.global = window;\n\n\t// 如果客户端没有实现 console.log 则用 window.alert 来代为实现相关功能\n\tif (!window.console) {\n\t\tthat.cosole = {\n\t\t\tlog: that.alert,\n\t\t\terr: that.alert,\n\t\t\twarn: that.alert\n\t\t};\n\t} else if (!window.console.log) {\n\t\tthat.console.log = that.alert\n\t}\n\n\t// 前端借用 webpack 的 require.context 函数进行自动挂载文件\n\tconst base = __webpack_require__(\"./src/base sync recursive ^\\\\.\\\\/.*$\");\n\tbase.keys().forEach(key => {\n\t\tbase(key);\n\t});\n\tconst _lib = __webpack_require__(\"./src/lib sync recursive ^\\\\.\\\\/.*$\");\n\t_lib.keys().forEach(key => {\n\t\t/^\\.\\/(((?!\\.js).)+)?(.js)?$/.test(key);\n\t\tif (!lib[RegExp.$1]) {\n\t\t\tlib[key.replace(\"./\", \"\")] = _lib(key);\n\t\t}\n\t});\n\n} else {\n\tthat = __webpack_require__.g;\n\tthat.alert = function (msg) {\n\t\tif (String.contains(msg, Error.TYPE_NAME)) {\n\t\t\tconsole.log(new Error());\n\t\t}\n\t\tconsole.log(msg);\n\t};\n\n\t// 后端采用 nodejs 的 fs 模块进行文件挂载\n\ttry { // 套 try catch 的目的时因为前端打包时可能找不到 fs 模块\n\t\tconst fs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\t\tconst base = fs.readdirSync(`${__dirname}/base`);\n\t\tbase.map((file) => {\n\t\t\tfile = file.split(\".\")[0];\n\t\t\t__webpack_require__(\"./src/base sync recursive ^\\\\.\\\\/.*$\")(`./${file}`);\n\t\t});\n\t\tconst _lib = fs.readdirSync(`${__dirname}/lib`);\n\t\t_lib.map((file) => {\n\t\t\tfile = file.split(\".\")[0];\n\t\t\tlib[file] = __webpack_require__(\"./src/lib sync recursive ^\\\\.\\\\/.*$\")(`./${file}`);\n\t\t});\n\t} finally {\n\t}\n}\n\n// 将 typeOf 和 typeIs 分别添加到全局对象\nthat.typeOf = typeOf;\nthat.typeIs = typeIs;\n\nfunction setToGlobal(parent, pkg, obj) {\n\n\tlet name = pkg[0];\n\tif (pkg.length > 1) {\n\t\tlet sub = parent[name];\n\t\tif (!sub) {\n\t\t\tsub = parent[name] = {};\n\t\t}\n\t\tsetToGlobal(sub, pkg.slice(1), obj);\n\t} else {\n\t\tparent[name] = obj;\n\t}\n}\n\nconst Coralian = {\n\tABOUT: 'Coralian',\n\tVERSION: '0.0.22',\n\tHOMEPAGE: 'http://codes.waygc.net/project/?coralian',\n\tAUTHOR: 'hzwaygc@gmail.com',\n\tside: function () {\n\t\treturn side;\n\t},\n\t/*\n\t * 下面两个方法是用来描述作用环境的\n\t * 如果判断执行环境非作用环境，则抛出异常。\n\t */\n\tbrowserOnly: browserOnly,\n\tserverOnly: serverOnly,\n\t/*\n\t * 这组函数主要是用来实现将对象设置到 global 中用\n\t * 和计划的解耦客户-服务端的不同方式，自己调用一个函数就可以的目的有些不同\n\t * 这里更希望能实现一个类似 Java Class.forName 这样的一个功能\n\t */\n\tsetToGlobal: function (name, obj) {\n\n\t\tif (obj === null || obj === undefined) noReference();\n\t\tif (!typeIs(name, String.TYPE_NAME)) unsupportedType(name);\n\t\tif (String.isEmpty(name)) throw new Error(\"不能使用空字符串作为属性名\");\n\n\t\tsetToGlobal(that, name.split(\".\"), obj);\n\t},\n\texports: function (name, obj) {\n\t\tsetExports(that, name, obj);\n\t}\n};\n\nObject.assign(Coralian, lib);\n\nthat.Coralian = Coralian;\n\n//# sourceURL=webpack://coralian/./src/index.js?");

/***/ }),

/***/ "./src/lib/Calendar.js":
/*!*****************************!*\
  !*** ./src/lib/Calendar.js ***!
  \*****************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { hasOwnProperty, formatString } = __webpack_require__(/*! ./../base/common */ \"./src/base/common.js\");\nconst { unsupportedType, unsupportedOperation, errorCast } = Error;\nconst { isNumber } = Number;\n\n// 一天的毫秒数\nconst ONE_DAY_MILLISECONDS = 24 * 3600 * 1000;\n// 默认对时间进行格式化\nconst DEFAULT_DT_FORMAT = \"YYYY-MM-DD hh:mm:ss\";\n\n// 中文的周几\nconst LONG_CHINESE_WEEK = [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n\tSHORT_CHINESE_WEEK = [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"];\n// 地支\nconst EARTHLY_BRANCH = [\"子\", \"丑\", \"寅\", \"卯\", \"辰\", \"巳\", \"午\", \"未\", \"申\", \"酉\", \"戌\", \"亥\"];\n// 天干\nconst CELESTIAL_STEM = [\"甲\", \"乙\", \"丙\", \"丁\", \"戊\", \"己\", \"庚\", \"辛\", \"壬\", \"癸\"];\n// 生肖\nconst CHINESE_ZODIAC = [\"鼠\", \"牛\", \"虎\", \"兔\", \"龙\", \"蛇\", \"马\", \"羊\", \"猴\", \"鸡\", \"狗\", \"猪\"];\nconst SEXAGENARY_CYCLE_FIRST = 4; // 公元 4年 甲子年\n// 英文的周几\nconst ENGLISH_WEEK = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n// 中文的几月\nconst CHINESE_MONTH = [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"];\n// 英文的几月\nconst ENGLISH_MONTH = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Augst\", \"September\",\n\t\"October\", \"November\", \"December\"\n];\n// 一个月有几天\nconst MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst CHINESE_CALANER = [\"zh\", \"xq\", \"yue\", \"nian\"],\n\tONE_COUNT = [\"M\", \"D\", \"h\", \"m\", \"s\"];\nconst TEN = 10,\n\tTWELVE = 12,\n\tTHIRTY = 30,\n\tSEVEN = 7,\n\tTWENTY_NINE = 29,\n\tTHIRTH_ONE = 31;\n\nfunction formatTime(date, format) {\n\tif (!(date instanceof Date)) {\n\t\terrorCast(date, Date);\n\t}\n\tformat = format || DEFAULT_DT_FORMAT;\n\tvar tmpMonth = date.getMonth();\n\tvar tmpDay = date.getDay();\n\tvar o = {\n\t\t\"(YY)+\": date.getFullYear(),\n\t\t\"M+\": (tmpMonth + 1), // month\n\t\t\"yue\": CHINESE_MONTH[tmpMonth],\n\t\t\"month\": ENGLISH_MONTH[tmpMonth],\n\t\t\"mon\": ENGLISH_MONTH[tmpMonth].slice(0, 3),\n\t\t\"D+\": date.getDate(), // day\n\t\t\"h+\": date.getHours(), // hour\n\t\t\"m+\": date.getMinutes(), // minute\n\t\t\"s+\": date.getSeconds(), // second\n\t\t\"ms\": date.getMilliseconds(), // millisecond\n\t\t\"zh\": SHORT_CHINESE_WEEK[tmpDay],\n\t\t\"xq\": LONG_CHINESE_WEEK[tmpDay],\n\t\t\"w\": ENGLISH_WEEK[tmpDay].slice(0, 3),\n\t\t\"week\": ENGLISH_WEEK[tmpDay]\n\t};\n\n\tfor (let k in o) {\n\t\tif (hasOwnProperty(o, k)) {\n\n\t\t\tlet regExp = new RegExp(\"(\" + k + \")\");\n\t\t\tif (regExp.test(format)) {\n\t\t\t\tlet regxVal = format.match(regExp)[0];\n\t\t\t\tlet val = o[k];\n\t\t\t\tif (Array.has(CHINESE_CALANER, k)) {\n\t\t\t\t\tformat = format.replace(regxVal, val);\n\t\t\t\t} else {\n\t\t\t\t\tif (!Array.has(ONE_COUNT, RegExp.$1) && val < 10) {\n\t\t\t\t\t\tval = \"0\" + val;\n\t\t\t\t\t}\n\t\t\t\t\tformat = format.replace(regxVal, val);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn format;\n}\n\nfunction instanceTime(arg, format) {\n\tif (!arg) {\n\t\treturn new Date();\n\t} else if (arg instanceof Date) {\n\t\treturn arg;\n\t} else if (isNumber(arg)) {\n\t\tlet _date = new Date();\n\t\tformat = format || 8;\n\t\tswitch (format) {\n\t\t\tcase 0:\n\t\t\t\t_date.setFullYear(arg);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t_data.setYear(arg);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t_data.setMonth(parseInt(arg) - 1);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t_data.setDate(arg);\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t_date.setYear(parseInt(arg / 10000));\n\t\t\t\t_date.setMonth(parseInt(arg / 100) % 100 - 1);\n\t\t\t\t_date.setDate(arg % 100);\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t_date.setFullYear(parseInt(arg / 10000));\n\t\t\t\t_date.setMonth(parseInt(arg / 100) % 100 - 1);\n\t\t\t\t_date.setDate(arg % 100);\n\t\t\t\tbreak;\n\t\t\tcase 16:\n\t\t\t\t_date.setTime(arg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunsupportedOperation(\"所选择的格式化参数不正确\");\n\t\t}\n\t\treturn _date;\n\t} else {\n\t\tunsupportedType(arg);\n\t}\n}\n\nfunction isLeapYear(year) {\n\treturn (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0));\n}\n\nfunction checkMonthIsValid(month) {\n\tif (!isNumber(month)) errorCast(month, Number);\n\tif (month < 1 || 12 < month) unsupportedOperation(month + \" 不是一个合法的月份\");\n}\n\nfunction checkYearIsValid(year) {\n\tif (!isNumber(year)) errorCast(year, Number);\n}\n\nfunction getMonthDays(year, month) {\n\n\tvar _isLeapYear = isLeapYear(year);\n\n\treturn (month === 1 && _isLeapYear) ? TWENTY_NINE : MONTH_DAYS[month];\n}\n\nmodule.exports = exports = {\n\t/**\n\t * 得到一定时间内的日历（公历表示，农历暂时不考虑）\n\t * 得到一个二维表格，每行为7 第一天之前留空，最后剩余留空\n\t * \n\t * 示例效果如下：\n\t * [ [null, null, 1, 2, 3, 4, 5],\n\t * [6, 7, 8, 9, 10, 11, 12],\n\t * [13, 14, 15, 16, 17, 18, 19],\n\t * [20, 21, 22, 23, 24, 25, 26],\n\t * [27, 28, 29, 30, null, null, null] ]\n\t * \n\t * 本函数只有两种重载：\n\t *  1 参数指定：year，month，得到 year 年 month 月的月历\n\t *  2 无参，得到当前月的月历\n\t */\n\tmonthly: function (year, month) {\n\n\t\tvar date = year;\n\t\tif (year instanceof Date) {\n\t\t\tmonth = year.getMonth();\n\t\t\tyear = year.getFullYear();\n\t\t} else {\n\t\t\tif (year) {\n\t\t\t\tcheckYearIsValid(year);\n\t\t\t}\n\t\t\tif (month) {\n\t\t\t\tcheckMonthIsValid(month);\n\t\t\t\tmonth -= 1;\n\t\t\t}\n\t\t\tdate = new Date();\n\t\t\tif (year) {\n\t\t\t\tdate.setYear(year);\n\t\t\t}\n\t\t\tif (month) {\n\t\t\t\tdate.setMonth(month);\n\t\t\t}\n\t\t}\n\t\tdate.setDate(1); // 月历固定每个月1号\n\t\tvar weekDay = date.getDay();\n\n\t\tvar days = 0,\n\t\t\tresult = [],\n\t\t\tmonthDays = getMonthDays(year, month);\n\n\t\twhile (true) {\n\t\t\tif (days >= monthDays) break;\n\t\t\tlet week = [null, null, null, null, null, null, null];\n\t\t\tfor (let i = weekDay; i < 7; i++) {\n\t\t\t\tif (++days <= monthDays) {\n\t\t\t\t\tweek[i] = days;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tweekDay = 0;\n\t\t\tresult.push(week);\n\t\t}\n\n\t\treturn result;\n\t},\n\t/*\n\t * today 代表目标日期，如果没有这个参数默认取“今天” week\n\t * 代表要取的下一个星期几，如果没有这个参数默认取下一个星期天\n\t */\n\tnextWeekDay: function (week, today) {\n\t\tvar now = new Date();\n\t\tif (today) {\n\t\t\tnow.setDate(today);\n\t\t}\n\t\tweek = 7 - (week || now.getDay());\n\n\t\treturn new Date(now.getTime() + ONE_DAY_MILLISECONDS * week);\n\t},\n\t// 返回被格式化之后的当前时间\n\tgetTime: function (time, format) {\n\t\tif (time && !typeIs(time, Number.TYPE_NAME)) {\n\t\t\ttime = parseInt(time);\n\t\t}\n\t\treturn formatTime(instanceTime(time, 16), format);\n\t},\n\tformatTime: formatTime,\n\tinstanceTime: instanceTime,\n\tisLeapYear: function (year) {\n\n\t\tif (!isNumber(year)) {\n\t\t\terrorCast(year, Number);\n\t\t}\n\n\t\treturn isLeapYear(year);\n\t},\n\tgetMonthDays: function (year, month) {\n\n\t\tcheckYearIsValid(year);\n\t\tcheckMonthIsValid(month);\n\n\t\treturn getMonthDays(year, month);\n\t},\n\tgetWeekDay: function (time, format) {\n\t\treturn formatString(instanceTime(time, format || 16));\n\t},\n\t// 获得农历表示法\n\tChineseCalendar: {\n\t\tgetChineseZodiac: function (year) {\n\t\t\tcheckYearIsValid(year);\n\t\t\treturn CHINESE_ZODIAC[(year - CHINESE_SEXAGENARY_CYCLE_FIRST) % TWELVE];\n\t\t},\n\t\tgetCelestialStem: function (year) {\n\t\t\tcheckYearIsValid(year);\n\t\t\tvar stem = CELESTIAL_STEM[(year - SEXAGENARY_CYCLE_FIRST) % TEN] +\n\t\t\t\tEARTHLY_BRANCH[(year - SEXAGENARY_CYCLE_FIRST) % TWELVE];\n\n\t\t\treturn stem;\n\t\t},\n\t\t/*\n\t\t * 农历年表示法暂时不支持\n\t\t */\n\t\tgetSpringFestival: function (year) {\n\t\t\t// checkYearIsValid(year);\n\t\t\tunsupportedOperation(\"暂不支持农历年表示法\");\n\t\t},\n\t\tgetMonthlyCalendar: function (year) {\n\t\t\t// checkYearIsValid(year);\n\t\t\tunsupportedOperation(\"暂不支持农历年表示法\");\n\n\t\t}\n\t}\n};\n\nObject.defineProperty(exports, \"YYYY\", ({\n\tvalue: 0,\n\twritable: false\n}));\nObject.defineProperty(exports, \"YY\", ({\n\tvalue: 1,\n\twritable: false\n}));\nObject.defineProperty(exports, \"Month\", ({\n\tvalue: 2,\n\twritable: false\n}));\nObject.defineProperty(exports, \"Date\", ({\n\tvalue: 4,\n\twritable: false\n}));\nObject.defineProperty(exports, \"YYMMDD\", ({\n\tvalue: 6,\n\twritable: false\n}));\nObject.defineProperty(exports, \"YYYYMMDD\", ({\n\tvalue: 8,\n\twritable: false\n}));\nObject.defineProperty(exports, \"MILLISECOND\", ({\n\tvalue: 16,\n\twritable: false\n}));\nObject.defineProperty(exports, \"ONE_DAY_MILLISECONDS\", ({\n\tvalue: ONE_DAY_MILLISECONDS,\n\twritable: false\n}));\nObject.defineProperty(exports, \"CHINESE_MONTH\", ({\n\tvalue: CHINESE_MONTH,\n\twritable: false\n}));\nObject.defineProperty(exports, \"ENGLISH_WEEK\", ({\n\tvalue: ENGLISH_WEEK,\n\twritable: false\n}));\nObject.defineProperty(exports, \"SHORT_ENGLISH_WEEK\", ({\n\tvalue: function () {\n\t\tvar ew = [];\n\t\tfor (let i = 0, len = ENGLISH_WEEK.length; i < len; i++) {\n\t\t\tew[i] = ENGLISH_WEEK[i].slice(0, 3);\n\t\t}\n\t\treturn ew;\n\t},\n\twritable: false\n}));\nObject.defineProperty(exports, \"LONG_CHINESE_WEEK\", ({\n\tvalue: LONG_CHINESE_WEEK,\n\twritable: false\n}));\nObject.defineProperty(exports, \"SHORT_CHINESE_WEEK\", ({\n\tvalue: SHORT_CHINESE_WEEK,\n\twritable: false\n}));\nObject.defineProperty(exports, \"ENGLISH_MONTH\", ({\n\tvalue: ENGLISH_MONTH,\n\twritable: false\n}));\nObject.defineProperty(exports, \"SHORT_ENGLISH_MONTH\", ({\n\tvalue: function () {\n\t\tvar em = [];\n\t\tfor (let i = 0, len = ENGLISH_MONTH.length; i < len; i++) {\n\t\t\tem[i] = ENGLISH_MONTH[i].slice(0, 3);\n\t\t}\n\t\treturn em;\n\t},\n\twritable: false\n}));\n\n//# sourceURL=webpack://coralian/./src/lib/Calendar.js?");

/***/ }),

/***/ "./src/lib/Formatter.js":
/*!******************************!*\
  !*** ./src/lib/Formatter.js ***!
  \******************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { Mark } = __webpack_require__(/*! ./constants */ \"./src/lib/constants.js\");\n\nfunction formatNumber(number) {\n\n\t// 目前只实现保留两位小数\n\tnumber = (number).toString().split(Mark.POINT);\n\n\tvar after = number[1];\n\tif (after && after.length > 2) {\n\t\tlet last = parseInt(after[2]);\n\t\tafter = parseInt(after.slice(0, 2));\n\t\tif (last > 4) {\n\t\t\tafter += 1;\n\t\t}\n\t}\n\tnumber = number[0] + Mark.POINT + (after || 0);\n\n\treturn number;\n}\n\nconst DEFAULT_FORMAT_TYPE = \"#.00\";\n\nmodule.exports = exports = {\n\tformatNumber: formatNumber,\n\tformatFileSize: function (size, type) {\n\t\tvar formated;\n\t\ttype = type || DEFAULT_FORMAT_TYPE;\n\t\tif (size < 1048576) {\n\t\t\tformated = formatNumber(size / 1024, type) + \" KB\";\n\t\t} else if (size < 1073741824) {\n\t\t\tformated = formatNumber(size / 1048576, type) + \" MB\";\n\t\t} else if (size < 1099511627776) {\n\t\t\tformated = formatNumber(size / 1073741824, type) + \" GB\";\n\t\t} else {\n\t\t\tformated = formatNumber(size / 1099511627776, type) + \" TB\";\n\t\t}\n\t\treturn formated;\n\t},\n\tformatString:  __webpack_require__(/*! ./../base/common */ \"./src/base/common.js\").formatString\n};\n\n\n//# sourceURL=webpack://coralian/./src/lib/Formatter.js?");

/***/ }),

/***/ "./src/lib/Random.js":
/*!***************************!*\
  !*** ./src/lib/Random.js ***!
  \***************************/
/***/ ((module, exports) => {

eval("const ALL_CASE = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst UPPER_CASE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst LOWER_CASE = \"abcdefghijklmnopqrstuvwxyz\";\nconst NUMBER = \"1234567890\";\nconst RAND_CODES = ALL_CASE + NUMBER;\n\nfunction getRand(type, length) {\n\n\tvar key = [],\n\t\ttimes = type.length;\n\tfor (let i = 0; i < length; i++) {\n\t\tkey[i] = type[parseInt(Math.random() * times)];\n\t}\n\n\treturn key.join(EMPTY_STRING);\n}\n\nmodule.exports = exports = {\n\tgetRandCode: function (length) {\n\t\treturn getRand(RAND_CODES, length);\n\t},\n\trandAllCase: function (length) {\n\t\treturn getRand(ALL_CASE, length);\n\t},\n\trandUpperCase: function (length) {\n\t\treturn getRand(UPPER_CASE, length);\n\t},\n\trandLowerCase: function (length) {\n\t\treturn getRand(LOWER_CASE, length);\n\t},\n\trandNumber: function (length) {\n\t\tlength = length || 16;\n\t\tif (length > 16) {\n\t\t\tthrow new Error(\"最多只能获取不超过 16 位的整数\");\n\t\t} else {\n\t\t\treturn parseInt(Math.random() * Math.pow(10, length));\n\t\t}\n\t},\n\trandNumberAndLetter: function (length) {\n\t\tvar key = [],\n\t\t\tcases, num;\n\t\tswitch (arguments[1]) {\n\t\t\tcase 0:\n\t\t\t\tcases = ALL_CASE + NUMBER;\n\t\t\t\tnum = 62;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tcases = UPPER_CASE + NUMBER;\n\t\t\t\tnum = 36;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcases = LOWER_CASE + NUMBER;\n\t\t\t\tnum = 36;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tkey[i] = cases[parseInt(Math.random() * num)];\n\t\t}\n\t\treturn key;\n\t},\n\tALL_CASE: 0,\n\tUPPER_CASE: 1,\n\tLOWER_CASE: 2\n};\n\n//# sourceURL=webpack://coralian/./src/lib/Random.js?");

/***/ }),

/***/ "./src/lib/ReplaceHolder.js":
/*!**********************************!*\
  !*** ./src/lib/ReplaceHolder.js ***!
  \**********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const replaceElement = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\").replaceElement;\nconst { LOOP_REG_START, LOOP_REG_END, LOOP_IN_START, DEFAULT_SURFIX, LOOP_REG_START_L } = replaceElement;\nconst { Mark, XmlEntity, CharCode, RegxType } = __webpack_require__(/*! ./constants */ \"./src/lib/constants.js\");\n\nconst HTML_NEW_LINE = \"<br />\";\n\nfunction replaceLoop(str, objs, callback) {\n\tvar result = [];\n\twhile (true) {\n\t\tlet index = str.indexOf(LOOP_REG_START);\n\t\tif (index > 0) {\n\t\t\tresult.push(str.slice(0, index));\n\t\t\tstr = str.slice(index);\n\t\t} else if (index < 0) {\n\t\t\tresult.push(str);\n\t\t\tbreak;\n\t\t}\n\t\tlet firstEnd = str.indexOf(DEFAULT_SURFIX),\n\t\t\taction = str.slice(LOOP_REG_START_L, firstEnd);\n\t\tvar end = LOOP_REG_END + action + DEFAULT_SURFIX;\n\t\tlet inStr = str.slice(firstEnd + 1, str.indexOf(end));\n\t\tlet obj = objs,\n\t\t\ttmpAction = action.split(Mark.POINT);\n\t\tfor (let i = 0, len = tmpAction.length; i < len; i++) {\n\t\t\tif (!obj) break;\n\t\t\tobj = obj[tmpAction[i]];\n\t\t}\n\n\t\tif (obj !== null && obj !== undefined) {\n\t\t\tlet isArr = Array.isArray(obj);\n\t\t\tlet keys = isArr ? obj : Object.keys(obj);\n\t\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\t\tlet o = obj[isArr ? i : keys[i]];\n\t\t\t\tlet loopStr = inStr; // 定义循环所使用的变量\n\t\t\t\tloopStr = loopStr.replace(new RegExp(`${LOOP_IN_START}id}`, RegxType.GLOBAL), i);\n\t\t\t\tloopStr = loopStr.replace(new RegExp(`${LOOP_IN_START}key}`,RegxType.GLOBAL), keys[i]);\n\t\t\t\tif (String.TYPE_NAME === typeof o) {\n\t\t\t\t\tresult.push(loopStr.replace(new RegExp(`${LOOP_IN_START}text}`, RegxType.GLOBAL), keys[i]));\n\t\t\t\t} else {\n\t\t\t\t\t// 递归查找子循环\n\t\t\t\t\tloopStr = replaceLoop(loopStr, o);\n\t\t\t\t\t// 替换内部元素\n\t\t\t\t\tloopStr = replaceElement(loopStr, o, `${LOOP_IN_START}${action}${Mark.POINT}`);\n\t\t\t\t\tloopStr = callback(loopStr, o, `${action}${Mark.POINT}`);\n\t\t\t\t\tresult.push(loopStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstr = str.slice(str.indexOf(end) + end.length);\n\t}\n\n\treturn result.join(String.BLANK);\n}\n\nmodule.exports = exports = {\n\treplaceElement: replaceElement,\n\treplaceLoop: replaceLoop,\n\t/*\n\t * html 替换器\n\t */\n\thtmlEscape: function (str, aspect) {\n\n\t\tstr = str.replace(/\\&/g,  XmlEntity.AMP);\n\n\t\tvar first, second, third, forth;\n\t\tif (aspect) {\n\t\t\tfirst = aspect.first;\n\t\t\tsecond = aspect.second;\n\t\t\tthird = aspect.third;\n\t\t\tforth = aspect.forth;\n\t\t}\n\n\t\tstr = (!!first) ? first(str) : str;\n\n\t\tstr = str.replace(/  /ig, `${Mark.SPACE}${XmlEntity.SPACE}`);\n\t\tstr = str.replace(/\\t/ig, `${XmlEntity.SPACE}${XmlEntity.SPACE}${XmlEntity.SPACE}${XmlEntity.SPACE}${CharCode.ZERO_WIDTH}`); // 制表符这么写主要是为了满足表现形式和制表符相同（不会换行）\n\n\t\tstr = (!!second) ? second(str) : str;\n\n\t\tstr = str.replace(/</ig, XmlEntity.LEFT_ANGLE);\n\t\tstr = str.replace(/>/ig, XmlEntity.RIGHT_ANGLE);\n\n\t\tstr = (!!third) ? third(str) : str;\n\n\t\tstr = str.replace(/(\\r\\n|\\n|\\r)/ig, HTML_NEW_LINE);\n\n\t\tstr = (!!forth) ? forth(str) : str;\n\n\t\treturn str;\n\t}\n};\n\n//# sourceURL=webpack://coralian/./src/lib/ReplaceHolder.js?");

/***/ }),

/***/ "./src/lib/Validator.js":
/*!******************************!*\
  !*** ./src/lib/Validator.js ***!
  \******************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { Mark } = __webpack_require__(/*! ./constants */ \"./src/lib/constants.js\");\n\nconst UPPER_CASE = /[A-Z]/,\n\tLOWER_CASE = /[a-z]/,\n\tNUMBER = /[0-9]/,\n\tMARKS = /[\\@#\\$\\%\\&\\*\\!\\^\\+\\=\\-_\\~:\\;\\,\\.\\?]/;\n\nfunction passwordCheckError(msg, id) {\n\tvar e = new Error(msg);\n\te.id = id || \"password\";\n\n\tthrow e;\n}\n\nfunction isValidPassword(password) {\n\n\tif (String.isEmpty(password)) {\n\t\tpasswordCheckError(\"密码不能为空\");\n\t}\n\n\t/*\n\t * 密码校验必须符合以下两项规则\n\t * 1. 长度必须 >= 6 位\n\t */\n\tif (password.length < 6) {\n\t\tpasswordCheckError(\"密码长度最少 6 位\");\n\t}\n\n\t/*\n\t * 2. 必须包含大小写字母、数字、特殊字符（@#$%&*!^+=-_~:;,.?，不再左列中，以及不是字母、数字的字符被视为非法字符）中的三项\n\t *  大写字母 小写字母 数字 特殊字符\n\t *  0000 X 0\n\t *  0001 X 1\n\t *  0010 X 2\n\t *  0011 X 3\n\t *  0100 X 4\n\t *  0101 X 5\n\t *  0110 X 6\n\t *  0111 O 7\n\t *  1000 X 8\n\t *  1001 X 9\n\t *  1010 X 10\n\t *  1011 O 11\n\t *  1100 X 12\n\t *  1101 O 13\n\t *  1110 O 14\n\t *  1111 O 15\n\t */\n\tvar point = 0;\n\tif (UPPER_CASE.test(password)) {\n\t\tpoint += 8;\n\t}\n\tif (LOWER_CASE.test(password)) {\n\t\tpoint += 4;\n\t}\n\tif (NUMBER.test(password)) {\n\t\tpoint += 2;\n\t}\n\tif (MARKS.test(password)) {\n\t\tpoint += 1;\n\t}\n\tif (point < 13 && point !== 7 && point !== 11) {\n\t\treturn passwordCheckError(\"密码至少要包含大写字母、小写字母、数字或特殊字符中的三项\");\n\t}\n}\n\nmodule.exports = exports = {\n\tisValidPassword: isValidPassword,\n\t// 校验身份证号\n\t// 来源：https://segmentfault.com/a/1190000010452673\n\tisValidIdNumber: function (id) {\n\n\t\t// 1 \"验证通过!\", 0 //校验不通过\n\t\tvar format = /^(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5])|([7][1])|([8][1-2]))\\d{4}(([1][9]\\d{2})|([2]\\d{3}))(([0][1-9])|([1][0-2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))\\d{3}[0-9xX]$/;\n\t\t//号码规则校验\n\t\tif (!format.test(id)) return false;\n\n\t\t//区位码校验\n\t\t//出生年月日校验   前正则限制起始年份为1900;\n\t\tvar year = id.substr(6, 4),//身份证年\n\t\t\tmonth = id.substr(10, 2),//身份证月\n\t\t\tdate = id.substr(12, 2),//身份证日\n\t\t\ttime = Date.parse(`${month}${Mark.HYPHEN}${date}${Mark.HYPHEN}${year}`),//身份证日期时间戳date\n\t\t\tnowTime = Date.parse(new Date()),//当前时间戳\n\t\t\tdates = (new Date(year, month, 0)).getDate();//身份证当月天数\n\t\tif (time > nowTime || date > dates) return false;\n\n\t\t//校验码判断\n\t\tvar c = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);   //系数\n\t\tvar b = new Array(\"1\", \"0\", \"X\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\");  //校验码对照表\n\t\tvar id_array = id.split(String.BLANK);\n\t\tvar sum = 0;\n\t\tfor (var k = 0; k < 17; k++) {\n\t\t\tsum += parseInt(id_array[k]) * parseInt(c[k]);\n\t\t}\n\n\t\treturn id_array[17].toUpperCase() === b[sum % 11].toUpperCase();\n\t},\n\tisValidMPhone: function (mphone) {\n\t\treturn /^[1](([3][0-9])|([4][5-9])|([5][0-3,5-9])|([6][5,6])|([7][0-8])|([8][0-9])|([9][1,8,9]))[0-9]{8}$/.test(mphone);\n\t}\n};\n\n//# sourceURL=webpack://coralian/./src/lib/Validator.js?");

/***/ }),

/***/ "./src/lib/constants.js":
/*!******************************!*\
  !*** ./src/lib/constants.js ***!
  \******************************/
/***/ ((module, exports) => {

eval("/*\n * 定义所有的常量\n */\nconst DELETE = \"delete\";\n\nmodule.exports = exports = {\n\tRegxType: {\n\t\tGLOBAL: \"g\",\n\t\tIGNORE_CASE: \"i\",\n\t\tFORCE: \"f\",\n\t\tMUTLI_LINE: \"m\"\n\t},\n\tXmlEntity: {\n\t\tLEFT_ANGLE: \"&lt;\", // <\n\t\tRIGHT_ANGLE: \"&gt;\",  // >\n\t\tAMP: \"&amp;\", // &\n\t\tQUOT: \"&quot;\", // \"\n\t\tAPOS: \"&apos;\", // \"\n\t\tSHARP: \"&#35;\", // #\n\t\tSPACE: \"&nbsp;\"\n\t},\n\tCharCode: {\n\t\tZERO_WIDTH: \"\\uFEFF\",\n\t\tZERO: 0x0030,\n\t\tNINE: 0x0039,\n\t\t// 大写字母字母的 ASCII 编号\n\t\tUPPER_A: 0x0041,\n\t\tUPPER_Z: 0x005A,\n\t\tUPPER_F: 0x0046,\n\t\t// 小写字母字母的 ASCII 编号\n\t\tLOWER_A: 0x0061,\n\t\tLOWER_Z: 0x007A,\n\t\tLOWER_F: 0x0066,\n\t\t// 特殊符号的 ASCII 编号\n\t\tUNDERBAR: 0x005F, // _\n\t\tDOLLAR: 0x0024, // $\n\t},\n\tMark: {\n\t\tQUESTION: \"?\",\n\t\tSPACE_REGX: /\\s/, // 标准空白\n\t\tSPACE: \" \", // 标准空白\n\t\tTAB: \"\\t\",\n\t\tDQUOTE: \"\\\"\",\n\t\tQUOTE: \"'\",\n\t\tUNDER_SOURCE: \"_\",\n\t\tGRAVE_ACCENT: \"`\",\n\t\tSLASH: \"/\",\n\t\tASTERISK: \"*\",\n\t\tNEW_LINE: \"\\n\",\n\t\tAT: \"@\",\n\t\tAND: \"&\",\n\t\tSHARP: \"#\",\n\t\tCOMMA: \",\",\n\t\tSEMICOLON: \";\",\n\t\tCOLON: \":\",\n\t\tLEFT_BRACKET: \"{\",\n\t\tRIGHT_BRACKET: \"}\",\n\t\tLEFT_SQUARE_BRACKET: \"[\",\n\t\tRIGHT_SQUARE_BRACKET: \"]\",\n\t\tLEFT_PARENTHE: \"(\",\n\t\tRIGHT_PARENTHE: \")\",\n\t\tPOINT: \".\",\n\t\tHYPHEN: \"-\",\n\t\tEQUALS: \"=\",\n\t\tTILDE: \"~\",\n\t\tEXCALMATORY: \"!\",\n\t\tLEFT_ANGLE: \"<\",\n\t\tRIGHT_ANGLE: \">\"\n\t},\n\tMimeType: {\n\t\t// application\n\t\tJSON: \"application/json\",\n\t\tPDF: \"application/pdf\",\n\t\tJAVASCRIPT: \"application/javascript\",\n\t\tOCTET_STREAM: \"application/octet-stream\",\n\t\tDTD: \"application/xml-dtd\",\n\t\tZIP: \"application/zip\",\n\t\t// text\n\t\tTEXT: \"text/plain\",\n\t\tHTML: \"text/html\",\n\t\tXML: \"text/xml\",\n\t\tCSS: \"text/css\",\n\t\tCSV: \"text/csv\",\n\t\t// image\n\t\tGIF: \"image/gif\",\n\t\tPNG: \"image/png\",\n\t\tJPG: \"image/jpeg\",\n\t\tBMP: \"image/bmp\",\n\t\tWEBP: \"image/webp\",\n\t\tICON: \"image/x-icon\",\n\t\tSVG: \"image/svg+xml\"\n\t},\n\tHttpRequestMethod: {\n\t\tGET: \"GET\",\n\t\tPUT: \"PUT\",\n\t\tPOST: \"POST\",\n\t\tDELETE: DELETE.toUpperCase(),\n\t\tCONNECT: \"CONNECT\",\n\t\tHEAD: \"HEAD\",\n\t\tOPTIONS: \"OPTIONS\",\n\t\tTRACE: \"TRACE\",\n\t\tPATCH: \"PATCH\"\n\t},\n\tHttpStatusCode: {\n\t\tCONTINUE: 100,\n\t\tSWITCHING_PROTOCOLS: 101,\n\t\tPROCESSING: 102,\n\t\tOK: 200,\n\t\tCREATED: 201,\n\t\tACCEPTED: 202,\n\t\tNON_AUTHORITATIVE_INFORMATION: 203,\n\t\tNO_CONTENT: 204,\n\t\tRESET_CONTENT: 205,\n\t\tPARTIAL_CONTENT: 206,\n\t\tMULTI_STATUS: 207,\n\t\tALREADY_REPORTED: 208,\n\t\tIM_USED: 226,\n\t\tMULTIPLE_CHOICES: 300,\n\t\tMOVED_PERMANENTLY: 301,\n\t\tFOUND: 302,\n\t\tSEE_OTHER: 303,\n\t\tNOT_MODIFIED: 304,\n\t\tUSE_PROXY: 305,\n\t\tTEMPORARY_REDIRECT: 307,\n\t\tPERMANENT_REDIRECT: 308,\n\t\tBAD_REQUEST: 400,\n\t\tUNAUTHORIZED: 401,\n\t\tPAYMENT_REQUIRED: 402,\n\t\tFORBIDDEN: 403,\n\t\tNOT_FOUND: 404,\n\t\tMETHOD_NOT_ALLOWED: 405,\n\t\tNOT_ACCEPTABLE: 406,\n\t\tPROXY_AUTHENTICATION_REQUIRED: 407,\n\t\tREQUEST_TIMEOUT: 408,\n\t\tCONFLICT: 409,\n\t\tGONE: 410,\n\t\tLENGTH_REQUIRED: 411,\n\t\tPRECONDITION_FAILED: 412,\n\t\tPAYLOAD_TOO_LARGE: 413,\n\t\tURI_TOO_LONG: 414,\n\t\tUNSUPPORTED_MEDIA_TYPE: 415,\n\t\tRANGE_NOT_SATISFIABLE: 416,\n\t\tEXPECTATION_FAILED: 417,\n\t\tI_AM_A_TEAPOT: 418,\n\t\tMISDIRECTED_REQUEST: 421,\n\t\tUNPROCESSABLE_ENTITY: 422,\n\t\tLOCKED: 423,\n\t\tFAILED_DEPENDENCY: 424,\n\t\tUNORDERED_COLLECTION: 425,\n\t\tUPGRADE_REQUIRED: 426,\n\t\tPRECONDITION_REQUIRED: 428,\n\t\tTOO_MANY_REQUESTS: 429,\n\t\tREQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n\t\tUNAVAILABLE_FOR_LEGAL_REASONS: 451,\n\t\tINTERNAL_SERVER_ERROR: 500,\n\t\tNOT_IMPLEMENTED: 501,\n\t\tBAD_GATEWAY: 502,\n\t\tSERVICE_UNAVAILABLE: 503,\n\t\tGATEWAY_TIMEOUT: 504,\n\t\tHTTP_VERSION_NOT_SUPPORTED: 505,\n\t\tVARIANT_ALSO_NEGOTIATES: 506,\n\t\tINSUFFICIENT_STORAGE: 507,\n\t\tLOOP_DETECTED: 508,\n\t\tBANDWIDTH_LIMIT_EXCEEDED: 509,\n\t\tNOT_EXTENDED: 510,\n\t\tNETWORK_AUTHENTICATION_REQUIRED: 511\n\t},\n\tNumberNonation: {\n\t\tHEX: 16,\n\t\tDEC: 10,\n\t\tOCT: 8,\n\t\tBIN: 2\n\t},\n\tHtmlTagAttribute: {\n\t\tinput: {\n\t\t\tBUTTON: \"button\",\n\t\t\tCHECKBOX: \"checkbox\",\n\t\t\tCOLOR: \"color\",\n\t\t\tDATE: \"date\",\n\t\t\tDATETIME_LOCAL: \"datetime-local\",\n\t\t\tEMAIL: \"email\",\n\t\t\tFILE: \"file\",\n\t\t\tHIDDEN: \"hidden\",\n\t\t\tIMAGE: \"image\",\n\t\t\tMONTH: \"month\",\n\t\t\tNUMBER: Number.TYPE_NAME,\n\t\t\tPASSWORD: \"password\",\n\t\t\tRADIO: \"radio\",\n\t\t\tRANGE: \"range\",\n\t\t\tRESET: \"reset\",\n\t\t\tSEARCH: \"search\",\n\t\t\tSUBMIT: \"submit\",\n\t\t\tTEL: \"tel\",\n\t\t\tTEXT: \"text\",\n\t\t\tTIME: \"time\",\n\t\t\tURL: \"url\",\n\t\t\tWEEK: \"week\",\n\t\t}\n\t},\n\tHtmlTag: {\n\t\tA: \"a\",\n\t\tABBR: \"abbr\",\n\t\tACRONYM: \"acronym\",\n\t\tADDRESS: \"address\",\n\t\tAPPLET: \"applet\",\n\t\tAREA: \"area\",\n\t\tARTICLE: \"article\",\n\t\tASIDE: \"aside\",\n\t\tAUDIO: \"audio\",\n\t\tB: \"b\",\n\t\tBASE: \"base\",\n\t\tBASEFONT: \"basefont\",\n\t\tBDI: \"bdi\",\n\t\tBDO: \"bdo\",\n\t\tBIG: \"big\",\n\t\tBLOCKQUOTE: \"blockquote\",\n\t\tBODY: \"body\",\n\t\tBR: \"br\",\n\t\tBUTTON: \"button\",\n\t\tCANVAS: \"canvas\",\n\t\tCAPTION: \"caption\",\n\t\tCENTER: \"center\",\n\t\tCITE: \"cite\",\n\t\tCODE: \"code\",\n\t\tCOL: \"col\",\n\t\tCOLGROUP: \"colgroup\",\n\t\tCOMMAND: \"command\",\n\t\tDATALIST: \"datalist\",\n\t\tDD: \"dd\",\n\t\tDEL: \"del\",\n\t\tDETAILS: \"details\",\n\t\tDFN: \"dfn\",\n\t\tDIALOG: \"dialog\",\n\t\tDIR: \"dir\",\n\t\tDIV: \"div\",\n\t\tDL: \"dl\",\n\t\tDT: \"dt\",\n\t\tEM: \"em\",\n\t\tEMBED: \"embed\",\n\t\tFIELDSET: \"fieldset\",\n\t\tFIGCAPTION: \"figcaption\",\n\t\tFIGURE: \"figure\",\n\t\tFONT: \"font\",\n\t\tFOOTER: \"footer\",\n\t\tFORM: \"form\",\n\t\tFRAME: \"frame\",\n\t\tFRAMESET: \"frameset\",\n\t\tH1: \"h1\",\n\t\tH2: \"h2\",\n\t\tH3: \"h3\",\n\t\tH4: \"h4\",\n\t\tH5: \"h5\",\n\t\tH6: \"h6\",\n\t\tHEAD: \"head\",\n\t\tHEADER: \"header\",\n\t\tHR: \"hr\",\n\t\tHTML: \"html\",\n\t\tI: \"i\",\n\t\tIFRAME: \"iframe\",\n\t\tIMG: \"img\",\n\t\tINPUT: \"input\",\n\t\tINS: \"ins\",\n\t\tKBD: \"kbd\",\n\t\tKEYGEN: \"keygen\",\n\t\tLABEL: \"label\",\n\t\tLEGEND: \"legend\",\n\t\tLI: \"li\",\n\t\tLINK: \"link\",\n\t\tMAP: \"map\",\n\t\tMARK: \"mark\",\n\t\tMENU: \"menu\",\n\t\tMETA: \"meta\",\n\t\tMETER: \"meter\",\n\t\tNAV: \"nav\",\n\t\tNOFRAMES: \"noframes\",\n\t\tNOSCRIPT: \"noscript\",\n\t\tOBJECT: Object.TYPE_NAME,\n\t\tOL: \"ol\",\n\t\tOPTGROUP: \"optgroup\",\n\t\tOPTION: \"option\",\n\t\tOUTPUT: \"output\",\n\t\tP: \"p\",\n\t\tPARAM: \"param\",\n\t\tPRE: \"pre\",\n\t\tPROGRESS: \"progress\",\n\t\tQ: \"q\",\n\t\tRP: \"rp\",\n\t\tRT: \"rt\",\n\t\tRUBY: \"ruby\",\n\t\tS: \"s\",\n\t\tSAMP: \"samp\",\n\t\tSCRIPT: \"script\",\n\t\tSECTION: \"section\",\n\t\tSELECT: \"select\",\n\t\tSMALL: \"small\",\n\t\tSOURCE: \"source\",\n\t\tSPAN: \"span\",\n\t\tSTRIKE: \"strike\",\n\t\tSTRONG: \"strong\",\n\t\tSTYLE: \"style\",\n\t\tSUB: \"sub\",\n\t\tSUMMARY: \"summary\",\n\t\tSUP: \"sup\",\n\t\tTABLE: \"table\",\n\t\tTBODY: \"tbody\",\n\t\tTD: \"td\",\n\t\tTEXTAREA: \"textarea\",\n\t\tTFOOT: \"tfoot\",\n\t\tTH: \"th\",\n\t\tTHEAD: \"thead\",\n\t\tTIME: \"time\",\n\t\tTITLE: \"title\",\n\t\tTR: \"tr\",\n\t\tTRACK: \"track\",\n\t\tTT: \"tt\",\n\t\tU: \"u\",\n\t\tUL: \"ul\",\n\t\tVAR: \"var\",\n\t\tVIDEO: \"video\",\n\t\tWBR: \"wbr\"\n\t}\n};\n\n//# sourceURL=webpack://coralian/./src/lib/constants.js?");

/***/ }),

/***/ "./src/lib/dom.js":
/*!************************!*\
  !*** ./src/lib/dom.js ***!
  \************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { browserOnly, hasOwnProperty } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\nconst { unsupportedType, indexOutOfBounds, errorCast } = Error;\nconst EMPTY_STRING = String.BLANK;\nconst { Mark, HtmlTag } = __webpack_require__(/*! ./constants */ \"./src/lib/constants.js\");\n// 标签\nconst START_START_TAG = Mark.LEFT_ANGLE,\n\tSTART_END_TAG = `${Mark.LEFT_ANGLE}${Mark.SLASH}`,\n\tEND_TAG = Mark.RIGHT_ANGLE,\n\tENMPTY_END_TAG = ` ${Mark.SLASH}${Mark.RIGHT_ANGLE}`;\n\n// 包括 img 在内没有回标签的标签集合\nconst NO_BODY_TAG = [HtmlTag.IMG, HtmlTag.INPUT, HtmlTag.BR, HtmlTag.HR, HtmlTag.TITLE];\n// 不能再在标签内部添加同名标签\nconst NOT_SAME_TAG = [\n\t// HTML 体标签\n\tHtmlTag.HTML, HtmlTag.HEAD, HtmlTag.TITLE, HtmlTag.BODY,\n\t// 其他标签\n\t, HtmlTag.A, HtmlTag.I, HtmlTag.B, HtmlTag.DEL, HtmlTag.U, HtmlTag.STRIKE\n];\nconst ABEND_TAG = [HtmlTag.SCRIPT];\nconst KEY_NAME = new Map();\nKEY_NAME.set(\"class\", \"className\");\n\nfunction getKeyName(key) {\n\treturn KEY_NAME.has(key) ? KEY_NAME.get(key) : key;\n}\n\nfunction XmlWrapper(tag, attribute, xmlType) {\n\n\tlet _hashcode = \"$=!\" + (2388 / Math.random() + Math.sin(Date.now()));\n\n\tif (!tag || !typeIs(tag, String.TYPE_NAME)) throw new Error(\"只有非空文本能作为标签\");\n\tif (Array.has(ABEND_TAG, tag)) throw new Error(\"不允许使用 XmlWrapper 来动态构建 \" + tag + \" 元素\");\n\n\tlet attrs;\n\tif (attribute instanceof Map) {\n\t\tattrs = attribute;\n\t} else {\n\t\tattrs = new Map();\n\t\tif (attribute) {\n\t\t\tObject.forEach(attribute, function (key, value) {\n\t\t\t\tattrs.set(key, value);\n\t\t\t})\n\t\t}\n\t}\n\tvar tIndex = 0,\n\t\tnIndex = 0, // 这两个数字不对外公开使用\n\t\tchildren = [],\n\t\tparent = null;\n\n\tthis.add = function (element, parse) {\n\n\t\tif (!tag) {\n\t\t\tchildren.push({\n\t\t\t\tindex: tIndex++,\n\t\t\t\ttype: String,\n\t\t\t\tparse: (parse === undefined) ? true : parse\n\t\t\t})\n\t\t}\n\n\t\tif (Array.has(NO_BODY_TAG, tag)) throw new Error(\"不能向当前标签（\" + tag + \"）内无法添加元素\");\n\n\t\tif (element instanceof XmlWrapper) {\n\t\t\tif (Array.has(NOT_SAME_TAG, tag) && tag === element.getTag()) throw new Error(\"当前 XML 节点的标签（\" + tag + \"）中不被允许储存同名子节点\");\n\n\t\t\tchildren.push({\n\t\t\t\tindex: nIndex++,\n\t\t\t\ttype: XmlWrapper,\n\t\t\t\telement: element\n\t\t\t});\n\t\t\telement.setParent(this);\n\t\t} else if (typeIs(element, String.TYPE_NAME)) {\n\n\t\t\tchildren.push({\n\t\t\t\tindex: tIndex++,\n\t\t\t\ttype: String,\n\t\t\t\telement: element,\n\t\t\t\tparse: (parse === undefined) ? true : parse\n\t\t\t});\n\t\t} else {\n\t\t\tunsupportedType(element);\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.clear = function () {\n\n\t\tthis.clearChildren();\n\t\tattrs.clear();\n\t\tparent = null;\n\t};\n\n\tthis.clearChildren = function () {\n\t\tnIndex = 0;\n\t\ttIndex = 0;\n\t\tchildren = [];\n\t};\n\n\tthis.nodeCount = function (tagName) {\n\t\tif (!tagName) return nIndex;\n\n\t\tvar count = 0;\n\t\tObject.forEach(children, function (i, element) {\n\t\t\tif (element.type === XmlWrapper &&\n\t\t\t\telement.element.getTag() === tagName) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\treturn count;\n\t};\n\n\tthis.isEmpty = function () {\n\t\treturn Object.isEmpty(children);\n\t};\n\n\t/*\n\t * xml = true html = false\n\t */\n\tthis.setXmlType = function (type) {\n\t\txmlType = type;\n\t};\n\tthis.setParent = function (p) {\n\t\tparent = p;\n\t};\n\tthis.getParent = function () {\n\t\treturn parent;\n\t};\n\n\tthis.isRoot = function () {\n\t\treturn parent == null;\n\t};\n\n\tthis.getElement = function (index) {\n\t\treturn children[index];\n\t};\n\n\tthis.getText = function (index) {\n\t\tif (isNumber(index)) {\n\t\t\tif (index < tIndex) {\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\n\t\t\t\t\tlet element = children[i];\n\t\t\t\t\tif (String === element.type && element.index === index) {\n\t\t\t\t\t\treturn element.element;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tindexOutOfBounds(tIndex, index);\n\t\t\t}\n\t\t} else {\n\t\t\terrorCast(index, Number);\n\t\t}\n\t};\n\n\tthis.getTexts = function () {\n\t\tvar results = [];\n\t\tfor (let i = 0, len = children.length; i < len; i++) {\n\t\t\tlet element = children[i];\n\t\t\tif (String === element.type) {\n\t\t\t\tresults.push(element.element);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t};\n\n\tthis.hashCode = function () {\n\t\treturn _hashcode;\n\t};\n\n\tthis.getNode = function (index, tagName) {\n\t\tif (tagName) {\n\t\t\tif (index < nIndex) {\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\n\t\t\t\t\tlet element = children[i];\n\t\t\t\t\tlet node = element.element;\n\t\t\t\t\tif (element.type === XmlWrapper && index === element.index && node.getTag() === tagName) {\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tindexOutOfBounds(nIndex, index);\n\t\t\t}\n\t\t} else if (Number.isNumber(index)) {\n\t\t\tif (index < nIndex) {\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\n\t\t\t\t\tlet element = children[i];\n\t\t\t\t\tif (element.type === XmlWrapper && index === element.index) {\n\t\t\t\t\t\treturn element.element;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tindexOutOfBounds(nIndex, index);\n\t\t\t}\n\t\t} else {\n\t\t\terrorCast(index, Number);\n\t\t}\n\t\treturn null;\n\t};\n\n\tthis.lastNode = function (tagName) {\n\t\tif (tagName) {\n\t\t\tif (typeIs(tagName, String.TYPE_NAME)) {\n\t\t\t\tfor (let i = children.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet element = children[i];\n\t\t\t\t\tlet node = element.element;\n\t\t\t\t\tif (element.type === XmlWrapper && node.getTag() === tagName) {\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terrorCast(tagName, String);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = children.length - 1; i >= 0; i--) {\n\t\t\t\tlet element = children[i];\n\t\t\t\tif (element.type === XmlWrapper) {\n\t\t\t\t\treturn element.element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\tthis.getNodes = function (tagName) {\n\n\t\tlet results = [];\n\n\t\tif (tagName) {\n\t\t\tif (typeIs(tagName, String.TYPE_NAME)) {\n\t\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\n\t\t\t\t\tlet element = children[i];\n\t\t\t\t\tlet node = element.element;\n\t\t\t\t\tif (element.type === XmlWrapper && node.getTag() === tagName) {\n\t\t\t\t\t\tresults.push(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terrorCast(tagName, String);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\n\t\t\t\tlet element = children[i];\n\t\t\t\tif (element.type === XmlWrapper) {\n\t\t\t\t\tresults.push(element.element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t};\n\n\tthis.size = function () {\n\t\treturn children.length;\n\t};\n\n\tthis.update = function (index, element) {\n\n\t\tif (!Number.isNumber(index)) errorCast(index, Number);\n\n\t\tvar type = typeof element;\n\t\tif ((String.TYPE_NAME !== type) && !(element instanceof XmlWrapper)) unsupportedType(element);\n\n\t\tvar len = children.length;\n\t\tif (index >= len) indexOutOfBounds(index, len);\n\n\t\tvar old = children[index];\n\n\t\tif (type === typeof old.element) {\n\t\t\told.element = element;\n\t\t\treturn;\n\t\t}\n\t\told.element = element;\n\n\t\tvar isFirst = true;\n\t\tfor (index += 1; index < len; index++) {\n\t\t\tlet tmp = children[index];\n\t\t\tif (type === typeof tmp.element) {\n\t\t\t\tif (isFirst) {\n\t\t\t\t\told.index = tmp.index;\n\t\t\t\t\tisFirst = false;\n\t\t\t\t}\n\t\t\t\ttmp.index++;\n\t\t\t} else {\n\t\t\t\ttmp.index--;\n\t\t\t}\n\t\t}\n\t\tif (String.TYPE_NAME === type) {\n\t\t\tnIndex++;\n\t\t\ttIndex--;\n\t\t} else {\n\t\t\ttIndex++;\n\t\t\tnIndex--;\n\t\t}\n\t};\n\n\tthis.compare = function (another) {\n\t\tif (this === another) return true;\n\t\tif (!(another instanceof Map)) return false;\n\t\tif (tag !== another.getTag()) return false;\n\n\t\tfor (let [key, val] of attrs.entries()) {\n\t\t\tvar aVal = another.get(key);\n\t\t\tif (typeof val !== typeof aVal) return false;\n\t\t\tif (val !== aVal && // 字符串形式的文本节点或引用同一片内存空间\n\t\t\t\t!val.compare(aVal)) // 元素节点\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tthis.on = function (name, func) {\n\t\tbrowserOnly();\n\t}\n\n\t/*\n\t * 将保存的对象渲染为一个dom结构\n\t * 不同于 toString 转变为字符串，这个输出的 dom 结构是可以修改的，并且可以直接插入到 HTML 之中\n\t */\n\tthis.render = function () {\n\n\t\tbrowserOnly();\n\n\t\tlet element = document.createElement(tag);\n\n\t\tattrs.forEach(function (val, key) {\n\t\t\telement[getKeyName(key)] = val;\n\t\t});\n\n\t\tObject.forEach(children, function (i, node) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase String:\n\t\t\t\t\tif (node.parse) {\n\t\t\t\t\t\telement.appendChild(document.createTextNode(node.element));\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.innerHTML = node.element;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlWrapper:\n\t\t\t\t\telement.appendChild(node.element.render());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tunsupportedType(node.type);\n\t\t\t}\n\t\t});\n\n\t\treturn element;\n\t}\n\n\tthis.remove = function (index, count, type, tag) {\n\n\t\tvar len = children.length;\n\t\tif (index < 0 || index >= len) indexOutOfBounds(index, 0);\n\n\t\tvar last = index + count;\n\t\tif (len <= last) indexOutOfBounds(last, len);\n\n\t\tvar removed = [];\n\t\tvar nRemoved = 0,\n\t\t\ttRevmoed = 0;\n\n\t\tfor (let i = index; i < last; i++) {\n\n\t\t\tlet element = children[i];\n\t\t\tswitch (element.type) {\n\t\t\t\tcase String:\n\t\t\t\t\tif (type === String.TYPE_NAME) {\n\t\t\t\t\t\ttRemoved++;\n\t\t\t\t\t\tremoved.push(element.element);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlWrapper:\n\t\t\t\t\tif (type === \"node\") {\n\t\t\t\t\t\tif (!!tag && element.element.getTag() === tag) {\n\t\t\t\t\t\t\tremoved.push(element.element);\n\t\t\t\t\t\t\tnRemoved++;\n\t\t\t\t\t\t} else if (!tag) {\n\t\t\t\t\t\t\tremoved.push(element.element);\n\t\t\t\t\t\t\tnRemoved++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tunsupportedType(element.type);\n\t\t\t}\n\n\t\t}\n\t\ttIndex -= tRevmoed;\n\t\tnIndex -= nRevmoed;\n\n\t\tfor (let i = last; i < len; i++) {\n\t\t\tlet element = children[i];\n\t\t\tswitch (element.type) {\n\t\t\t\tcase String:\n\t\t\t\t\telement.index -= tRevmoed;\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlWrapper:\n\t\t\t\t\telement.index -= nRevmoed;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tunsupportedType(element.type);\n\t\t\t}\n\t\t}\n\n\t\treturn removed;\n\t};\n\tthis.putAttribute = function (key, val) {\n\t\tattrs.set(key, val);\n\t};\n\tthis.putAllAttributes = function (obj) {\n\t\tObject.forEach(obj, function (key, val) {\n\t\t\tattrs.set(key, val);\n\t\t})\n\t};\n\tthis.removeAttribute = function (key) {\n\t\treturn attrs[\"delete\"](key);\n\t};\n\tthis.getAttribute = function (key) {\n\t\treturn attrs.get(key);\n\t};\n\tthis.containsAttribute = function (key) {\n\t\treturn attrs.has(key);\n\t};\n\n\tthis.getTag = function () {\n\t\treturn tag;\n\t};\n\tthis.toString = this.toHTML = function () {\n\n\t\tvar xml = [START_START_TAG, tag];\n\t\tattrs.forEach(function (val, key) {\n\t\t\txml.push(Mark.SPACE + key + `${Mark.EQUALS}${Mark.DQUOTE}` + attrs.get(key) + Mark.DQUOTE);\n\t\t});\n\n\t\tvar len = children.length;\n\t\tif (len === 0) {\n\t\t\tif (xmlType) {\n\t\t\t\txml.push(ENMPTY_END_TAG);\n\t\t\t} else {\n\t\t\t\tif (Array.has(NO_BODY_TAG, tag)) {\n\t\t\t\t\txml.push(ENMPTY_END_TAG);\n\t\t\t\t} else {\n\t\t\t\t\txml.push(END_TAG + START_END_TAG + tag + END_TAG);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\txml.push(END_TAG);\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\txml.push(children[i].element.toString());\n\t\t\t}\n\t\t\txml.push(START_END_TAG + tag + END_TAG);\n\t\t}\n\t\treturn xml.join(EMPTY_STRING);\n\t};\n}\n\n/**\n * 通过制定格式的 JSON 对象创建一个 HTML 格式的 JSON：\n * [{ tag : 'div', attribute : {\n * 'class' : 'class_name' }, child : [ 'text', { tag : 'div', child : [\n * 'div_text', { tag : 'input', attribute : { type : 'text' } } ] } ] }, {\n * tag : 'p', attribute : { id : 'idname' }, child : [ { tag :\n * 'span', child : [ 'spantext' ] } ] } ]\n * \n * 说明： tag : 制定要创建的 HTML 节点的 tag attribute : HTML 节点的属性 child\n * ：HTML节点的子元素（文本与子节点均通过 child 来表示）\n */\nfunction jsonToHTML(json) {\n\tif (!Array.isArray(json)) {\n\t\tunsupportedType(json);\n\t}\n\tvar result = [];\n\tfor (let i = 0, len = json.length; i < len; i++) {\n\t\tlet obj = json[i];\n\t\tif (!typeIs(obj, Object.TYPE_NAME)) {\n\t\t\tresult.push((obj).toString());\n\t\t} else {\n\t\t\tlet xml = new XmlWrapper(obj.tag, obj.attribute);\n\t\t\tlet child = obj.child;\n\t\t\tif (child) {\n\t\t\t\tif (typeIs(child, String.TYPE_NAME)) {\n\t\t\t\t\txml.add(child);\n\t\t\t\t} else {\n\t\t\t\t\tvar children = jsonToHTML(child);\n\t\t\t\t\tfor (let j = 0, cLen = children.length; j < cLen; j++) {\n\t\t\t\t\t\txml.add(children[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.push(xml);\n\t\t}\n\t}\n\treturn result.join(String.BLANK);\n}\n\n// String -> XmlWrapper\nfunction parse(input) {\n\n}\n\n/**\n * 将任意格式的 JSON 对象转换为一个 XML 字符串（不是 HTML）\n */\nfunction jsonToXml(json, rootTag) {\n\n\tif (!typeIs(json, Object.TYPE_NAME, Array.TYPE_NAME, String.TYPE_NAME, Number.TYPE_NAME)) unsupportedType(json);\n\n\tvar root = new XmlWrapper(rootTag || \"root\");\n\troot.setXmlType(true);\n\tif (typeOf(json, String.TYPE_NAME)) {\n\t\troot.add(json);\n\t} else {\n\t\tfor (let name in json) {\n\t\t\tif (hasOwnProperty(json, item)) {\n\t\t\t\tlet item = json[name];\n\t\t\t\troot.add(jsonToXml(item, name));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn root;\n}\n\nmodule.exports = exports = {\n\tnewXmlWrapper: function (t, a, x) {\n\t\treturn new XmlWrapper(t, a, x);\n\t},\n\tisXmlWrapper: function (obj) {\n\t\treturn obj instanceof XmlWrapper;\n\t},\n\tjsonToHTML: jsonToHTML,\n\tjsonToXml: jsonToXml,\n\t/*\n\t * 目前尚未实现该功能\n\t */\n\t// parse : parse,\n\t// xmlToJSON : xmlToJSON\n\tXML: false,\n\tHTML: true\n};\n\n//# sourceURL=webpack://coralian/./src/lib/dom.js?");

/***/ }),

/***/ "./src/lib/logger.js":
/*!***************************!*\
  !*** ./src/lib/logger.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n * Coralian.logger 只实现最基本的日志记录功能，\n * 以及对日志进行最基本的格式化功能\n */\nconst Calendar = __webpack_require__(/*! ./Calendar */ \"./src/lib/Calendar.js\");\nconst formatString = __webpack_require__(/*! ./../base/common */ \"./src/base/common.js\").formatString;\n\nconst INFO = 'INFO',\n\tERROR = 'ERROR',\n\tWARN = 'WARN';\n\nconst STRING_FORMAT = \"[${date}] ${level} ${message}\";\nconst TIME_FORMAT = \"YYYY-MM-DD hh:mm:ss.ms\";\n\nfunction format(level, message) {\n\treturn formatString(STRING_FORMAT, {\n\t\tdate: Calendar.formatTime(new Date(), TIME_FORMAT),\n\t\tlevel: level,\n\t\tmessage: message\n\t});\n}\n\nexports.log = exports.ingo = (str) => {\n\tconsole.log(format(INFO, str));\n};\nexports.err = (err) => {\n\tconsole.error(err.message)\n\tconsole.error(format(ERROR, err.stack));\n};\nexports.warn = (str) => {\n\tconsole.warn(format(WARN, str));\n};\n\n//# sourceURL=webpack://coralian/./src/lib/logger.js?");

/***/ }),

/***/ "./src/lib/util.js":
/*!*************************!*\
  !*** ./src/lib/util.js ***!
  \*************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { hasOwnProperty, Interface, Iterator, objectClone, getType } = __webpack_require__(/*! ../base/common */ \"./src/base/common.js\");\nconst { unsupportedOperation, unsupportedType, errorCast, illegalArguments } = Error;\nconst { Mark } = __webpack_require__(/*! ./constants */ \"./src/lib/constants.js\");\n\nconst StringUtil = {\n\tnormal: function (input) {\n\t\treturn input.replace(/<(\\/)?(b|i|strike|em|u|strong|sub|sup)>/ig, EMPTY_STRING);\n\t},\n\tweight: function (tag) {\n\t\treturn \"<\" + tag + \">\" + input + \"</\" + tag + \">\";\n\t},\n\tundersourceToCamel: (str, type = false) => {\n\t\tif (String.contains(str, Mark.UNDER_SOURCE)) {\n\t\t\tlet result = [];\n\t\t\tlet arr = str.split(Mark.UNDER_SOURCE);\n\t\t\tlet start = type ? 1 : 0; // 驼峰是大驼峰还是小驼峰\n\t\t\tfor (let i = start, len = arr.length; i < len; i++) {\n\t\t\t\tresult.push(StringUtil.firstToUpperCase(arr[i].toLowerCase()));\n\t\t\t}\n\t\t\treturn result.join(String.BLANK);\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t},\n\tqueryString: function (obj) {\n\n\t\tif (typeIs(obj, String.TYPE_NAME)) {\n\t\t\treturn encodeURI(obj);\n\t\t}\n\n\t\tvar string = [];\n\t\tfor (var key in obj) {\n\t\t\tif (hasOwnProperty(obj, key)) {\n\t\t\t\t// 这里 encodeURIComponent 是因为 nodejs 端才这么写，其他服务器语言可能用不着\n\t\t\t\t// JSON.stringify 这句是因为可能存在包含对象类型的数据\n\t\t\t\tif (typeIs(obj[key], Object.TYPE_NAME)) {\n\t\t\t\t\tstring.push(key + Mark.EQUALS + JSON.stringify(encodeURIComponent(obj[key])));\n\t\t\t\t} else {\n\t\t\t\t\tstring.push(key + Mark.EQUALS + encodeURIComponent(obj[key]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn string.join(Mark.AND);\n\t},\n\tfirstToUpperCase: function (str) {\n\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\n\t\treturn str.charAt(0).toUpperCase() + str.slice(1);\n\t},\n\tfirstToLowserCase: function (str) {\n\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\n\t\treturn str.charAt(0).toLowerCase() + str.slice(1);\n\t}\n};\n\nconst MathUtil = {\n\t/*\n\t * 代码来自：https://tool.lu/hexconvert/\n\t * 有修改。\n\t *\n\t * 进制转换函数。\n\t * 有三个参数：\n\t *   第一个参数支持的数据类型包括字符串和数字，\n\t *     当第一个参数的数据类型为数字（typeof === Number.TYPE_NAME），\n\t *       且没有提供第三个参数，则第二个参数的值作为输出参数处理。\n\t *   第二个参数是输入进制基数，\n\t *      如果不提供该参数，则判断输入的数字为10进制；\n\t *      如果输入的字符串中含有该进制不认可的字符，则返回NaN；\n\t *      如果hexConvert 不支持该进制，则抛出错误。\n\t *   第三个参数是输出进制基数，\n\t *      当第一个参数的数据类型为数字（typeof === Number.TYPE_NAME），该参数无效，\n\t *        以第二个参数作为输出进制基数进行处理\n\t *      如果不提供该参数，则判断输入的数字为10进制；\n\t *      如果hexConvert 不支持该进制，则抛出错误。\n\t */\n\thexConvert: (function () {\n\t\tconst BIN = 2,\n\t\t\tSIX = 6,\n\t\t\tOCT = 8,\n\t\t\tDEC = 10,\n\t\t\tHEX = 16,\n\t\t\tTWENTY_SIX = 26,\n\t\t\tSIXTY_TWO = 62\n\t\tSIXTY_FOUR = 64;\n\n\t\tconst BIN_START = \"0b\",\n\t\t\tOCT_START = \"0o\",\n\t\t\tHEX_START = \"0x\"\n\n\t\tconst NaN_STR = Number.NaN_TYPE_NAME;\n\t\tconst HEX_CHARS = {};\n\t\tHEX_CHARS[DEC] = \"0123456789\";\n\t\tHEX_CHARS[HEX] = HEX_CHARS[DEC] + \"ABCDEF\";\n\t\tHEX_CHARS[TWENTY_SIX] = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tHEX_CHARS[SIXTY_FOUR] = (HEX_CHARS[DEC] + HEX_CHARS[TWENTY_SIX] + HEX_CHARS[TWENTY_SIX].toUpperCase()).replace(/[Oo01lI]/g, String.BLANK) + \"!@$&#%\";\n\t\tHEX_CHARS[SIXTY_TWO] = HEX_CHARS[SIXTY_FOUR].slice(2);\n\n\t\t// Returns a string representation of the given number for the given alphabet:\n\t\tfunction toAlphabet(num, alphabet) {\n\t\t\tvar base = alphabet.length;\n\t\t\tvar digits = [];\t// these will be in reverse order since arrays are stacks\n\n\t\t\t// execute at least once, even if num is 0, since we should return the \"0\":\n\t\t\tdo {\n\t\t\t\tdigits.push(num % base);\t// TODO handle negatives properly?\n\t\t\t\tnum = Math.floor(num / base);\n\t\t\t} while (num > 0);\n\n\t\t\tvar chars = [];\n\t\t\twhile (digits.length) {\n\t\t\t\tchars.push(alphabet[digits.pop()]);\n\t\t\t}\n\t\t\treturn chars.join(String.BLANK);\n\t\t};\n\n\t\t// Returns an integer representation of the given string for the given alphabet:\n\t\tfunction fromAlphabet(str, alphabet) {\n\t\t\tvar base = alphabet.length;\n\t\t\tvar pos = 0;\n\t\t\tvar num = 0;\n\n\t\t\tfor (let chr of str) {\n\t\t\t\tlet at = alphabet.indexOf(chr);\n\t\t\t\tif (at === -1) return NaN; // 因为返回的类型都是数字，所以这里直接返回 NaN\n\t\t\t\tnum += Math.pow(base, pos) * at;\n\t\t\t\tpos++;\n\t\t\t}\n\n\t\t\treturn num;\n\t\t};\n\n\t\tfunction fromBase(str, base) {\n\n\t\t\tswitch (base) {\n\t\t\t\tcase BIN:\n\t\t\t\t\tstr = BIN_START + str;\n\t\t\t\t\treturn Number(str);\n\t\t\t\tcase OCT:\n\t\t\t\t\tstr = OCT_START + str;\n\t\t\t\t\treturn Number(str);\n\t\t\t\tcase DEC:\n\t\t\t\t\treturn Number(str);\n\t\t\t\tcase HEX:\n\t\t\t\t\tstr = HEX_START + str;\n\t\t\t\t\treturn Number(str);\n\t\t\t\tdefault:\n\t\t\t\t\treturn fromAlphabet(str, HEX_CHARS[base]);\n\t\t\t}\n\t\t};\n\n\t\tfunction hexConvert(num, inBase = DEC, outBase = DEC) {\n\n\t\t\tinBase = Number(inBase);\n\t\t\toutBase = Number(outBase);\n\n\t\t\tif (inBase > HEX && !(inBase in HEX_CHARS)) illegalArguments(\"不支持的输入进制基数：\" + inBase);\n\t\t\tif (outBase > HEX && !(outBase in HEX_CHARS)) illegalArguments(\"不支持的输出进制基数：\" + outBase);\n\n\t\t\tlet type = typeOf(num);\n\t\t\tswitch (type) {\n\t\t\t\tcase String.TYPE_NAME:\n\t\t\t\t\tnum = fromBase(num, inBase);\n\t\t\t\t\tif (Object.is(num, NaN)) return NaN_STR;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Number.TYPE_NAME:\n\t\t\t\t\toutBase = inBase;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tillegalArguments(\"不被支持的参数类型：\" + type);\n\t\t\t}\n\n\t\t\tlet hexChars = (outBase < DEC) ? HEX_CHARS[DEC].slice(0, outBase) : HEX_CHARS[outBase];\n\t\t\treturn toAlphabet(num, hexChars);\n\t\t}\n\n\t\thexConvert.BIN = BIN;\n\t\thexConvert.OCT = OCT;\n\t\thexConvert.DEC = DEC;\n\t\thexConvert.HEX = HEX;\n\t\thexConvert.TWENTY_SIX = TWENTY_SIX;\n\t\thexConvert.SIXTY_TWO = SIXTY_TWO;\n\t\thexConvert.SIXTY_FOUR = SIXTY_FOUR;\n\t\treturn hexConvert;\n\t})(),\n\tPrimeNumber: (function () {\n\n\t\tconst PRIME_IN_50 = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]; // 预置50以内的所有质数\n\n\t\tfunction getPrimeInInputStartsWithFrom(primes, from) {\n\n\t\t\tlet output = [];\n\n\t\t\tfor (let i = primes.length - 1; i >= 0; i--) {\n\t\t\t\tif (primes[i] < from) break;\n\t\t\t\toutput.unshift(primes[i]);\n\t\t\t}\n\n\t\t\tif (from < 2) {\n\t\t\t\toutput.unshift(2);\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\treturn {\n\t\t\tcalcByInput: (from, to) => {\n\n\t\t\t\t// 错误检查\n\t\t\t\tif (!Number.isNumber(from)) errorCast(from, Number);\n\t\t\t\tif (!Number.isNumber(to)) errorCast(to, Number);\n\t\t\t\tif (from > to) unsupportedOperation(\"开始数必须大于结束数\");\n\t\t\t\tif (to < 0 || from < 0) unsupportedOperation(\"开始数必须大于 0\");\n\n\t\t\t\tlet primes = PRIME_IN_50.slice();\n\t\t\t\tlet output = getPrimeInInputStartsWithFrom(primes, from);\n\n\t\t\t\tIS_PRIME: for (let i = 53; i < to; i += 2) {\n\n\t\t\t\t\tfor (let j = 0; j < primes.length; j++) {\n\t\t\t\t\t\tif (i % primes[j] === 0) continue IS_PRIME;\n\t\t\t\t\t}\n\n\t\t\t\t\tprimes.push(i);\n\t\t\t\t\tif (i >= from) {\n\t\t\t\t\t\toutput.push(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\t\t\t},\n\t\t\tis: (input) => {\n\n\t\t\t\tif (!typeIs(input, Number.TYPE_NAME)) errorCast(input, Number);\n\n\t\t\t\tlet inputRoot = Math.sqrt(input);\n\n\t\t\t\tfor (let i = 0; i < PRIME_IN_50.length; i++) {\n\t\t\t\t\tlet now = PRIME_IN_50[i];\n\t\t\t\t\tif (now > inputRoot) return true;\n\t\t\t\t\tif (input % now === 0) return false;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 51; i < inputRoot; i += 2) {\n\t\t\t\t\tif (input % i === 0) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t})()\n};\n\nconst ObjectUtil = {\n\t/**\n\t * 迭代器\n\t */\n\titerator: (obj) => {\n\t\treturn new Iterator(obj);\n\t},\n\thasOwnProperty: hasOwnProperty,\n\toverride: function (obj, name, callback) {\n\n\t\tvar proto = obj[name];\n\n\t\tobj[name] = callback(function () {\n\t\t\treturn proto.apply(obj, arguments);\n\t\t});\n\t},\n\targumentsToArray: function () {\n\t\treturn Array.of(arguments);\n\t},\n\tclone: objectClone,\n\t/*\n\t * 通过 Type 类来获得相关 type 的信息\n\t */\n\tgetType: getType\n};\n\nconst CharUtil = (function () {\n\n\tfunction invaildCharacter(input) {\n\t\tthrow new Error(input + \" 不是合法的字符\");\n\t}\n\n\tconst ZERO = 0x0030,\n\t\tNINE = 0x0039,\n\t\tUPPER_A = 0x0041,\n\t\tUPPER_Z = 0x005A,\n\t\tLOWER_A = 0x0061,\n\t\tLOWER_Z = 0x007A;\n\n\t// TODO 这个函数有点问题，先暂时不用\n\t// function __isNumber(number) {\n\t// \tif (!isChar(number)) invaildCharacter(number);\n\t// \tvar code = number.charCodeAt(0);\n\t// \treturn code >= ZERO && code <= NINE;\n\t// }\n\n\tfunction isAlphabet(input) {\n\t\tif (!isChar(input)) invaildCharacter(input);\n\t\tvar code = letter.charCodeAt(0);\n\t\treturn (code >= UPPER_A && code <= UPPER_Z) || (code >= LOWER_A && code <= LOWER_Z);\n\t}\n\n\tfunction isChar(str) {\n\t\tif (!typeIs(str, String.TYPE_NAME)) errorCast(str, String);\n\t\treturn 1 === str.length;\n\t}\n\n\treturn {\n\t\tisChar: isChar,\n\t\tisNumber: Number.isNumber,\n\t\tisAlphabet: isAlphabet,\n\t\tisNumberOrAlphabet: function (arg) {\n\t\t\treturn Number.isNumber(arg) || isAlphabet(arg);\n\t\t},\n\t\tisASCII(input) {\n\t\t\tif (!isChar(input)) invaildCharacter(input);\n\t\t\treturn input.charAodeAt(0) < 128;\n\t\t},\n\t\tisSpace: function (input) {\n\t\t\tif (!isChar(input)) invaildCharacter(input);\n\t\t\t// return Array.has(SPACE, input);\n\t\t\treturn Mark.SPACE_REGX.test(input);\n\t\t},\n\t\tchange: function (value, count) {\n\t\t\tif (!Number.isNumber(count)) errorCast(count, Number);\n\t\t\tif (isChar(value)) {\n\t\t\t\treturn String.fromCharCode(value.charCodeAt(0) + count);\n\t\t\t} else {\n\t\t\t\tunsupportedOperation(value + \" 不是合法的字符\");\n\t\t\t}\n\t\t},\n\t\tcompare: function (char1, char2) {\n\t\t\tif (!isChar(char1)) invaildCharacter(char1);\n\t\t\tif (!isChar(char2)) invaildCharacter(char2);\n\t\t\treturn char1.charCodeAt(0) - char2.charCodeAt(0);\n\t\t},\n\t\tasUnicodeEncode: function (input) {\n\t\t\tvar code;\n\t\t\tif (!Number.isNumber(input)) {\n\t\t\t\tif (!isChar(input)) invaildCharacter(input);\n\t\t\t\tcode = (input.charCodeAt(0)).toString(16);\n\t\t\t} else {\n\t\t\t\tcode = (input).toString();\n\t\t\t}\n\t\t\tcode = code.toUpperCase();\n\t\t\tswitch (code.length) {\n\t\t\t\tcase 1:\n\t\t\t\t\tcode = \"000\" + code;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tcode = \"00\" + code;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tcode = \"0\" + code;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn \"\\\\u\" + code;\n\t\t},\n\t\tZERO: ZERO,\n\t\tNINE: NINE,\n\t\tUPPER_A: UPPER_A,\n\t\tUPPER_Z: UPPER_Z,\n\t\tLOWER_A: LOWER_A,\n\t\tLOWER_Z: LOWER_Z\n\t};\n})();\n\nconst NumberUtil = {\n\taddBeforeZero: function (arg, length) {\n\t\tif (!typeIs(arg, Number.TYPE_NAME)) unsupportedType(arg);\n\t\tif (!typeIs(length, Number.TYPE_NAME)) unsupportedType(length);\n\n\t\tvar r = [];\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tr.push(\"0\");\n\t\t}\n\t\treturn r.join(EMPTY_STRING) + arg;\n\t},\n\twithComma: (num, cutSize = 3) => {\n\n\t\tlet sNum = (num || 0).toString(), result = String.BLANK;\n\t\twhile (sNum.length > cutSize) {\n\t\t\tresult = Mark.COMMA + num.slice(-cutSize) + result;\n\t\t\tsNum = sNum.slice(0, sNum.length - cutSize);\n\t\t}\n\t\tif (sNum) {\n\t\t\tresult = sNum + result;\n\t\t}\n\t\treturn result;\n\t},\n\tparseInt: function (num, nag) {\n\t\treturn parseNumber(num, nag, parseInt);\n\t},\n\tparseFloat: function (num, nag) {\n\t\treturn parseNumber(num, nag, parseFloat);\n\t}\n};\n\nmodule.exports = exports = {\n\tInterface: Interface,\n\tIterator: Iterator,\n\tMathUtil: MathUtil,\n\tObjectUtil: ObjectUtil,\n\tStringUtil: StringUtil,\n\tNumberUtil: NumberUtil,\n\tCharUtil: CharUtil\n}\n\n//# sourceURL=webpack://coralian/./src/lib/util.js?");

/***/ }),

/***/ "./src/lib sync recursive ^\\.\\/.*$":
/*!********************************!*\
  !*** ./src/lib/ sync ^\.\/.*$ ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./Calendar\": \"./src/lib/Calendar.js\",\n\t\"./Calendar.js\": \"./src/lib/Calendar.js\",\n\t\"./Formatter\": \"./src/lib/Formatter.js\",\n\t\"./Formatter.js\": \"./src/lib/Formatter.js\",\n\t\"./Random\": \"./src/lib/Random.js\",\n\t\"./Random.js\": \"./src/lib/Random.js\",\n\t\"./ReplaceHolder\": \"./src/lib/ReplaceHolder.js\",\n\t\"./ReplaceHolder.js\": \"./src/lib/ReplaceHolder.js\",\n\t\"./Validator\": \"./src/lib/Validator.js\",\n\t\"./Validator.js\": \"./src/lib/Validator.js\",\n\t\"./constants\": \"./src/lib/constants.js\",\n\t\"./constants.js\": \"./src/lib/constants.js\",\n\t\"./dom\": \"./src/lib/dom.js\",\n\t\"./dom.js\": \"./src/lib/dom.js\",\n\t\"./logger\": \"./src/lib/logger.js\",\n\t\"./logger.js\": \"./src/lib/logger.js\",\n\t\"./util\": \"./src/lib/util.js\",\n\t\"./util.js\": \"./src/lib/util.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src/lib sync recursive ^\\\\.\\\\/.*$\";\n\n//# sourceURL=webpack://coralian/./src/lib/_sync_^\\.\\/.*$?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;